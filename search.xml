<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lambda Calculus: A Preliminary View</title>
      <link href="/posts/Lambda-Calculus-A-Preliminary-View/"/>
      <url>/posts/Lambda-Calculus-A-Preliminary-View/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;You are the only problem you will ever have and you are the only solution.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Bob Proctor</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>I’ve been struggling making up the missing background knowledge for my research, which is not something very enjoyable. I always hate formulas and mathematical proofs. However, I did find something interesting among those boring stuffs, which is the theory behind functional programming.</p><div class="note info flat"><p>This is a reflection when I was learning <a href="https://ocw.mit.edu/courses/6-820-fundamentals-of-program-analysis-fall-2015/">MIT 6.820 Fundamentals of Programming Analysis</a>. This post roughly covers lecture 1 to 3.</p></div><hr><h1 id="Basics-on-Functional-Programming"><a href="#Basics-on-Functional-Programming" class="headerlink" title="Basics on Functional Programming"></a>Basics on Functional Programming</h1><p>First of all, there is some basic concepts in functional programming.</p><h2 id="Free-Bound-Variables"><a href="#Free-Bound-Variables" class="headerlink" title="Free&#x2F;Bound Variables"></a>Free&#x2F;Bound Variables</h2><p>In functional programming, the function is, the function we know. There is nothing special. A function consists of <strong>name</strong>, <strong>arguments</strong> and a <strong>body</strong>, where there are variables (or identifiers) as the arguments or in the body. Variables are the actual operands, so we need to define them more carefully.</p><p>There are two kinds of variables, one is <strong>free</strong>, the other is <strong>bound</strong>. It is easy to tell them apart, where <strong>bound</strong> variables are those appear in the arguments of a function, and the others are <strong>free</strong> variables. Bound variables are those you must provide to invoke (or apply) a function, while free variables are captures from the context. For example, in the following <code>func</code> function below, <code>x</code> and <code>y</code> are bound variables, and <code>a</code> and <code>b</code> are free variables.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">func</span> x y = x * a + y * b</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Bound variable is also known as <strong>formal parameter</strong>.</p></div><h2 id="Renaming"><a href="#Renaming" class="headerlink" title="Renaming"></a>Renaming</h2><p>As an experienced programmer, you may not notice the existence of renaming although you know it. Given the C snippet below, you immediately know that the inner <code>a</code> and the outer <code>a</code> are different, even though they have the same lexeme.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>TypeScript has concepts like closure and types, which makes it a good substitution for pure functional programming languages like <a href="https://www.haskell.org/">Haskell</a> if you don’t have prior knowledge of the latter.</p></div><p>Although discouraged, in real programming, we can have two identifiers using the same name and let one hides another. However, in theory, to avoid confusion (at least I think so), renaming them is a better idea. So, we have $\alpha$-renaming. After $\alpha$-renaming, the above code snippet will become as below.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> a1 = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Do pay attention to it, as this renaming process will be used later for substitution.</p></div><div class="note warning flat"><p>As renaming is to avoid name confliction, one can only rename bound variables, and should not introduce new name confliction.</p></div><h2 id="Type-System"><a href="#Type-System" class="headerlink" title="Type System"></a>Type System</h2><p>No matter it is static type or dynamic type, there is always type. In functional programming, <a href="https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system">Hindley&mdash;Milner type system</a> is often used. </p><p>Informally, the type of an expression is either <code>OUT</code> or <code>IN -&gt; ... -&gt; IN -&gt; OUT</code>. If it is a variable, then apparently, it has a fixed type. For a function, it’s type is defined by what it takes in and what it gives out. Given an example below, it should be easy to understand.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add     : Number -&gt; Number -&gt; Number</span><br><span class="line">add 3   : Number -&gt; Number</span><br><span class="line">add 3 4 : Number</span><br><span class="line">7       : Number</span><br></pre></td></tr></table></figure><div class="note info flat"><p>It is fun to think that, give a function, you can either provide all arguments at once, or provide arguments one by one. And both can have the final answer.</p></div><p>This type system is natural for pure functional programming languages. But if you only do functional style programming in other languages, you may need to use the so-called curried function to achieve this. For example, in TypeScript, you can do this. The idea is construct new functions and capture existing arguments as free variables.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addCurried</span>(<span class="params">a: <span class="built_in">number</span></span>): <span class="function">(<span class="params">b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">b: <span class="built_in">number</span></span>) =&gt;</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`add(<span class="subst">$&#123;<span class="number">2</span>&#125;</span>, <span class="subst">$&#123;<span class="number">3</span>&#125;</span>) = <span class="subst">$&#123;add(<span class="number">2</span>, <span class="number">3</span>)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`addCurried(<span class="subst">$&#123;<span class="number">2</span>&#125;</span>)(<span class="subst">$&#123;<span class="number">3</span>&#125;</span>) = <span class="subst">$&#123;addCurried(<span class="number">2</span>)(<span class="number">3</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>This trick is useful to partial initialize template variables in TypeScript.</p></div><hr><h1 id="The-lambda-Calculus"><a href="#The-lambda-Calculus" class="headerlink" title="The $\lambda$ Calculus"></a>The $\lambda$ Calculus</h1><p>To bring our topic to a higher level, we have $\lambda$ calculus. It is the abstract form of functional programming.</p><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>The syntax of pure $\lambda$ calculus is given below, which uses a common grammar notation. It may seem a bit weird at first to see something like $\lambda x.E$, but you can take it a equivalent of <code>function (x) =&gt; E</code>. As for the application, the left E should reduce to an abstraction (a.k.a. function), so the right part can be the argument.</p><p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915114637363.png" alt="image-20250915114637363"></p><p>This grammar definition is simple and contains left recursion, so you may already notice that it is ambiguous. Therefore, we have an extra rule that the scope of the dot in an abstraction extends as far to the right as possible. Now, it is not ambiguous.</p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915114807144.png" alt="image-20250915114807144" style="zoom:50%;"><h2 id="Combinator"><a href="#Combinator" class="headerlink" title="Combinator"></a>Combinator</h2><p>The definition for free and bound variables also applies here. In $\lambda x.E$, $x$ is a bound variable, and all other variables in $E$ are free variables.</p><p>However, we have a new concept here. If a $\lambda$ calculus (or $\lambda$ expression) comes without free variable, it is then called a <strong>combinator</strong> or a <strong>closed $\lambda$ expression</strong>.</p><h2 id="Substitution"><a href="#Substitution" class="headerlink" title="Substitution"></a>Substitution</h2><blockquote><p>One reason I don’t like theory is that, in theory, people just name the same thing with different words, and make simple things complex. </p></blockquote><p>Here, substitution is simply renaming of variables, and we note it with $[y&#x2F;x]$, meaning replacing all $x$ to $y$. So, $E[y&#x2F;x]$ is replacing all $x$ to $y$ in $E$. Then what is it used for? Well… it is the abstraction of function application. For example, as given below, we pass $E_a$ as the argument to an abstraction.<br>$$<br>(\lambda x.E) E_a \rightarrow E[E_a&#x2F;x]<br>$$<br>A bit too abstract? Take a TypeScript example below.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">x</span>) =&gt; x + <span class="number">1</span>)(a) <span class="comment">// before: E = x + 1, Ea = a</span></span><br><span class="line">a + <span class="number">1</span>                      <span class="comment">// after</span></span><br></pre></td></tr></table></figure><p>After application, arguments becomes substitution, which follows \beta-substitution. The substitution matches exact variable name, so it is possible that nothing changes after substitution. In short, the rule of \beta-substitution is given below. Notice that, x and y here are expressions, which means they can be variables or functions.</p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915122415419.png" alt="image-20250915122415419" style="zoom: 50%;"><div class="note info flat"><p>Don’t worry, the question marks in the image above do not mean they are wrong.</p></div><p>As for the application, it is like, you calls the function with $x$, then all inner functions&#x2F;expressions will use this $x$ if they use $x$ as a variable  (either free or bound).</p><p>As for abstraction, it makes sense that if you substitute a bound variable, it makes no difference as it is just an argument. However, in other case, you should be careful not to introduce name confliction. That is to say, if $E_a$ contains $y$, it will “contaminate” $\lambda y.E_1$, so we first need to ensure the bound variable $y$ in $E_1$ does not appear as a free variable in $E_a$.</p><div class="note info flat"><p>Why only ensure $z$ is not a free variable? Because bound variables have scopes, so it is OK to have nested bound variables, although not friendly for reading.</p></div><p>Here is an example using $\beta$-substitution, from which you can see something bad will happen if we do not rename $p$ in the first place.</p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915123759908.png" alt="image-20250915123759908" style="zoom:50%;"><h2 id="Reduction"><a href="#Reduction" class="headerlink" title="Reduction"></a>Reduction</h2><p>The $\lambda$ calculus it self can be a reduction system, in which we reduce the expression by applying functions. Some terms to keep in mind. $\alpha$-rule is essentially the renaming rule, like what you do to rename a parameter. $\beta$-rule is covered just now. Take greater attention to <strong>redex</strong> (reducible expression) and <strong>normal form</strong> here as we will talk about it real soon.</p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915124333108.png" alt="image-20250915124333108" style="zoom:50%;"><div class="note danger flat"><p>We will not talk about $\eta$-rule.</p></div><p>Here is an example on reduction. Now you can see function as argument, which is normal in functional programming.</p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915130533077.png" alt="image-20250915130533077" style="zoom:50%;"><p>A possible reduction is given below. Because we have <strong>confluence</strong>, the order of reduction does not matter.<br>$$<br>\begin{align}<br>\begin{split}<br>&amp; H (C \space a \space b) \newline<br>\rightarrow \space &amp; (\lambda f.f(\lambda x.\lambda y.x))(C \space a  \space b) \newline<br>\rightarrow \space &amp; (C \space a \space b) (\lambda x.\lambda y.x) \newline<br>\rightarrow \space &amp; ((\lambda x.\lambda y.\lambda f.f \space x \space y) \space a \space b)(\lambda x.\lambda y.x) \newline<br>\rightarrow \space &amp; (\lambda f.f \space a \space b)(\lambda x.\lambda y.x) \newline<br>\rightarrow \space &amp; ((\lambda x.\lambda y.x) \space a \space b) \newline<br>\rightarrow \space &amp; a<br>\end{split}<br>\end{align}<br>$$</p><h3 id="Confluence"><a href="#Confluence" class="headerlink" title="Confluence"></a>Confluence</h3><p>Just mention it briefly. Confluence means that if there is $E \rightarrow E1$ and $E \rightarrow E2$, then there is $E1 \rightarrow E3$ and $E2 \rightarrow E3$, so that eventually we still have $E \rightarrow E3$. It is also called Church-Rosser Property of a reduction system. $\lambda$ calculus has such property, but not all reduction systems.</p><h3 id="Reduction-Strategy"><a href="#Reduction-Strategy" class="headerlink" title="Reduction Strategy"></a>Reduction Strategy</h3><p>Like what we learnt in Compiler Technology course, we have left-most (normal) reduction and right-most reduction. Under the setting of $\lambda$ expression, they are also called normal order and applicative order.</p><p>It is interesting, as for compilers, we use normal reduction to parse the abstract syntax tree. However, in most programming languages (e.g. C, TypeScript), we use applicative order to evaluate an expression (i.e. prepare all arguments before calling a function).</p><h2 id="Term"><a href="#Term" class="headerlink" title="Term"></a>Term</h2><p>Don’t forget why we are learning all these. We are part of our journey to program analysis, and one goal is to understand the meaning of a program. And to do this, we need to first define the meaning of an expression, or <strong>term</strong>.</p><p>A <a href="#Reduction">redex</a> will be reduced because it is not the final form, so we define it to carry no information ($\bot$). Then, the meaning of a term is obtained by replacing all redex in it with $\bot$, which is called <strong>instantaneous information</strong>. See below, the information monotonically increases by $\beta$ reduction.</p><img src="/posts/Lambda-Calculus-A-Preliminary-View/image-20250915132633010.png" alt="image-20250915132633010" style="zoom:50%;"><p>So, it seems the meaning of a term is defined by its normal form. However, not all terms has normal form, for example, the term $\Omega$ can’t be reduced to a normal form, and each reduction result is still itself. Also, since the syntax of $\lambda$ calculus is not ambiguous, one term won’t have multiple normal forms.<br>$$<br>\Omega &#x3D; (\lambda x.x \space x) (\lambda x.x \space x)<br>$$</p><div class="note info flat"><p>This is a very special term, which is also very useful. We’ll see it again later.</p></div><h2 id="Normal-Form"><a href="#Normal-Form" class="headerlink" title="Normal Form"></a>Normal Form</h2><p>The reduction will lead an expression to its normal form (unless it is like $\Omega$). Since we are talking about normal form, we imply the usage of normal reduction. Based on normal form, there are two other variations that interests us.</p><p><strong>Head normal form (HNF)</strong>: A term in which the head is not a redex. It represents the information content of an expression.<br>$$<br>\begin{split}<br>x                               &amp; \in HNF         \newline<br>x \space E_1 \space E_2 … E_n &amp; \in HNF         \newline<br>\lambda x.E                     &amp; \in HNF \space (if \space E \in HNF) \newline<br>\end{split}<br>$$<br><strong>Weak head normal form (WHNF)</strong>: A term in which the left most application is not a redex. This is useful in practice. Suppose that you have an expression, if it is a variable or function, you know what it is. But if it is a function call, you cannot determine what it is unless you really call it and get its result, and the result is either a variable or function.<br>$$<br>\begin{split}<br>x                               &amp;\in WHNF        \newline<br>x \space E_1 \space E_2 … E_n &amp;\in WHNF        \newline<br>\lambda x.E                     &amp;\in WHNF<br>\end{split}<br>$$</p><hr><h1 id="The-Y-Combinator"><a href="#The-Y-Combinator" class="headerlink" title="The Y Combinator"></a>The Y Combinator</h1><div class="note info flat"><p>There is a wonderful blog you can refer to: <a href="https://mvanier.livejournal.com/2897.html">The Y Combinator</a>.</p></div><p>In mathematics, there is concept of fixed point, which is $x &#x3D; f(x)$. This can be an interesting property in $\lambda$ calculus when there is recursion. Normally, when we have recursion, we will write something like this: <code>fact(n) =&gt; n * fact(n - 1)</code>, which is</p><p>$$<br>fact &#x3D; \lambda n.n*fact(n-1)<br>$$</p><p>In $\lambda$ calculus, we can abstract it to be<br>$$<br>\lambda f.\lambda n.n * f(n - 1) &#x3D; \lambda f.(\lambda n.n * f(n - 1))<br>$$<br>Now, it becomes a function that takes a function (<code>f</code>), and returns another function which takes the original argument (<code>n</code>) and invokes the argument function (<code>f</code>). </p><p>It sounds really messy, so what are we doing here? Take a breath, and you may notice that the recursion is gone. Instead, we are calling  “another” function. But being a recursion problem in nature, this “another” function should behave the same. So, how is this done?</p><h2 id="Fixed-Point"><a href="#Fixed-Point" class="headerlink" title="Fixed Point"></a>Fixed Point</h2><p>You apply a function, and get it back. In this case, you are playing with fixed point. Just now, we met a special $\lambda$ expression which always reduce to it self:<br>$$<br>\Omega &#x3D; (\lambda x.x \space x) (\lambda x.x \space x)<br>$$<br>Then, if we make a little modification, it becomes<br>$$<br>\begin{align}<br>\begin{split}<br>\Omega_F &amp; &#x3D; (\lambda x.F(x \space x)) (\lambda x.F(x \space x)) \newline<br>       &amp; &#x3D; F \space ((\lambda x.F(x \space x))(\lambda x.F(x \space x))) \newline<br>       &amp; &#x3D; F \space \Omega_F \newline<br>       &amp; &#x3D; F \space (F \space \Omega_F)<br>\end{split}<br>\end{align}<br>$$<br>We can see that $\Omega$ is a fix point of $F$. Now, we abstract it and get the <strong>Y Combinator</strong><br>$$<br>Y &#x3D; \lambda f.\Omega_F[f&#x2F;F] &#x3D; \lambda f.(\lambda x.f(x \space x)) (\lambda x.f(x \space x))<br>$$<br>Then given any function $F$, we have $YF &#x3D; \Omega_F$ being the fixed point of $F$, i.e. $YF &#x3D; F(YF)$. Suppose our $F$ returns $\lambda n.E$, we have<br>$$<br>\begin{align}<br>\begin{split}<br>Y \space F \space n &amp;&#x3D; (YF) \space n \newline<br>    &amp;&#x3D; ((\lambda x.F(x \space x)) (\lambda x.F(x \space x))) \space n \newline<br>    &amp;&#x3D; F \space ((\lambda x.F(x \space x)) \space (\lambda x.F(x \space x))) \space n \newline<br>    &amp;&#x3D; F \space (Y \space F) \space n<br>\end{split}<br>\end{align}<br>$$<br>Depending on the behavior of $F$, it can call $YF$ so that the invocation goes on and on, until $F$ stops calling $YF$ with certain value of $n$.</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type?"></a>Type?</h3><p>Be careful when you reason the types here. Although we are having the same identifier $F$, each instance has different type. Assuming that $F$ has type $T \rightarrow R$. Then, we have the following types. The type given is the head identifier’s type.<br>$$<br>\begin{align}<br>\begin{split}<br>F_0     :&amp; \space T \rightarrow R \newline<br>YF_0    :&amp; \space (T \rightarrow R) \rightarrow R \newline<br>F_1(YF_0) :&amp; \space ((T \rightarrow R) \rightarrow R) \rightarrow R \newline<br>F_2(F_1(YF_0)) :&amp; \space (((T \rightarrow R) \rightarrow R) \rightarrow R) \rightarrow R<br>\end{split}<br>\end{align}<br>$$<br>So, we can see that even though they are all $F$, their types are different. The only type that is the same is the return type. Thus it is a problem for static typed languages.</p><h2 id="About-Y-Combinator"><a href="#About-Y-Combinator" class="headerlink" title="About Y Combinator"></a>About Y Combinator</h2><p>The $x \space x$ in the Y Combinator might be confusing. It is a self application, and does not mean that $F$ takes two arguments. Instead, it means $F$ takes one argument which is the result of the expression $x \space x$. And as indicated, the result of $x \space x$ is $Y \space F$, the fixed point. Hence, $F$ eventually takes $F’$, and returns $\lambda n.E$, where $F’ \in E$ (it would be funny if $F’ \notin E$), so that the chain goes on.</p><p>You may wonder, how does this chain stop? In common programming languages, the runtime uses applicative order (check <a href="#Reduction-Strategy">Reduction</a> if you forget it), which means all arguments will be resolved before calling a function. In this case, We will end up resolving $YF$ forever and never have the chance to go into $F$. In other words, these languages only accept normal form.</p><p>However, many functional programming languages use normal order reduction even for arguments. In these languages, weak head normal form is accepted. Therefore, the runtime won’t evaluate $YF$ further until necessary, which is also called lazy evaluation. So that $F$ can take $YF$ (WHNF) as it is, return $\lambda n.E$, and only evaluate $YF$ in the invocation of $\lambda n.E$ if needed.</p><p>You will get a clearer view of it in the following implementation.</p><h2 id="Implementation-of-Y-Combinator"><a href="#Implementation-of-Y-Combinator" class="headerlink" title="Implementation of  Y Combinator"></a>Implementation of  Y Combinator</h2><p>The concept is always abstract, so let’s make it concrete. Ultimately, what we want is $YF &#x3D; F(YF)$, so we just need to ensure this property.</p><p>First, for clarity, we define an alias for function that takes one argument.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Func</span>&lt;T, R&gt; = <span class="function">(<span class="params">arg: T</span>) =&gt;</span> R;</span><br></pre></td></tr></table></figure><p>Take factorial calculation as the example. The recursive version (<u>r</u>ecursive <u>fact</u>orial) would be as follows, which is $\lambda x.E$. Here, <code>rfact</code> is a free variable as it is captured outside.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rfact = (<span class="attr">n</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="title function_">rfact</span>(n - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>However, we don’t want direct recursion, i.e. we don’t want to capture <code>rfact</code> in itself. Now, if we abstract <code>rfact</code>, then <code>rfact</code> becomes a bound variable <code>f</code>. Essentially, our <code>rfact</code> is now a formal argument of <code>fact</code>, and <code>fact</code> returns <code>rfact</code>. The direct recursion is eliminated.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fact = (<span class="attr">f</span>: <span class="title class_">Func</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;): <span class="title class_">Func</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; =&gt; (<span class="function"><span class="params">n</span> =&gt;</span> n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="title function_">f</span>(n - <span class="number">1</span>));</span><br></pre></td></tr></table></figure><div class="note info flat"><p>From certain point of view, our <code>fact</code> is now a generator.</p></div><p>Then, let’s think about the Y Combinator. From the implementation’s view, it is quite straight forward. We just need to make sure $YF &#x3D; FYF$. So, it can be rather simple.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Y = (<span class="attr">f</span>: <span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">Y</span>(f));</span><br></pre></td></tr></table></figure><p>And this is it, now we can calculate factorial using <code>Y(fact)</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`factorial(<span class="subst">$&#123;<span class="number">5</span>&#125;</span>) = <span class="subst">$&#123;Y(fact)(<span class="number">5</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><div class="note orange icon-padding flat"><i class="note-icon fas fa-lightbulb"></i><p>This is it? No direct recursion?</p></div><p>Looking back, <code>Y</code> in fact recursively provides the <code>f</code> in <code>fact</code>. When ever <code>fact</code> calls <code>f</code>, it is calling <code>Y(fact)</code>, which yields another <code>Y(fact)</code>, thus achieving recursion without direct recursion in <code>fact</code>.</p><h3 id="Lazy-Evaluation"><a href="#Lazy-Evaluation" class="headerlink" title="Lazy Evaluation"></a>Lazy Evaluation</h3><p>However, when you actually run the code, you will immediately see stack overflow. This is what I mentioned earlier. TypeScript uses applicative order for argument evaluation, so <code>Y</code> will result in infinite recursion on application.</p><p>Luckily, for languages using applicative order evaluation, there is a workaround if they support lambda expression. We want to prevent the immediate invocation of <code>Y</code> in <code>f(Y(f))</code>. To do so, we can delay it into a lambda function call.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Y = (<span class="attr">f</span>: <span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> <span class="title function_">f</span>(<span class="function">(<span class="params">x: <span class="built_in">any</span></span>) =&gt;</span> <span class="title function_">Y</span>(f)(x));</span><br></pre></td></tr></table></figure><p>Now, <code>Y</code> won’t be invoked unless the lambda expression is invoked. Problem solved. By the way, you can add type hint for Y.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Y = &lt;T, R&gt;(<span class="attr">f</span>: <span class="title class_">Func</span>&lt;<span class="title class_">Func</span>&lt;T, R&gt;, <span class="title class_">Func</span>&lt;T, R&gt;&gt;): <span class="title class_">Func</span>&lt;T, R&gt; =&gt; <span class="title function_">f</span>(<span class="function">(<span class="params">x: T</span>) =&gt;</span> <span class="title function_">Y</span>(f)(x));</span><br></pre></td></tr></table></figure><h3 id="No-Recursion"><a href="#No-Recursion" class="headerlink" title="No Recursion?"></a>No Recursion?</h3><p>Remember what we want at the very beginning? To eliminate direct recursion. However, even we did it for <code>fact</code>, there is still direct recursion in <code>Y</code>. So our job is not finished yet. Let’s look at the equation again. Just now, we used $(4)$, so there is <code>Y</code> inside <code>Y</code>. Hmm, so the solution is quite clear &mdash; we can use $(2)$ or $(3)$.<br>$$<br>\begin{align}<br>\begin{split}<br>Y \space F \space n &amp;&#x3D; (YF) \space n &amp; (1) \newline<br>    &amp;&#x3D; ((\lambda x.F(x \space x)) (\lambda x.F(x \space x))) \space n &amp; (2) \newline<br>    &amp;&#x3D; F \space ((\lambda x.F(x \space x)) \space (\lambda x.F(x \space x))) \space n &amp; (3) \newline<br>    &amp;&#x3D; F \space (Y \space F) \space n &amp; (4)<br>\end{split}<br>\end{align}<br>$$<br>Since $(3)$ is derived from $(2)$, we just use the simpler one. Follow the equation, we get this. And we are done, again.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Y = (<span class="attr">f</span>: <span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> ((<span class="attr">x</span>: <span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">x</span>(x)) ((<span class="attr">x</span>: <span class="built_in">any</span>): <span class="function"><span class="params">any</span> =&gt;</span> <span class="title function_">f</span>(<span class="title function_">x</span>(x))</span><br></pre></td></tr></table></figure><div class="note info flat"><p>It may take you quite a while to get the idea.</p></div><p>Now you may wonder, can we add type annotations to it like we did before? The answer is yes, but no. The recursion cannot be totally eliminated, which now goes to the type. If you want to add types, this is what you will get. The last <code>any</code> in recursive and is unable to be expressed in TypeScript other than using <code>any</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Y = &lt;T, R, U = <span class="title class_">Func</span>&lt;T, R&gt;&gt;(<span class="attr">f</span>: <span class="title class_">Func</span>&lt;<span class="title class_">Func</span>&lt;T, R&gt;, U&gt;): <span class="function"><span class="params">U</span> =&gt;</span></span><br><span class="line">    ((<span class="attr">x</span>: <span class="built_in">any</span>): <span class="function"><span class="params">U</span> =&gt;</span> <span class="title function_">f</span>(<span class="function">(<span class="params">arg: T</span>) =&gt;</span> <span class="title function_">x</span>(x)(arg)))</span><br><span class="line">    ((<span class="attr">x</span>: <span class="built_in">any</span>): <span class="function"><span class="params">U</span> =&gt;</span> <span class="title function_">f</span>(<span class="function">(<span class="params">arg: T</span>) =&gt;</span> <span class="title function_">x</span>(x)(arg)));</span><br></pre></td></tr></table></figure><div class="note red icon-padding flat"><i class="note-icon fas fa-question"></i><p>To my limited knowledge of TypeScript, we can’t have recursive definition of template arguments. But if it is possible, do leave a comment below.</p></div><p>That should be all about the Y Combinator I have to talk about.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Isn’t it fun? No? Well, I guess you are right. But it indeed provides a different angle towards programming. And it is a new experience from theory to implementation. And, it takes a lot of time. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Music Notation With Avid Sibelius</title>
      <link href="/posts/Music-Notation-with-Avid-Sibelius/"/>
      <url>/posts/Music-Notation-with-Avid-Sibelius/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;But his voice, filled my spirit with a strange, sweet sound...</i><br>    <i>In that night there was music in my mind...</i><br>    <i>And through music my soul began to soar!</i><br>    <i>And I heard as I'd never heard before...&rdquo;</i></p><p style="text-align: right; font-family: var(--font-phantom)">&mdash; THE PHANTOM OF THE OPERA</p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>It seems I can only manage to post one article a month. Writing really takes much time especially when you aim for quality.</p><p>Anyway, as I finally had the chance to access the full score of the <span class="font-phantom">Phantom of the Opera</span>, I wonder how I can keep it. Of course you can take pictures, but pictures are blurry, and they don’t make a sound. Also, you can buy digital versions, but look at the price, it is far beyond what I can afford!</p><p>As a programmer, I love source code. For music, the sheet is the source code, so why not write it from scratch? Once you have the “source code”, you can redistribute it in any form!</p><p>To write music sheet, apparently you need a notation software. For simple music, there is <a href="https://musescore.com/">MuseScore</a>. It is free, and good enough. However, what I have now is a full score, which is far beyond the capability of a free software. Luckily, we have <a href="https://www.avid.com/sibelius">Avid Sibelius</a>, the most powerful notation software so far.</p><p>It is easy to install and friendly to beginners. However, it took me sometime to configure and there is some tips to share during the installation of its sounds library. Besides the installation, I’ll also talk about some tips for you if you write with your computer’s keyboard.</p><hr><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><div class="note danger flat"><p>For professional use, please purchase a license.</p></div><div class="note info flat"><p>If you just want a trial, you can get the direct download links here: <a href="https://musicednet.com/kb/kb00126?srsltid=AfmBOoq0VC332eUAUYeTH2aHnKPaU6L1iU43eKYyq2w-9ntmjP9DzN4">Sibelius 7.1 &amp; 7.5 direct download links</a>.</p></div><h2 id="Avid-Sibelius"><a href="#Avid-Sibelius" class="headerlink" title="Avid Sibelius"></a>Avid Sibelius</h2><p>The installation of Sibelius is easy, just follow the instruction. After installation, you can just start off as a composer.</p><p>You can find the downloads from the link given above. I just list it here for quick reference. Although Avid Sibelius supports Mac, I’m not talking about it as I do not have one.</p><ul><li><a href="http://cdn.avid.com/Sibelius/Sibelius_7_5/7.5.1/Sibelius_7.5.1_Win.zip">Sibelius 7.5.1 (Windows)</a></li></ul><div class="note info flat"><p>Besides versions like 7.5.1, it also has versions like 2022.9. But all should work.</p></div><h2 id="Sibelius-7-Sounds-Optional"><a href="#Sibelius-7-Sounds-Optional" class="headerlink" title="Sibelius 7 Sounds (Optional)"></a>Sibelius 7 Sounds (Optional)</h2><p>By default, Sibelius comes with MIDI output to play the music. If you don’t mind, that’s OK. But if you do want to enjoy your music, additional sounds may be required. Also, here is the download link for the sounds library.</p><ul><li><a href="http://cdn.avid.com/Sibelius/Sibelius_Sounds/7.5.0/Sibelius_Sounds_7.5.0_Win.zip">Sibelius Sounds 7.5.0 (Windows)</a></li></ul><div class="note warning flat"><p>Be warned, the sounds library is huge. You will get a roughly 23GB archive containing 34GB data!</p></div><p>You can refer to the official guide <a href="https://kb.avid.com/pkb/articles/en_US/how_to/How-to-install-Sibelius-Sounds-Windows">How to install Sibelius Sounds - Windows</a> to install the sounds. However, if the installer doesn’t work, you may need manual installation.</p><h3 id="Manual-Installation-of-Sibelius-Sounds"><a href="#Manual-Installation-of-Sibelius-Sounds" class="headerlink" title="Manual Installation of Sibelius Sounds"></a>Manual Installation of Sibelius Sounds</h3><p>If you are unable to launch the <code>Sibelius7SoundsInstaller.exe</code>, you may need to install it manually. After extraction, you will see two folders and a broken shortcut. Since the installer fails, you may ignore the <code>Installer/</code> folder.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250902153723951.png" alt="image-20250902153723951" style="zoom:50%;"><p>Go to <code>InstallerData/</code> folder, select all archives and extract them to any empty folder you like. Here, my destination folder is <code>C:\Apps\Sibelius\Sibelius 7 Sounds\</code>.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250902154929918.png" alt="image-20250902154929918" style="zoom:50%;"><p>By the way, the default installation location is <code>C:\Program Files (x86)\Avid\Sibelius Sounds\Sibelius 7 Sounds\</code>. But if you want to extract there, you need to run the extraction tool with administrator privileges.</p><div class="note warning flat"><p>I have my specific file organization preference which is most likely not yours. So be careful when choosing the destination folder.</p></div><p>Depending on your computer’s performance, the extraction process may take quite long. So be patient. When it completes, your destination folder will look like this.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250902154242463.png" alt="image-20250902154242463" style="zoom:50%;"><p>Each folder contains some <code>.patch</code> files and a <code>Samples/</code> folder, which contains some more <code>.big</code> files.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250902154449515.png" alt="image-20250902154449515" style="zoom:50%;"><div class="note pink icon-padding flat"><i class="note-icon fas fa-bell"></i><p>Interestingly, we are seeing <code>.big</code> files here. Does it ring a <a href="https://lord-turmoil.github.io/posts/Extract-CnC3-Unit-Voices/">bell</a>?</p></div><p>Then, you need to register this path to the registry so that Sibelius knows you have a sounds library. Create a key named <code>Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Avid\Sibelius Sounds\Sibelius 7 Sounds\ContentPath</code> and set its default value to your installation path.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250902171652292.png" alt="image-20250902171652292" style="zoom:50%;"><p>Finally, open Sibelius, and you can see there are four more options for the play configuration. Enjoy!🎉</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250902171928059.png" alt="image-20250902171928059" style="zoom:50%;"><blockquote><p>I once thought that the sounds installer will do some fancy stuffs as you can see a bunch of files under <code>Installer\</code>. But all it does is simple extraction and an update in registry… Well, I know it also does checksum verification, but I still think the installer can be much more simpler.</p></blockquote><hr><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><p>If you are a professional, then you can leave now. For amateurs like me, I have some tips for you to get familiar with music writing in Avid Sibelius.</p><h2 id="Creating-a-new-score"><a href="#Creating-a-new-score" class="headerlink" title="Creating a new score"></a>Creating a new score</h2><p>Sibelius provides many templates from which you can choose. For example, you may choose “Concert Band”.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903113503553.png" alt="image-20250903113503553" style="zoom:50%;"><p>Then, you are offered some configurations for your score. You can also change them after creation. I assume that you know basic music staffs, so I won’t introduce them. The only thing I would leave a comment is “House style”, which is the look of your score.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903113717098.png" alt="image-20250903113717098" style="zoom:50%;"><div class="note danger flat"><p>If you have a large number of instruments, then be careful. Sibelius may crash if your instrument won’t fit into one page. A solution is adding your instruments later.</p></div><h2 id="Basic-input"><a href="#Basic-input" class="headerlink" title="Basic input"></a>Basic input</h2><div class="note info flat"><p>Since I do not have MIDI input, so I will only talk about how to accelerate your writing with your computer’s keyboard.</p></div><h3 id="Keypad"><a href="#Keypad" class="headerlink" title="Keypad"></a>Keypad</h3><p>Before you input notes, you need to get familiar with the keypad. By default, you will see it at the bottom-right corner. It indicates your next input or current selection.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903114314237.png" alt="image-20250903114314237" style="zoom:50%;"><p>Of course, the direct way to select these is using your mouse. Or, if you have full keyboard (keyboard with numpad), you can use shortcuts. For example, you can select quarter note by pressing numpad 4, and select rhythm dot with numpad dot. When you press numpad 0, you will insert a rest with the length of the selected note.</p><p>The “1”, “2”, “3”, “4” and “All” below is the voice. Their short cuts are <code>Alt + number</code>, e.g. <code>Alt + 1</code> for voice 1.  If you have multiple instruments in one staff, you can use different voices for them. I’ll show it in the next section.</p><p>To iterate over the tabs on the top, you can use numpad <code>+</code>. And <code>Shift + +</code> will reset to the note tab.</p><p>If you happen to close the keypad panel, you can find it under “View &gt; Panels”.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903114531520.png" alt="image-20250903114531520" style="zoom:50%;"><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>To input notes, first you need to select a measure. Then press <code>N</code> to toggle input and view mode. When in input mode, you will see a vertical bar with color. Here the blue means voice 1, or All voices.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903115106953.png" alt="image-20250903115106953" style="zoom:50%;"><p>If you hover your pointer over the sheet, you can see a shadow of the note. But input with mouse is rather slow. So I recommend you using the keys <code>C</code> <code>D</code> <code>E</code> <code>F</code> <code>G</code> <code>A</code> <code>B</code> to input the notes. You can use your right hand on the numpad to control the note to input, then use your left hand on the keyboard pressing <code>C</code> to <code>B</code>. Luckily, these keys are close to each other.</p><p>The last input note will be highlighted, i.e. selected, which means you can still adjust it. If you mistype the pitch, you can use up and down arrow keys to move it up or down. Or simply hit <code>Ctrl + Z</code> to undo the input, or press backspace to delete it.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903115712594.png" alt="image-20250903115712594" style="zoom:50%;"><p>Sibelius will infer the pitch of the next note, but it is not always correct. In this case, you can use <code>Ctrl + Up</code> or <code>Ctrl + Down</code> to move the note one octave up or down.</p><h3 id="Triplets"><a href="#Triplets" class="headerlink" title="Triplets"></a>Triplets</h3><p>If you want to input triplets, you need to input the first note in the triplet, then select how many notes there are. A short cut for this is <code>Ctrl + number</code>, e.g. <code>Ctrl + 3</code> for triplets.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903120451806.png" alt="image-20250903120451806" style="zoom:50%;"><h3 id="Voices"><a href="#Voices" class="headerlink" title="Voices"></a>Voices</h3><p>When the instrument in the same staff plays different notes, you can use voices to differentiate them. Change the voice in the Keypad will also change the color of the notes. One voice will not overwrite the other.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903120910896.png" alt="image-20250903120910896" style="zoom:50%;"><p>Finally, if you don’t want this look, you can merge them by selection the measures, and click “All” in the Keypad.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903121147934.png" alt="image-20250903121147934" style="zoom:50%;"><p>However, if the notes only differ in pitch, you can input them without switching voices by holding the Shift key. To do this, you can first input the note with lower pitch, then input the higher one with Shift key held.</p><h2 id="Notations"><a href="#Notations" class="headerlink" title="Notations"></a>Notations</h2><p>Notations are more straightforward, you can change key signature, time signature or barline under “Notation” section. One thing I want to mention is that, if you want to change the key signature for only one staff, you need to select “More Options” in the drop box, and check “One staff only”.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903121825484.png" alt="image-20250903121825484" style="zoom:50%;"><h2 id="Texts"><a href="#Texts" class="headerlink" title="Texts"></a>Texts</h2><p>Usually, texts are only markups for the reader. However, certain texts are recognized by Sibelius. The most common one is “Tempo” text. I think Sibelius will just parse the speed from the text. To input notes, you need to switch to music text. I only know <code>Q</code> stands for quarter note.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903122057105.png" alt="image-20250903122057105" style="zoom:50%;"><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><p>In this part, I’d like to show you some input tricks, which helps to make better details for your score.</p><h3 id="Beam"><a href="#Beam" class="headerlink" title="Beam"></a>Beam</h3><p>By default, Sibelius has its own rule grouping notes. However, it would be better if we group the notes based on the rhythm. For example, if we want 3-3-2 instead of 4-4, we can change the beam. Here, we can see the beam of the second C is to left. To make 3-3-2, we can change it to right. The same applies to the third C.</p><div style="text-align: center"><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903122653007.png" alt="image-20250903122653007" style="zoom:50%;"><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250903122753851.png" alt="image-20250903122753851" style="zoom:50%;"></div><h3 id="Slur"><a href="#Slur" class="headerlink" title="Slur"></a>Slur</h3><p>Slur is common but not that convenient to input at the same time you input notes. However, you can do it after you input all notes.</p><p>There are two ways to input a slur. First, you can select the first note and the last note, then apply “Slur” from “Notation &gt; Lines”. Second, select the first note, then press <code>S</code>, which will insert a slur to the next note. Then you can press <code>Space</code> to extend the slur or <code>Shift + Space</code> to shrink.</p><h3 id="Appoggiatura-Acciaccatura"><a href="#Appoggiatura-Acciaccatura" class="headerlink" title="Appoggiatura &amp; Acciaccatura"></a>Appoggiatura &amp; Acciaccatura</h3><p>It’s a little tricky to input appoggiatura and acciaccatura. First, you need to input the main note, then select it. Then, go to the second tab to select appoggiatura (<code>/</code>) or acciaccatura (<code>*</code>).</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250906125917026.png" alt="image-20250906125917026" style="zoom:50%;"><p>Then the note you typed will be appoggiatura or acciaccatura against the note you select. And you can add slur as we talked just now.</p><h3 id="Flipping-notes"><a href="#Flipping-notes" class="headerlink" title="Flipping notes"></a>Flipping notes</h3><p>Sometimes, you may want to flip the note head to the other side. You can do this by selecting the note and pressing <code>X</code>.</p><h3 id="Adjust-Sounds"><a href="#Adjust-Sounds" class="headerlink" title="Adjust Sounds"></a>Adjust Sounds</h3><div class="note info flat"><p>I think there is no one mentioning this on the Internet by the time of this post.</p></div><p>In reality, when a bass instrument plays with treble clef, it plays at its own pitch, which is low. However, in Sebelius, the default pitch is unified to a much higher level, although you can input notes in transposed score. But it is not convenient as transposing will also change the key signature for non C instruments.</p><p>So, one solution is to adjust the sounds for non-transposing score. You can do this by edit the instrument, and changing the sounds for middle C. Take baritone saxophone as an example. By default, the middle C sounds as C4, which is too high. The correct sound should be C2.</p><img src="/posts/Music-Notation-with-Avid-Sibelius/image-20250915192921178.png" alt="image-20250915192921178" style="zoom:50%;"><h3 id="To-be-continued…"><a href="#To-be-continued…" class="headerlink" title="To be continued…"></a>To be continued…</h3><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Avid Sibelius is truly professional, and there are still much to learn. Enjoy your music journey! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Design &amp; Multimedia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sibelius </tag>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started With Coq</title>
      <link href="/posts/Getting-Started-with-Coq/"/>
      <url>/posts/Getting-Started-with-Coq/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;For all these years, I've faced the world alone.</i><br>    <i>And now the time has come,</i><br>    <i>To prove to them I've made it on my own!&rdquo;</i></p><p style="text-align: right"><i>&mdash; This Is The Moment (Jekyll &amp; Hyde)</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Why Coq? It seems to be a topic off track based on what this blog has right now. Well, This post actually kicks off a new category, where I will put stuffs I find interesting during my academic career. Coq is the first topic I came across, and also the first formal method that I put a hand on.</p><hr><h1 id="Setting-up-Coq"><a href="#Setting-up-Coq" class="headerlink" title="Setting up Coq"></a>Setting up Coq</h1><h2 id="What-is-Coq"><a href="#What-is-Coq" class="headerlink" title="What is Coq?"></a>What is Coq?</h2><p>Coq, pronounced as &#x2F;kɒk&#x2F;, is a tool for you to write formal proofs that can be automatically verified. It use formal language and tactics to prove something so that the proof is considered true once it is done with Coq. One feature is that you can write proofs with Coq interactively, which is more convenient and reliable than doing it on paper.</p><div class="note success flat"><p>Fun fact, as Coq is originally designed by French, its symbol is a rooster &mdash; French national symbol. Also, the pronunciation is the same as cock, another name for rooster.</p></div><h2 id="What-is-Rocq"><a href="#What-is-Rocq" class="headerlink" title="What is Rocq"></a>What is Rocq</h2><p>&ldquo;The Rocq Prover implements a high-level program specification and mathematical language called Gallina that is based on an expressive formal language called the Polymorphic, Cumulative Calculus of Inductive Constructions that itself combines both a higher-order logic and a richly-typed functional programming language. &rdquo;</p><p style="text-align:right">&mdash; <a href="https://rocq-prover.org/about" target="_blank">About The Rocq Prover</a></p><p>It is formally know as Coq Proof Assistant. So, in a word, it proves us a platform to write proofs.</p><h2 id="Installing-Rocq-Prover"><a href="#Installing-Rocq-Prover" class="headerlink" title="Installing Rocq Prover"></a>Installing Rocq Prover</h2><p>Installing Rocq is quite easy, as it provides installer on all platforms, see <a href="https://rocq-prover.org/install">Install the Rocq Prover</a>.</p><div class="note warning flat"><p>The default installation location is directly under <code>C:\</code>, change it based on your preference. Although known as Rocq Platform now, the installation folder is still identified as Coq Platform.</p></div><p>After installation, you will have CoqIDE available. I will talk about how to write proof later.</p><img src="/posts/Getting-Started-with-Coq/image-20250807103107580.png" alt="image-20250807103107580" style="zoom: 50%;"><h2 id="Installing-VSCode-Extension-for-Rocq"><a href="#Installing-VSCode-Extension-for-Rocq" class="headerlink" title="Installing VSCode Extension for Rocq"></a>Installing VSCode Extension for Rocq</h2><p>Similar to the fate of IDLE (Python IDE), CoqIDE is eclipsed by <a href="https://code.visualstudio.com/">Visual Studio Code</a>. So we can setup our workspace with VSCode instead.</p><p>To do this, we need to install the VSCode extension <a href="https://marketplace.visualstudio.com/items?itemName=maximedenes.vscoq">VsCoq</a>.</p><img src="/posts/Getting-Started-with-Coq/image-20250807110703393.png" alt="image-20250807110703393" style="zoom: 50%;"><p>Then, we need to setup the language server for Coq.</p><div class="note info flat"><p>Starting from version 2025.01, which is the latest version at the time of writing this post, the Rocq Platform already includes the language server for VSCode, so you don’t need to install another one unless you want the alternative <a href="https://github.com/ejgallego/coq-lsp">Coq LSP</a>.</p></div><p>Open the settings tab for VsCoq and fill in the path to <code>vscoqtop</code>. It is located under the installation path of Rocq Platform.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Path\to\Coq-Platform\bin\vscoqtop.exe</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>There is both <code>coqtop.exe</code> and <code>vscoqtop.exe</code> under <code>bin\</code>, and only <code>vscoqtop.exe</code> works in VSCode. Also, you may need to restart VSCode to apply the change.</p></div><p>After setting up language server, you can write proofs in VSCode.😆</p><img src="/posts/Getting-Started-with-Coq/image-20250807112009755.png" alt="image-20250807112009755" style="zoom: 50%;"><hr><h1 id="Writing-Proofs"><a href="#Writing-Proofs" class="headerlink" title="Writing Proofs"></a>Writing Proofs</h1><p>Now that we have the environment, how to actually write proofs? Unfortunately, I’m not good at mathematics and proofing, so I can only give a preliminary view of this.</p><p>Here are some useful links for you to explore.</p><ul><li><a href="https://rocq-prover.org/refman">Rocq Reference Manual</a></li><li><a href="http://flint.cs.yale.edu/cs430/sectionNotes/section1/CoqTutorial.pdf">Theorem proving with Coq</a></li><li><a href="https://ilyasergey.net/pnp/pnp.pdf">Programs and Proofs &mdash; Mechanizing Mathematics with Dependent Types</a></li></ul><h2 id="Proof-in-Action"><a href="#Proof-in-Action" class="headerlink" title="Proof in Action"></a>Proof in Action</h2><p>Still, I think some explanation is needed.</p><h3 id="The-1-1-Problem"><a href="#The-1-1-Problem" class="headerlink" title="The 1 + 1 Problem"></a>The 1 + 1 Problem</h3><p>First, let’s have a look on the proof shown before, the 1 + 1 problem.</p><p>To write proofs, we need to enter proof mode. This can be done with <code>Goal</code> or <a href="https://rocq-prover.org/doc/V9.0.0/refman/language/core/definitions.html#assertions-and-proofs">theorem tokens</a> like <code>Theorem</code> or <code>Lemma</code> (see <a href="https://rocq-prover.org/doc/V9.0.0/refman/proofs/writing-proofs/proof-mode.html#entering-and-exiting-proof-mode">Entering and exiting proof mode</a>). The difference is that <code>Goal</code> is anonymous and theorems need names. Click “Step Forward”, and you can see the current state of the proof.</p><img src="/posts/Getting-Started-with-Coq/image-20250807114638220.png" alt="image-20250807114638220" style="zoom:50%;"><div class="note info flat"><p>Do note that, like natural language, we add period <code>.</code> at the end of each statement.</p></div><p>Then, we can start proofing with <code>Proof</code>. First, we use <code>simpl</code> to simplify the current goal with basic <em>tactics</em>. Here, it calculate the result of <code>1 + 1</code>.</p><img src="/posts/Getting-Started-with-Coq/image-20250807121522349.png" alt="image-20250807121522349" style="zoom:50%;"><div class="note info flat"><p>In Coq, the steps we use to write proof is called tactics, e.g. <code>simpl</code> and <code>reflexivity</code>.</p></div><p>The goal is quite straightforward now, as <code>2</code> is equal to <code>2</code> without a doubt, so we can use <code>reflexivity</code> to prove it. After this, all goals are proved.</p><img src="/posts/Getting-Started-with-Coq/image-20250807121732529.png" alt="image-20250807121732529" style="zoom:50%;"><p>Then, we can end this proof by <code>Qed</code>. The message means that our “theorem” is proved and defined for other theorems to use.</p><img src="/posts/Getting-Started-with-Coq/image-20250807121756122.png" alt="image-20250807121756122" style="zoom:50%;"><h3 id="Hilbert’s-S-Axiom"><a href="#Hilbert’s-S-Axiom" class="headerlink" title="Hilbert’s S Axiom"></a>Hilbert’s S Axiom</h3><p>Then, let’s move on to a more complex demo, the Hilbert’s S Axiom. It says, if you have a way to get from P to Q, where Q implies R (if you have Q, then you have R), and you also have a way to get from P to Q, then given P, you can derive R.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(P -&gt; (Q -&gt; R)) -&gt; ((P -&gt; Q) -&gt; (P -&gt; R))</span><br><span class="line">simiplified as:</span><br><span class="line">(P -&gt; Q -&gt; R) -&gt; (P -&gt; Q) -&gt; P -&gt; R</span><br></pre></td></tr></table></figure><p>A little obscure if you lack basic knowledge of logics. <code>P</code>, <code>Q</code> and <code>R</code> are predicates, so they are either true or false. The logic statement does not have to be a tautology (always true), but it must be true under certain condition. For example, <strong>the statement <code>P -&gt; Q</code> is true if “when <code>P</code> is true, <code>Q</code> is also true”</strong>. So to prove <code>P -&gt; Q</code>, you just need to prove that when <code>P</code> is true, <code>Q</code> is also <code>ture</code>.</p><div class="note success flat"><p>You can also think it in another way. For <code>P -&gt; Q</code>, <code>P</code> is the sufficient condition for <code>Q</code>, and <code>Q</code> is the necessary condition for <code>P</code>. Propositions are true, and we just want to prove their relation.</p></div><p>With this basic understanding, let’s move on to Hilbert’s S Axiom. Here is how we write it in Coq. In order to define variables, which are propositions here, we need to scope them in a section. Then, different from <code>Goal</code>, we need to explicitly set the name of <code>Theorem</code>.</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Section</span> Hilbert_Axiom_S.</span><br><span class="line"><span class="keyword">Variable</span> P Q R : <span class="keyword">Prop</span>.</span><br><span class="line"><span class="keyword">Theorem</span> hilbert_axiom_s : (P -&gt; (Q -&gt; R)) -&gt; ((P -&gt; Q) -&gt; (P -&gt; R)).</span><br><span class="line"><span class="keyword">Proof</span>.</span><br><span class="line">    <span class="built_in">intros</span> H1 H2 H3.</span><br><span class="line">    <span class="built_in">apply</span> H1.</span><br><span class="line">    <span class="built_in">exact</span> H3.</span><br><span class="line">    <span class="built_in">exact</span> (H2 H3).</span><br><span class="line"><span class="keyword">Qed</span>.</span><br><span class="line"><span class="keyword">End</span> Hilbert_Axiom_S.</span><br></pre></td></tr></table></figure><p>Then, let’s break it down step by step.</p><p><strong>Step 1.</strong></p><p>First, we start the section and define our propositions. Since we’re not proving a tautology, we shouldn’t use <code>forall</code>. Here, Coq automatically simplified the statement for us.</p><img src="/posts/Getting-Started-with-Coq/image-20250808111203411.png" alt="image-20250808111203411" style="zoom:50%;"><p><strong>Step 2.</strong></p><p>Then, we introduce our hypothesis. So our goal is to prove that, <strong>when <code>H1</code>, <code>H2</code> and <code>H3</code> are true, then <code>R</code> is true</strong>. So with these three hypothesis, our goal is to prove that <code>R</code> is true.</p><img src="/posts/Getting-Started-with-Coq/image-20250808114441777.png" alt="image-20250808114441777" style="zoom:50%;"><div class="note info flat"><p>When we make hypothesis, we assume that they are true, and have to prove those which is not a single proposition.</p></div><p><strong>Step 3.</strong></p><p>Following, we can use the first hypothesis <code>H1</code> using <code>apply</code>. By <code>apply H1</code>, we assume that <code>H1</code> is true, which means when we have <code>P</code> and <code>Q</code>, we can have <code>R</code>. But, we have to prove it then. Since our current goal is <code>R</code>, which is to be true, so our new goal changes to prove both <code>P</code> and <code>Q</code>.</p><img src="/posts/Getting-Started-with-Coq/image-20250808114731300.png" alt="image-20250808114731300" style="zoom:50%;"><p><strong>Step 4.</strong></p><p>Now, we find that hypothesis <code>H3</code> matches our first goal, so we can use <code>exact</code> to prove it directly.</p><img src="/posts/Getting-Started-with-Coq/image-20250808120559132.png" alt="image-20250808120559132" style="zoom:50%;"><div class="note info flat"><p>As I mentioned before, when we make hypothesis, they are true.</p></div><p><strong>Step 5.</strong></p><p>Then, a little tricky, we can prove <code>Q</code> by providing both <code>H2</code> and <code>H3</code>. It means when we have <code>H3</code>, then <code>H2</code> can derive <code>Q</code>.</p><img src="/posts/Getting-Started-with-Coq/image-20250808120801433.png" alt="image-20250808120801433" style="zoom:50%;"><div class="note warning flat"><p>Do note the order of <code>H2</code> and <code>H3</code> here.</p></div><p><strong>Step 5 Alt.</strong></p><p>Actually, we can also prove it using the same tactic in Step 3 by applying <code>H2</code> first.</p><img src="/posts/Getting-Started-with-Coq/image-20250808121857217.png" alt="image-20250808121857217" style="zoom:50%;"><p><strong>Step 6.</strong></p><p>Finally, we can conclude our proof.</p><img src="/posts/Getting-Started-with-Coq/image-20250808121950793.png" alt="image-20250808121950793" style="zoom:50%;"><p>One example can be enlightening, which is given by GPT. If we have:</p><ul><li><code>P</code>: “It’s raining”</li><li><code>Q</code>: “The ground gets wet”</li><li><code>R</code>: “Traffic will be slow”</li></ul><p>Because we want to get <code>R</code>, so the Hilbert’s S Axiom has:</p><ul><li>If it’s raining, then (if the ground gets wet, traffic will be slow)</li><li>If it’s raining, then the ground gets wet</li></ul><p>So if we have “It is raining”, we can get “Traffic will be slow”.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Quite interesting, we can actually prove things in a programming way. However, I’m not good at logic, so if there is any mistakes or unclear statements, leave a comment below. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coq </tag>
            
            <tag> Verification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Game Engine 0 to 1 (02): Something on the Screen</title>
      <link href="/posts/Game-Engine-0-to-1-02-Something-on-the-Screen/"/>
      <url>/posts/Game-Engine-0-to-1-02-Something-on-the-Screen/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center; font-size: x-large"><b>[02] Something on the Screen</b></p><p style="text-align: center">    <i>&ldquo;Got this love, I can feel,</i><br>    <i>And I know, yes for sure, it is real.</i><br>    <i>And it feels as though I've seen your face a thousand times...&rdquo;</i></p><p style="text-align: right"><i>&mdash; Michael Jackson (This is it)</i></p><div class="note primary flat"><p>你可以在 <a href="/tags/Game-Engine-0-to-1/">Game Engine 0 to 1</a> 标签下浏览该系列的所有文章。</p></div><div class="note success flat"><p>DungineX 完全开源，代码托管在 <a href="https://github.com/Lord-Turmoil/DungineX">GitHub</a>，本章对应<a href="https://github.com/Lord-Turmoil/DungineX/tree/0.1.1">🏷️0.1.1</a>。</p></div><p>在本章中，主要介绍 DungineX 中图形设备的设计与实现，从如何创建窗口到实现各种绘制功能。不过，作为一个从零开始的项目，还有很多基础组件有待实现，例如日志、工具方法等，因此也会对这些主题进行穿插介绍。</p><div class="note warning flat"><p>由于一些别扭的翻译原因，Texture 可以翻译为纹理，也指图片。所以在本文中提到纹理和图片均指 Texture。</p></div><hr><h1 id="设备抽象"><a href="#设备抽象" class="headerlink" title="设备抽象"></a>设备抽象</h1><p>首先，我想有必要回顾一下设备（Device）的概念。</p><p>什么是设备？我们都知道，根据冯·诺依曼架构，计算机分为控制器、运算器、存储、输入和输出五个部分，而设备主要就指的是其中的输入和输出。对于游戏，通常的输出设备就是屏幕和扬声器，而输入设备就是鼠标和键盘。游戏需要能够显示画面，播放声音，接收玩家的操作，因此设备接口对于游戏编写十分重要。</p><h2 id="为什么需要设备抽象？"><a href="#为什么需要设备抽象？" class="headerlink" title="为什么需要设备抽象？"></a>为什么需要设备抽象？</h2><p>这个问题的答案非常显然，当然是为了方便使用。设备通常与硬件相关，而不同的硬件设备有不同的接口，由用户直接调用这些接口十分不便。这里有一张图非常生动形象，虽然是用来描述操作系统的，但是在这里同样合适。设备抽象要做的，就是屏蔽底层硬件细节，为用户提供统一、易用的接口。</p><img src="/posts/Game-Engine-0-to-1-02-Something-on-the-Screen/image-20250625231138135.png" alt="image-20250625231138135" style="zoom: 50%;"><p>虽然现有的一些库，比如 <a href="https://www.libsdl.org/">SDL3</a>、<a href="https://www.fmod.com/">FMOD</a> 等已经提供了必要的抽象，从而可以相对简单的实现对应功能， 但是这些接口毕竟不是我们自己实现的，如果不进行抽象，则很难与我们的项目整合在一起。此外，这些接口的设计往往考虑到通用性，因此在游戏开发场景下可能还需进一步的封装。</p><p>具体地，设备抽象能够在以下两点为我们提供便利：</p><ul><li><strong>屏蔽底层细节</strong>。底层的组件往往考虑到通用性，相对晦涩复杂，因此在设备抽象中，可以根据具体的使用场景提供简化的 API。</li><li><strong>提高灵活性。</strong>部分情况下，同一个服务可以有不同的实现，比如对于音频设备，我们可以使用 SDL3，也可以使用 FMOD，甚至可以禁用音频设备。有了设备抽象的存在，用户将使用统一的接口访问底层的设备支持，而不用关注具体的实现。这是否让你想到了 <a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection</a>？</li><li><strong>方便模块间通信。</strong>这个就很容易理解了，根据我们自定义的抽象，可以更方便地实现各个组件的相互调用。</li></ul><h2 id="图形设备抽象"><a href="#图形设备抽象" class="headerlink" title="图形设备抽象"></a>图形设备抽象</h2><p>当然，这次的主题还是图形设备。对于图形设备，其主要负责窗口的管理，以及图形绘制。</p><div class="note info flat"><p>为什么窗口会和绘制耦合在一起，原因在于，由于绘制缓冲区的存在，绘制指令往往依赖于图形上下文，而这一上下文通常绑定在一个窗口实例上。例如，在 SDL 中，渲染器（Renderer）依赖于当前窗口。</p></div><p>对于图形绘制，可以进一步分为三类对象的绘制，或者说渲染（Render）。</p><ul><li>原生（Primitive）图形，也就是像素点、线，矩形等。</li><li>纹理（Texture），其实也就是绘制图片，因此这里也会涉及图片的加载。</li><li>文本（Text），这个比较特别，相对更加 tricky，之后会具体介绍。</li></ul><p>提供这些接口的抽象后，用户就可以实现最基础绘制，在屏幕上显示有趣的图像了。</p><hr><h1 id="Infrastructure"><a href="#Infrastructure" class="headerlink" title="Infrastructure"></a>Infrastructure</h1><p>不过，在我们开始实现图形设备接口之前，还需要一些准备工作。对于一个较大规模的项目来说，通常需要一些“基础设施”的支持，比如 C&#x2F;C++ 很喜欢的类型别名，日志输出等。</p><h2 id="类型别名（Type-Alias）"><a href="#类型别名（Type-Alias）" class="headerlink" title="类型别名（Type Alias）"></a>类型别名（Type Alias）</h2><p>可能是 C&#x2F;C++ 支持这一特性的缘故吧，几乎所有项目都会有这一操作，一方面是为了可移植性，另一方面也是一种偷懒的方式吧。这也是我喜欢 C，尤其是 C++ 的原因之一，因为其提供了其他语言无法媲美的灵活性。</p><p>内存漏洞是 C++ 常常被诟病的问题，然而，现代的 C++ 已经有很完善的机制避免相关问题了，也就是智能指针 <code>std::shared_ptr</code>。通过将代码中的裸指针替换为智能指针，便能很大程度上避免，甚至消除内存相关问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">using</span> Ref = std::shared_ptr&lt;T&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">constexpr</span> Ref&lt;T&gt; <span class="title">CreateRef</span><span class="params">(Args&amp;&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_shared</span>&lt;T&gt;(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>这一类型定义方法来自 <a href="https://github.com/TheCherno">The Cherno</a> 的 <a href="https://github.com/TheCherno/Hazel">Hazel</a>。</p></div><p>除了智能指针封装外，目前还没有遇到其他特别的类型，具体可以参考 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Utils/Types.h">Utils\Types.h</a>。当然，我们可以为基本类型定义别名，比如 <code>uint32</code> 等，但其实头文件 <code>cstdint</code> 已经提供了相关定义了。</p><h2 id="日志输出（Logging）"><a href="#日志输出（Logging）" class="headerlink" title="日志输出（Logging）"></a>日志输出（Logging）</h2><p>尽管是自己亲手编写的程序，你是否时常会苦恼于难以定位错误，或是追踪程序的执行状态？对于这一问题，为程序添加日志输出是一个非常好的解决方案。在 DungineX 中，我们选择 <a href="https://github.com/gabime/spdlog">spdlog</a> 作为日志库，一方面是因为其灵活性与高性能，另一方面是因为我对它相对更加熟悉。</p><p>本节中，我简单介绍 DungineX 中的日志系统，具体的日志系统声明可参考 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Utils/Log.h">Utils&#x2F;Log.h</a> 和 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/src/Utils/Log.cpp">Utils&#x2F;Log.cpp</a>。</p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>日志输出通常有以下几个配置选项：</p><ul><li>名称（Name），最好可以通过名称区分不同组件的日志。</li><li>等级（Level），用来区分不同重要程度的日志消息。</li><li>目标（Sink），日志输出到哪里，控制台还是文件，还是多个目标。</li><li>格式（Format），具体的日志消息是什么样子的。</li></ul><p>因此，我们的日志配置如下，即 <code>LoggerSpecification</code>。注意到这里使用 <code>std::initializer_list</code> 来避免显式传入 <code>std::vector</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LoggerSinkSpecification</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Path;</span><br><span class="line">    std::string Pattern;</span><br><span class="line">    </span><br><span class="line">    <span class="function">DGEX_API <span class="title">LoggerSinkSpecification</span><span class="params">(std::string path)</span></span>;</span><br><span class="line">    <span class="function">DGEX_API <span class="title">LoggerSinkSpecification</span><span class="params">(std::string path, std::string pattern)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoggerSpecification</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Name;</span><br><span class="line">    LogLevel Level;</span><br><span class="line">    std::vector&lt;LoggerSinkSpecification&gt; Sinks;</span><br><span class="line">    </span><br><span class="line">    <span class="function">DGEX_API <span class="title">LoggerSpecification</span><span class="params">(std::string name, LogLevel level, </span></span></span><br><span class="line"><span class="params"><span class="function">                                 std::initializer_list&lt;LoggerSinkSpecification&gt; sinks)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>或许你看到这里大写的成员名称有些惊讶，这一风格来自我编写 C# 代码的经验，来标识 public 成员。</p></div><h3 id="哪里需要-DGEX-API？"><a href="#哪里需要-DGEX-API？" class="headerlink" title="哪里需要 DGEX_API？"></a>哪里需要 <code>DGEX_API</code>？</h3><p>虽然有些突兀，但是我们在这里第一次遇到这一问题。在 <code>LoggerSpecification</code> 中，我们只给构造函数添加了 <code>DGEX_API</code>，即 <code>__declspec(dllexport)</code>，那为什么不给成员变量也添加呢，或是更激进一些，直接为整个结构体添加这一属性呢？</p><div class="note info flat"><p>你可以自行尝试给整个结构体添加 <code>DGEX_API</code>，看看会发生什么。</p></div><p>这里的原因在于，<code>__declspec(dllexport)</code> 类似于 DLL 编写者与使用者之前的一个“约定”，即被标记的声明应当保持兼容，也就是说，即使更新了 DLL，客户端仍然能够以相同的方式调用被标记的“东西”。</p><p>那么问题就来了，对于函数，本质就是一个固定大小的地址，那么我们只要保证提供这个地址就可以。而对于成员变量，就不只是地址了，还有大小。成员大小取决于类型， 因此为了遵守“约定”，对应的类型也需要被标记，于是你会遇到 <code>__declspec(dllexport)</code> 传播的问题。对于自定义的类型，比如 <code>LogLevel</code>，可以直接标记，而对于像 <code>std::string</code> 这样的标准库类型，由于其并不提供 DLL 导出，所以我们也没办法实现导出。不过，由于成员最终会变成地址偏移量，而头文件是提供给客户端的，因此用户可以获得相应的类型的声明，只要偏移量和大小一致，便能正确实现运行时的访问。</p><p>因此，我们只需要标记需要导出的函数即可。当然，不一定所有函数都需要导出，因此可以有选择地隐藏部分接口。不过，如果用户选择静态链接，那么其实还是可以使用所有接口，最根本的隐藏接口的方法还是将其放在私有头文件目录下，但是会相对麻烦些。</p><div class="note warning flat"><p>目前，我们认为只有 DLL 暴露的接口为公开接口。</p></div><h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p>接下来，是日志系统。恰当的日志能够让我们高效地排查程序中的问题，并且观测程序的执行状态。DungineX 中的 Logger 声明如下。我们刚刚说过，通常不应该，也不能导出整个结构体或类，而是导出其中对外暴露的方法，所以这里只导出对应的日志输出方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Logger</span>(<span class="type">const</span> LoggerSpecification&amp; specification);</span><br><span class="line">    ~<span class="built_in">Logger</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt; <span class="function">DGEX_API <span class="type">void</span> <span class="title">Debug</span><span class="params">(spdlog::<span class="type">format_string_t</span>&lt;Args...&gt; fmt, Args&amp;&amp;... args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _impl-&gt;<span class="built_in">debug</span>(fmt, std::forward&lt;Args&gt;(args)...);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string _name;</span><br><span class="line">    Ref&lt;spdlog::logger&gt; _impl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>从 Logger 中，已经可以看到些许 <a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization">RAII</a> 的影子了，即在构造函数中完成资源的初始化。</p></div><p>我们不希望用户随便创建 Logger，所以没有用 <code>DGEX_API</code> 标记构造和析构函数，而是将 Logger 的注册和获取放在了静态类 <code>Log</code> 中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Log</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">DGEX_API <span class="type">static</span> Ref&lt;Logger&gt; <span class="title">GetLogger</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span></span>;</span><br><span class="line">    <span class="function">DGEX_API <span class="type">static</span> Ref&lt;Logger&gt; <span class="title">RegisterLogger</span><span class="params">(<span class="type">const</span> LoggerSpecification&amp; specification)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Log</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="type">static</span> std::unordered_map&lt;std::string, Ref&lt;Logger&gt;&gt; _sLoggers;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，我们可以用宏实现简化的日志输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _DGEX_LOGGER(NAME) DGEX Log::GetLogger(NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_LOG_DEBUG(NAME, ...) _DGEX_LOGGER(NAME)-&gt;Debug(__VA_ARGS__)</span></span><br></pre></td></tr></table></figure><h2 id="Assertion"><a href="#Assertion" class="headerlink" title="Assertion"></a>Assertion</h2><p>对于 C&#x2F;C++ 这样没有运行时检查的语言来说，有时需要我们手动进行一些边界或条件检查。标准库提供的 <code>assert</code> 功能过于简单，我们尤其希望能够将 assert 的结果输出到日志，因此我们的 assert 可以和日志系统相结合。具体的 assert 实现见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Utils/Assert.h">Utils&#x2F;Assert.h</a>。</p><hr><h1 id="Pit-Fall"><a href="#Pit-Fall" class="headerlink" title="Pit Fall"></a>Pit Fall</h1><p>有了基础设施之后，我们就可以正式开始编码了。由于是第一次使用 SDL3，而且是一个比较特殊的场景（将 SDL3 打包进 DLL），遇到了一些问题，也花了很多功夫解决。在开始前，对相关问题进行说明。</p><h2 id="上下文绑定"><a href="#上下文绑定" class="headerlink" title="上下文绑定"></a>上下文绑定</h2><p>这一问题确实很奇怪，对于 DungineX，我们将 SDL3 打包进引擎，再以 DLL 的形式提供给用户，看似没什么问题，但是却会使 SDL 的上下文管理出问题。</p><p>这一问题具体表现为，如果客户端只通过 DungineX 的接口调用 SDL，那么一切正常。而一旦客户端直接调用了 SDL 中标记只能在主线程中调用的函数，那么程序就会挂起（Hang）。</p><p>按理说 DLL 和程序运行在同一线程，但是可能因为 DLL 的加载，SDL 的上下文初始化机制，以及大量使用锁进行同步，导致二者不能共享同一上下文吧，所以导致了死锁。</p><div class="note danger flat"><p>具体原因还有待进一步探究。</p></div><h2 id="Entry-Point"><a href="#Entry-Point" class="headerlink" title="Entry Point"></a>Entry Point</h2><p>刚刚提到了上下文绑定的问题，客户端不能直接调用 SDL 的函数，所以也就不能使用 SDL 提供的生命周期回调了。因此需要我们自行实现程序的入口。</p><p><a href="/posts/Game-Engine-0-to-1-01-It-Starts-Now/">上一章</a>中的入口实现还很简单，本章中进行了更新，会在之后具体介绍。</p><hr><h1 id="窗口创建"><a href="#窗口创建" class="headerlink" title="窗口创建"></a>窗口创建</h1><p>下面，我们正式开始图形设备的编写。首先，自然是创建一个窗口，具体代码见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Device/Graphics/Window.h">Device&#x2F;Graphics&#x2F;Window.h</a> 和 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/src/Device/Graphics/Window.cpp">Device\Graphics\Window.cpp</a>。</p><h2 id="窗口属性"><a href="#窗口属性" class="headerlink" title="窗口属性"></a>窗口属性</h2><p>对于一个窗口，其主要的属性很简单，无非是标题、大小以及一些选项，比如是否可缩放、是否全屏等。对此，我们可以定义如下的窗口属性。类似的，我们只将构造函数标记为 <code>DGEX_API</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> WindowFlags = <span class="type">unsigned</span> <span class="type">char</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> : <span class="type">unsigned</span> <span class="type">char</span></span><br><span class="line">&#123;</span><br><span class="line">    DgexWindowDefault            = <span class="number">0</span>,</span><br><span class="line">    DgexWindowAlwaysOnTop        = <span class="built_in">DGEX_BIT</span>(<span class="number">0</span>),    <span class="comment">// always on top</span></span><br><span class="line">    DgexWindowBorderless         = <span class="built_in">DGEX_BIT</span>(<span class="number">1</span>),    <span class="comment">// launch as borderless window</span></span><br><span class="line">    DgexWindowFullScreen         = <span class="built_in">DGEX_BIT</span>(<span class="number">2</span>),    <span class="comment">// launch in fullscreen</span></span><br><span class="line">    DgexWindowResizable          = <span class="built_in">DGEX_BIT</span>(<span class="number">3</span>),    <span class="comment">// allow window to resize</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WindowProperties</span></span><br><span class="line">&#123;</span><br><span class="line">    std::string Title;</span><br><span class="line">    <span class="type">int</span> Width;</span><br><span class="line">    <span class="type">int</span> Height;</span><br><span class="line">    WindowFlags Flags;</span><br><span class="line"></span><br><span class="line">    <span class="function">DGEX_API <span class="title">WindowProperties</span><span class="params">(std::string title, <span class="type">int</span> width, <span class="type">int</span> height, WindowFlags flags)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，窗口的创建由 DungineX 完成，那么为了使用户能够自定义窗口属性，可以提供这样一个函数，在创建窗口前，由用户提供自定义的窗口属性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">SetWindowPropertiesHint</span><span class="params">(<span class="type">const</span> WindowProperties&amp; properties)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="窗口创建-1"><a href="#窗口创建-1" class="headerlink" title="窗口创建"></a>窗口创建</h2><p>一个程序可能不止一个窗口，不过对于游戏来说，一个窗口足矣。因此，我们可以通过这种方式访问具体的窗口实例，当然这个接口不对用户暴露。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> SDL_Window* sNativeWindow = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SDL_Window* <span class="title">GetNativeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DGEX_ASSERT</span>(sNativeWindow, <span class="string">&quot;Window not initialized&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sNativeWindow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>为了实现对 SDL 接口彻底的封装，我们不应当向用户暴露任何 SDL 的函数和类型。</p></div><p>对于窗口的创建，SDL 已经封装得很好了，我们只需要将我们自定义的窗口选项转化为 SDL 支持的窗口选项，并调用 <code>SDL_CreateWindow</code> 即可。同时，这里也展示了日志的使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">dgex_error_t</span> <span class="title">InitWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SDL_Window* window = <span class="built_in">SDL_CreateWindow</span>(</span><br><span class="line">        sWindowPropertiesHint.Title.<span class="built_in">c_str</span>(),</span><br><span class="line">        sWindowPropertiesHint.Width,</span><br><span class="line">        sWindowPropertiesHint.Height,</span><br><span class="line">        <span class="built_in">GetSdlWindowFlags</span>(sWindowPropertiesHint.Flags));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!window)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DGEX_CORE_ERROR</span>(<span class="string">&quot;Failed to create window: &#123;0&#125;&quot;</span>, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">        <span class="keyword">return</span> DGEX_ERROR_WINDOW_INIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sNativeWindow = window;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> width, height;</span><br><span class="line">    <span class="built_in">SDL_GetWindowSize</span>(window, &amp;width, &amp;height);</span><br><span class="line">    <span class="built_in">DGEX_CORE_DEBUG</span>(<span class="string">&quot;Window size: &#123;0&#125;x&#123;1&#125;&quot;</span>, width, height);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SDL_ShowWindow</span>(sNativeWindow);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DGEX_CORE_DEBUG</span>(<span class="string">&quot;Window initialized&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DGEX_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>关于日志输出的格式，可以参考 <a href="https://github.com/gabime/spdlog/wiki">spdlog 的官方文档</a>。</p></div><p>现在，我们在调用 <code>InitWindow</code> 函数后，就可以得到一个窗口了。</p><div class="note info flat"><p>目前，在得到图形窗口时，控制台窗口依然存在，这是因为我们最终链接构建的是控制台应用。想要去掉控制台，可以之后切换至 Windows 窗口应用，使用 <code>WinMain</code> 代替 <code>main</code>。</p></div><hr><h1 id="绘图接口"><a href="#绘图接口" class="headerlink" title="绘图接口"></a>绘图接口</h1><p>此时，我们已经能够得到一个黑黑的窗口，接下来，就可以在其中实现图形的绘制了。对于游戏来说，我们通常需要实现以下几个绘图功能：</p><ul><li>在屏幕上绘制点、线等图形，以及图片和文字。</li><li>支持图像的缩放、旋转等效果。</li><li>在指定目标实现绘制。</li></ul><p>总结起来，你需要了解以下几点概念。</p><ul><li>绘制目标：本质是一块缓冲区，可以是屏幕，也可以是图片（纹理）。</li><li>绘图属性：比如线条颜色、文字大小等。</li><li>图像绘制：在绘图设备上实现绘制，包括原生图形，图片以及文字。</li></ul><p>这些概念看起来很简单<del>，实际一点也不复杂</del>，SDL 已经提供了相应的封装，因此我们的任务很轻松。具体的绘制接口声明见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Renderer/RenderApi.h">Renderer&#x2F;RenderApi.h</a>。</p><h2 id="创建渲染器"><a href="#创建渲染器" class="headerlink" title="创建渲染器"></a>创建渲染器</h2><p>SDL 的所有绘制操作都由 <code>SDL_Renderer</code> 完成，其绑定在当前窗口上，从而实现该窗口的绘制和渲染任务。在我们创建好窗口后，就可以初始化渲染器了。具体的渲染器初始化如下，与窗口类似，使用 <code>sNativeRenderer</code> 维护渲染器实例，便于最终释放资源。为了更好地展示 SDL 的功能，在初始化渲染器时，列出了所有可用的 Renderer Driver，可以看到 SDL 支持 <a href="https://learn.microsoft.com/en-us/windows/win32/direct3d">Direct3D</a>，<a href="https://www.opengl.org/">OpenGL</a>，<a href="https://www.vulkan.org/">Vulkan</a> 等多个渲染后端。当然，这里我们最终让 SDL 自行选择。由于按照字典序选择， 因此很可能会选择 Direct3D。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">dgex_error_t</span> <span class="title">InitRenderer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="built_in">SDL_GetNumRenderDrivers</span>();</span><br><span class="line">    <span class="built_in">DGEX_CORE_DEBUG</span>(<span class="string">&quot;Available render drivers: &#123;0&#125;&quot;</span>, count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* name = <span class="built_in">SDL_GetRenderDriver</span>(i);</span><br><span class="line">        <span class="built_in">DGEX_CORE_DEBUG</span>(<span class="string">&quot;    Render driver &#123;0&#125;: &#123;1&#125;&quot;</span>, i, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDL_Renderer* renderer = <span class="built_in">SDL_CreateRenderer</span>(<span class="built_in">GetNativeWindow</span>(), <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (!renderer)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DGEX_CORE_ERROR</span>(<span class="string">&quot;Failed to initialize renderer: &#123;0&#125;&quot;</span>, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">        <span class="keyword">return</span> DGEX_ERROR_RENDERER_INIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SDL_PropertiesID props = <span class="built_in">SDL_GetRendererProperties</span>(renderer);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name = <span class="built_in">SDL_GetStringProperty</span>(props, SDL_PROP_RENDERER_NAME_STRING, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">DGEX_CORE_DEBUG</span>(<span class="string">&quot;Using renderer: &#123;0&#125;&quot;</span>, name ? name : <span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">SDL_SetRenderVSync</span>(renderer, <span class="number">-1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DGEX_CORE_WARN</span>(<span class="string">&quot;VSync not supported: &#123;0&#125;&quot;</span>, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sNativeRenderer = renderer;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DGEX_CORE_DEBUG</span>(<span class="string">&quot;Renderer initialized&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DGEX_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>很奇怪，在我本地 SDL 始终无法支持 VSync，即使更换渲染后端还是无果，不过由于已经使用了双缓冲，是否使用 VSync 其实并不重要。</p></div><h3 id="绘制顺序"><a href="#绘制顺序" class="headerlink" title="绘制顺序"></a>绘制顺序</h3><p>DungineX 是一个 2D 游戏引擎，虽然是 2D，但是在处理伪 3D 场景时仍存在遮挡问题。在 OpenGL 中，我们可以指定顶点的三维坐标，由 OpenGL 决定渲染的遮挡关系。而 SDL 只支持 2D 绘制，不存在 Z 轴来支持深度检测，因此只能用<a href="https://en.wikipedia.org/wiki/Painter's_algorithm">画家算法（Painter‘s Algorithm）</a>实现正确的图像遮挡关系。</p><p>虽然画家算法很简单，但是需要时刻关注对象的位置关系，会为用户带来很多麻烦。因此，我们可以对渲染器进行封装，从而支持一个虚拟的 Z 轴。</p><h3 id="绘制指令"><a href="#绘制指令" class="headerlink" title="绘制指令"></a>绘制指令</h3><p>既然 SDL 不支持 Z 轴，那么我们可以抽象出支持 Z 轴的绘制指令。通过 <code>RenderCommand</code> 将具体的绘制动作封装起来，就可以实现对 RenderCommand 的排序，进而支持绘制的排序，具体的声明见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/src/Device/Graphics/RenderCommand.h">Device&#x2F;Graphics&#x2F;RenderCommand.h</a>。由于用户无需了解 RenderCommand，所以我们可以将其放在私有目录下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RenderCommand</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">RenderCommand</span>(<span class="type">int</span> order);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetOrder</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Apply</span><span class="params">(SDL_Renderer* renderer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _order;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>具体地，我们可以进一步实现具体的绘制指令，具体的声明见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/src/Renderer/RenderCommandImpl.h">Renderer&#x2F;RenderCommandImpl.h</a>。</p><p>首先，是原生绘制指令的封装，将绘制操作打包成匿名函数，从而可以在排序后进行调用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NativeRenderCommand</span> <span class="keyword">final</span> : <span class="keyword">public</span> RenderCommand</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> RenderAction = std::function&lt;<span class="built_in">void</span>(SDL_Renderer*)&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NativeRenderCommand</span>(<span class="type">const</span> RenderAction&amp; action, <span class="type">int</span> order);</span><br><span class="line">    ~<span class="built_in">NativeRenderCommand</span>() <span class="keyword">override</span> = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Apply</span><span class="params">(SDL_Renderer* renderer)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> Ref&lt;NativeRenderCommand&gt; <span class="title">Create</span><span class="params">(<span class="type">const</span> RenderAction&amp; action, <span class="type">int</span> order = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    RenderAction _action;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实这一个封装就足够了，但是由于图像绘制参数实在是太多，不仅有 <code>Texture</code> 对象，还有位置、缩放、旋转、翻转、锚点等，所以也值得我们为它封装一个绘制指令。<code>TextureRenderCommand</code> 相对复杂，具体见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/src/Renderer/RenderCommandImpl.h">Renderer&#x2F;RenderCommandImpl.h</a>。</p><h3 id="渲染器封装"><a href="#渲染器封装" class="headerlink" title="渲染器封装"></a>渲染器封装</h3><p>有了绘制指令后，我们要做的就是让渲染器识别我们的虚拟 Z 轴。渲染器的封装如下，支持提交绘制指令，以及执行绘制。同理，这里我们不希望用户直接创建 <code>Renderer</code>，或是提交绘制指令，因此只暴露 <code>Render()</code> 方法，详细声明见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Device/Graphics/Renderer.h">Device&#x2F;Graphics&#x2F;Renderer.h</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Renderer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Renderer</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Renderer</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Submit</span><span class="params">(<span class="type">const</span> Ref&lt;RenderCommand&gt;&amp; command)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DGEX_API <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Render</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，并不是所有场景都对绘制顺序有要求，如果绘制对象已经有序的话，排序反而会影响性能，因此我们可以实现 <code>DirectRender</code> 和 <code>OrderedRenderer</code> 两种封装，分别针对无序和有序的场景，具体声明见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/src/Device/Graphics/RendererImpl.h">Device&#x2F;Graphics&#x2F;RendererImpl.h</a>。</p><p>最后，可以提供如下的方法供用户创建渲染器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RendererProperties</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> Ordered;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">DGEX_API Ref&lt;Renderer&gt; <span class="title">CreateRenderer</span><span class="params">(<span class="type">const</span> RendererProperties&amp; properties)</span></span>;</span><br></pre></td></tr></table></figure><p>由于可以选择使用不同的渲染器实现绘制，因此需要提供函数选择当前活跃的渲染器，以及获取当前的渲染器。当然，我们有默认的渲染器，用 <code>nullptr</code> 代表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">SetCurrentRenderer</span><span class="params">(<span class="type">const</span> Ref&lt;Renderer&gt;&amp; renderer = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="function">DGEX_API Ref&lt;Renderer&gt; <span class="title">GetCurrentRenderer</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>更进一步，我们也可以借鉴 <code>std::lock_guard</code> 的方式实现作用域内渲染器的使用和恢复。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> USE_RENDERER(renderer) RendererGuard __dgex_renderer_guard((renderer))</span></span><br></pre></td></tr></table></figure><h2 id="绘制目标"><a href="#绘制目标" class="headerlink" title="绘制目标"></a>绘制目标</h2><p>刚刚提到了，绘图设备是绘图接口中的重要概念，是我们绘制的目标，类似“画板”（Canvas）。在 SDL 中，绘图设备本质是一块缓冲区，当然，屏幕是一块特殊的缓冲区。一块缓冲区对应一个 <code>SDL_Texture</code> 对象，而屏幕由 <code>nullptr</code> 代表。对于图片，在加载时可以选择是否可作为绘制目标。在 DungineX 中，为了简化，默认所有加载的图片都可作为绘制目标。</p><h3 id="缓冲区封装"><a href="#缓冲区封装" class="headerlink" title="缓冲区封装"></a>缓冲区封装</h3><p>我们的缓冲区封装如下，为了避免不必要的资源管理问题，我们禁止了 <code>Texture</code> 对象的拷贝和移动操作，从而所有 <code>SDL_Texture</code> 都有相应的 <code>Texture</code> 管理。而且，我们这里并不使用 RAII，因为 <code>Texture</code> 对象并不实际拥有 <code>SDL_Texture</code>，所以在析构时也不进行释放，而是通过 <code>Destroy</code> 方法显式地释放。具体的声明见  <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Device/Graphics/Texture.h">Renderer&#x2F;Texture.h</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Texture</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Texture</span><span class="params">(SDL_Texture* texture)</span></span>;</span><br><span class="line">    <span class="built_in">Texture</span>(<span class="type">const</span> Texture&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">Texture</span>(Texture&amp;&amp; other) <span class="keyword">noexcept</span> = <span class="keyword">delete</span>;</span><br><span class="line">    Texture&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Texture&amp; other) = <span class="keyword">delete</span>;</span><br><span class="line">    Texture&amp; <span class="keyword">operator</span>=(Texture&amp;&amp; other) <span class="keyword">noexcept</span> = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Texture</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DGEX_API <span class="type">int</span> <span class="title">GetWidth</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">DGEX_API <span class="type">int</span> <span class="title">GetHeight</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SDL_Texture* <span class="title">GetNativeTexture</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    SDL_Texture* _texture;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>这里我们不使用 RAII 还有另一个原因，就是析构函数的调用时机。全局变量会在 <code>main</code> 函数结束后析构，因此相应的析构函数会在 SDL 以及日志系统卸载之后触发。Texture 的释放不是问题，因为 SDL 卸载时即会清理所有资源，不会有 dobule-free 的问题。主要是其他系统，比如日志系统的卸载会使得析构函数无法输出日志。</p></div><h3 id="双缓冲"><a href="#双缓冲" class="headerlink" title="双缓冲"></a>双缓冲</h3><p>为了提高绘制效率，SDL 默认对屏幕使用双缓冲机制。也就是说，所有向屏幕的绘制操作都首先在 Back Buffer 完成，当每帧更新屏幕时，才将 Back Buffer 里的内容绘制到 Front Buffer，也就是屏幕。因此每帧都需要手动调用 <code>SDL_RenderPresent</code> 更新屏幕画面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">FlushDevice</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="绘图属性"><a href="#绘图属性" class="headerlink" title="绘图属性"></a>绘图属性</h2><p>在绘制过程中，我们需要控制特定的属性，比如线条和填充颜色，字体大小等，因此也需要提供相应的函数。在 DungineX 中，我们提供五种绘制属性。</p><ul><li>清除颜色</li><li>线条颜色</li><li>填充颜色</li><li>字体颜色</li><li>字体大小</li></ul><p>其中主要涉及颜色，因此有必要单独进行说明。</p><h3 id="颜色常量"><a href="#颜色常量" class="headerlink" title="颜色常量"></a>颜色常量</h3><p>颜色结构体的定义位于 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Renderer/Color.h">Renderer&#x2F;Color.h</a>，这里采用整数存储颜色信息。用 <code>uint8_t</code> 存储各个颜色能够稍微节省一些内存，但可能计算的时候会有一定的溢出风险，需要注意扩展。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> R, G, B, A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于颜色，我们希望能够预先定义一些色彩常量，于是会遇到另一个问题，就是如何在 DLL 中导出变量。对于这个问题，你可以先回顾一下之前提到的这篇讨论：[Why&#x2F;when is __declspec( dllimport ) not needed?](Why&#x2F;when is __declspec( dllimport ) not needed?)。</p><p>对于函数和变量的导出是有一定区别的，因此我们需要重新定义 <code>DGEX_API</code>，并为变量导出定义新的 <code>DGEX_DATA</code>，具体见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Defines.h">Defines.h</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DGEX_EXPORT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DGEX_ENGINE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_API  __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_DATA __declspec(dllexport)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_API</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_DATA __declspec(dllimport)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DGEX_ENGINE</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_API</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_DATA</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DGEX_EXPORT</span></span></span><br></pre></td></tr></table></figure><p>在有定义 <code>DGEX_EXPORT</code> 时，DungineX 需要对函数和变量进行导出，而用户只需要导入变量，因此有必要区分 <code>DGEX_API</code> 和 <code>DGEX_DATA</code>。最终，我们可以正常地定义静态常量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    DGEX_DATA <span class="type">static</span> <span class="type">const</span> Color Black;</span><br><span class="line">    DGEX_DATA <span class="type">static</span> <span class="type">const</span> Color Blue;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h2><p>下面，我们终于来到了图形设备接口的定义，首先是图形的绘制。最基本的，我们需要实现点、线和矩形的绘制。</p><div class="note info flat"><p>这时你可能注意到了，自始至终我都没有提到任何涉及曲线的绘制，比如圆形。因为对于渲染引擎，或是 GPU 来说，它们擅长线段或是三角形的绘制，因此曲线通常通过特定的算法绘制，比如使用多边形拟合。这并不是特别必要的功能，因此暂时不进行实现。</p></div><p>具体地，我们有这几个函数进行原生图形的绘制。之前也解释了，我们希望能够控制绘制顺序，因此接口中都有 <code>z</code> 来进行排序。此外，绘制时的颜色属性通过之前提到的绘图属性控制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawLine</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> z = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawRect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> z = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawFilledRect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> z = <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>如果你之前使用过 Windows GDI，你可能还会问，为什么没有控制线条粗细的选项？因为一般来说，游戏依赖于图片资源，或专门的 Shader，很少直接使用线条绘制，所以没有必要提供更改线条粗细的选项。如果确实需要，可以交给客户端实现。</p></div><h3 id="图像绘制-1"><a href="#图像绘制-1" class="headerlink" title="图像绘制"></a>图像绘制</h3><p>图像在之前的<a href="#%E7%BB%98%E5%88%B6%E7%9B%AE%E6%A0%87">绘制目标</a>中已经介绍过了。在 DungineX 中，图片和绘制目标相同，都是 <code>Texture</code>，其绘制接口如下，在指定位置绘制图片。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawTexture</span><span class="params">(<span class="type">const</span> Ref&lt;Texture&gt;&amp; texture, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z = <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>游戏中需要大量绘制图片，对绘制也有很多要求，包括图像的缩放、旋转、透明度等，让用户一个一个指定略显麻烦。因此，这里我们可以采用 Builder 的思想，并使用 <a href="https://en.wikipedia.org/wiki/Fluent_interface">Fluent API</a> 实现复杂的图像绘制指令。</p><div class="note info flat"><p>这里略有炫技倾向。</p></div><p>具体地，我们可以声明相应的 Fluent API 对象，实现对各个属性的修改。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DrawTextureClause</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DrawTextureClause</span>(<span class="type">const</span> Ref&lt;Texture&gt;&amp; texture, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z);</span><br><span class="line">    </span><br><span class="line">    <span class="function">DGEX_API DrawTextureClause <span class="title">Alpha</span><span class="params">(<span class="type">uint8_t</span> alpha)</span></span>;</span><br><span class="line">    <span class="function">DGEX_API DrawTextureClause <span class="title">Anchor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line">    <span class="function">DGEX_API DrawTextureClause <span class="title">FlipX</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DGEX_API DrawTextureClause <span class="title">FlipY</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">DGEX_API DrawTextureClause <span class="title">Rotate</span><span class="params">(<span class="type">float</span> degree)</span></span>;</span><br><span class="line">    <span class="function">DGEX_API DrawTextureClause <span class="title">Scale</span><span class="params">(<span class="type">float</span> scale)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">DGEX_API <span class="type">void</span> <span class="title">Submit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ref&lt;TextureRenderCommandBuilder&gt; _builder;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">DGEX_API DrawTextureClause <span class="title">DrawTextureBegin</span><span class="params">(<span class="type">const</span> Ref&lt;Texture&gt;&amp; texture, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z = <span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h3><p>最后，既然要绘制图片，那么肯定得先实现加载。在 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Renderer/Texture.h">Renderer&#x2F;Texture.h</a> 中，我们声明 <code>LoadTexture</code> 函数，加载指定路径的图片，其中使用 SDL3_image 的 <code>IMG_Load</code> 方法实现图片加载。在 SDL 中，为了与渲染引擎解耦，纹理首先被加载为 <code>SDL_Surface</code>，而后被处理为具体渲染引擎支持的 <code>SDL_Texture</code>。转换后，<code>SDL_Surface</code> 不再被使用，因此可以被销毁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL3_image/SDL_image.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Ref&lt;Texture&gt; <span class="title">LoadTexture</span><span class="params">(<span class="type">const</span> std::string&amp; path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SDL_Surface* surface = <span class="built_in">IMG_Load</span>(path.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">if</span> (!surface)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DGEX_CORE_ERROR</span>(<span class="string">&quot;Failed to load texture: &#123;0&#125;, &#123;1&#125;&quot;</span>, path, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SDL_Texture* texture = <span class="built_in">SDL_CreateTextureFromSurface</span>(<span class="built_in">GetNativeRenderer</span>(), surface);</span><br><span class="line">    <span class="built_in">SDL_DestroySurface</span>(surface);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DGEX_CORE_INFO</span>(<span class="string">&quot;Loaded texture: &#123;0&#125;&quot;</span>, path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CreateRef</span>&lt;Texture&gt;(texture);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本绘制"><a href="#文本绘制" class="headerlink" title="文本绘制"></a>文本绘制</h2><p>最后，对于任何应用程序，都少不了文字。然而，文本绘制一直都是非常具有挑战性的。一方面，文字形状看起来就很难绘制，另一方面排版也不容易。在 SDL 中，文本最终也是转化为图片进行绘制，需要首先加载字体文件，然后将所需要的文本渲染为 Texture。</p><p>然而，绘制的文本往往经常发生变化，每一帧都从字体中加载 Texture 显然会十分影响性能。因此一个通用的做法，是首先将字体中所有字符都首先渲染成图片，然后在绘制时通过拼接单个字符的图像实现文本的绘制。这一方法的名称很有意思，为字体创建 Atlas，即一大张包含所有字符的图片，其中每个字符对应一个 Glyph，在绘制时从中找到对应字符的 Glyph 进行输出。例如，一个 Atlas 图片如下，不过一般会根据字符间距进行压缩，不会像这个例子一样有这么大的间距。</p><p><img src="/posts/Game-Engine-0-to-1-02-Something-on-the-Screen/atlas.png" alt="atlas"></p><p>很可惜，SDL，以及 SDL_ttf 都不提供生成 Atlas 的功能，更不支持高效的字符绘制，因此需要我们手动实现。不过，已经有 <a href="https://github.com/grimfang4/SDL_FontCache">grimfang4&#x2F;SDL_FontCache</a> 为我们实现了这一功能。然而，这个仓库已经“年久失修”，只支持 SDL 2，所以还是需要一定修改，具体的改动见 <a href="https://github.com/Lord-Turmoil/SDL_FontCache">Lord-Turmoil&#x2F;SDL_FontCache</a>，使其支持 SDL 3。当然，我们需要在 Vendor 中引入 SDL_FontCache。</p><h3 id="字体封装"><a href="#字体封装" class="headerlink" title="字体封装"></a>字体封装</h3><p>SDL_FontCache 进一步对 SDL_ttf 中的 <code>SDL_Font</code> 进行封装，提供 <code>FC_Font</code>。这里确实没有必要让用户真的看到这个 <code>FC_Font</code>，也不希望用户间接引入 <code>FC_FontCache.h</code>，所以这里采用了 pImpl 的方式，对 <code>FC_Font</code> 进行了隐藏。具体的字体封装见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Device/Graphics/Font.h">Renderer&#x2F;Font.h</a>，接受 <code>TTF_Font</code>，并在构造函数中使用 <code>FC_LoadFontFromTTF</code> 加载 <code>FC_Font</code>，并作为 <code>_impl</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Font</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Font</span><span class="params">(TTF_Font* font)</span></span>;</span><br><span class="line">    ~<span class="built_in">Font</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DGEX_API <span class="type">const</span> <span class="type">char</span>* <span class="title">GetName</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TTF_Font* <span class="title">GetNativeFont</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">GetImpl</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Destroy</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TTF_Font* _font;</span><br><span class="line">    <span class="type">void</span>* _impl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="字体加载"><a href="#字体加载" class="headerlink" title="字体加载"></a>字体加载</h3><p>由于字体封装中，我们还是接收 <code>TTF_Font</code>，所以字体加载时使用 SDL_ttf 的加载方式即可。和图片加载不同的是，我们不希望相同的字体被多次加载，因此需要记录加载了哪些字体，以及我们需要有一个默认字体。</p><p>对于前者，我们可以通过 <code>std::unordered_map</code> 轻松实现，根据 <code>TTF_GetFontFamilyName</code> 得到的字体名称判断即可。对于后者，由于我们目前只针对 Windows 系统，因此可以在 C:&#x2F;Windows&#x2F;Fonts 下挑一个字体，这里选择的是 C:&#x2F;Windows&#x2F;Fonts&#x2F;Arial.ttf。当然，在用户指定加载字体时，如果指定路径不存在，也可以 Fallback 到系统目录下找一找。</p><div class="note warning flat"><p>这时，细心的你可能会发现，我们没有考虑字体的变形，比如加粗、倾斜等，这些特性我们可以留到之后再实现。</p></div><h3 id="文本绘制-1"><a href="#文本绘制-1" class="headerlink" title="文本绘制"></a>文本绘制</h3><p>最后，是文本绘制，这里主要是字体大小的处理。字体大小是通过缩放实现的，我们可以在加载时选择一个标准，比如 100pt，随后根据用户指定的大小进行缩放。</p><p>最终，我们提供两个绘制函数，一个在指定位置绘制单行文本，另一个在指定矩形内绘制多行文本。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> : <span class="type">unsigned</span> <span class="type">char</span></span><br><span class="line">&#123;</span><br><span class="line">    DGEX_TextAlignLeft   = <span class="built_in">DGEX_BIT</span>(<span class="number">0</span>),</span><br><span class="line">    DGEX_TextAlignRight  = <span class="built_in">DGEX_BIT</span>(<span class="number">1</span>),</span><br><span class="line">    DGEX_TextAlignCenter = <span class="built_in">DGEX_BIT</span>(<span class="number">2</span>),</span><br><span class="line">    DGEX_TextOverflow    = <span class="built_in">DGEX_BIT</span>(<span class="number">3</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawText</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">int</span> x, <span class="type">int</span> y, TextFlags flags)</span></span>;</span><br><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DrawTextArea</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height, TextFlags flags)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="模块初始化接口"><a href="#模块初始化接口" class="headerlink" title="模块初始化接口"></a>模块初始化接口</h2><p>最后，我们可以为所有的绘图设备提供统一的初始化接口，具体见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/Device/Graphics/Graphics.h">Device&#x2F;Graphics&#x2F;Graphics.h</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DGEX_API <span class="type">dgex_error_t</span> <span class="title">InitGraphics</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">DGEX_API <span class="type">void</span> <span class="title">DestroyGraphics</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>用户只需要调用统一的接口，即可实现整个绘图模块的加载和卸载。</p><hr><h1 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h1><p>接下来，我们需要思考如何向用户提供我们的功能，或者说，用户应该如何使用 DungineX。这里我们需要有两方面的考量与权衡，一方面，我们希望 DungineX 足够简单，用户可以尽可能少地调用接口；另一方面，我们还是想保持足够的灵活性，允许用户实现更多自定义的行为。</p><h2 id="主函数封装"><a href="#主函数封装" class="headerlink" title="主函数封装"></a>主函数封装</h2><p>首先，依然是我们自定义的 <code>main</code> 函数。和上一章相比，没有什么变化，因为我们将所有操作都交给了用户。不过呢，我们还是默认进行了日志系统的加载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Preamble</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log::<span class="built_in">Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DGEX_CORE_CRITICAL</span>(<span class="string">&quot;Made with DungineX &quot;</span> DGEX_VERSION_STRING);</span><br><span class="line">    <span class="built_in">DGEX_CORE_CRITICAL</span>(<span class="string">&quot;Copyright (C) New Desire Studios &quot;</span> DGEX_YEAR_STRING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DgeXMainImpl</span><span class="params">(CommandLineArgs args, DgeXMainEntry entry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Preamble</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">entry</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info flat"><p>或许有一些 Annoying，但是由于很多组件都依赖日志输出，所以我们不得不提前进行加载。之后可以实现默认的空日志，从而可以完全不输出日志。</p></div><p>如果采用这种方式，那么需要由用户手动管理组件的注册，以及游戏的循环。目前，我们只有图形设备，因此用户的 <code>main</code> 函数如下，需要由用户手动完成各个步骤，但是会更加方便。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DgeX/EntryPoint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(CommandLineArgs args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">InitGrahpics</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// process input</span></span><br><span class="line">        <span class="comment">// update</span></span><br><span class="line">        <span class="comment">// render</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DestroyGraphics</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>由于之前提到的问题，因为我们暂时没有提供事件处理接口，因此暂时没有具体示例。</p></div><h2 id="基于回调的程序入口"><a href="#基于回调的程序入口" class="headerlink" title="基于回调的程序入口"></a>基于回调的程序入口</h2><p>当然，对于游戏，很多时候我们只关注游戏逻辑，因此我们可以参考 SDL 的方式，提供回调，从而简化游戏的编写。具体地，我们可以有如下几个回调。</p><ul><li><code>OnInit</code>：在 DungineX 各个组件（除了日志）加载之前调用。</li><li><code>OnStart</code>：在 DungineX 各个组件加载后、游戏主循环开始前调用。</li><li><code>OnUpdate</code>：每帧更新时调用。</li><li><code>OnEvent</code>：接收到事件后调用。</li><li><code>OnExit</code>：主循环结束后、DungineX 卸载前调用。</li></ul><p>于是，我们最终的入口如下，具体见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.1/DungineX/include/DgeX/EntryPoint.h">Device&#x2F;EntryPoint.h</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DGEX_USE_CALLBACKS</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DgeXMainImplWithCallbacks</span>(&#123; argc, argv &#125;, DgeXOnInit, DgeXOnStart, DgeXOnUpdate, DgeXOnEvent, DgeXOnExit);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DgeXMainImpl</span>(&#123; argc, argv &#125;, DgeXMain);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>DgeXDgeXMainImplWithCallbacks</code> 中，我们的流程伪代码如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="built_in">OnInit</span>();</span><br><span class="line">    <span class="comment">// DungineX init</span></span><br><span class="line">    <span class="built_in">OnStart</span>();</span><br><span class="line">    <span class="comment">// Main loop</span></span><br><span class="line">    loop &#123;</span><br><span class="line">        <span class="built_in">OnEvent</span>();</span><br><span class="line">        <span class="built_in">OnUpdate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">OnExit</span>();</span><br><span class="line">    <span class="comment">// DungineX exit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我们最初的设想，实际上希望用户以 <code>Interface</code> 的形式提供游戏的每一个界面，方便界面的切换和统一管理，从而更新和事件都由 <code>Interface</code> 对象处理，于是不再需要 <code>OnUpdate</code> 和 <code>OnEvent</code> 两个回调。在之后我们实现 <code>Interface</code> 和 <code>Application</code> 时，会进一步进行完善。</p><p>目前在 <a href="https://github.com/Lord-Turmoil/DungineX/tree/0.1.1/Demo/HelloThere">Demo&#x2F;HelloThere</a> 下有一个示例，可以进行参考，具体执行效果如下。</p><img src="/posts/Game-Engine-0-to-1-02-Something-on-the-Screen/image-20250704200028406.png" alt="image-20250704200028406" style="zoom:67%;"><hr><h1 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h1><p>在下一章中，我们将实现事件处理，并继续完善游戏主循环。有了事件之后，我们的游戏引擎便可以说是初具雏形了。ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Game Engine 0 to 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Game Engine 0 to 1 (01): It Starts Now</title>
      <link href="/posts/Game-Engine-0-to-1-01-It-Starts-Now/"/>
      <url>/posts/Game-Engine-0-to-1-01-It-Starts-Now/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center; font-size: x-large"><b>[01] It Starts Now</b></p><p style="text-align: center"><i>&ldquo;If you truly expect something to be difficult, it will be.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Peter A. Cohen</i></p><div class="note primary flat"><p>你可以在 <a href="/tags/Game-Engine-0-to-1/">Game Engine 0 to 1</a> 标签下浏览该系列的所有文章。</p></div><div class="note success flat"><p>DungineX 完全开源，代码托管在 <a href="https://github.com/Lord-Turmoil/DungineX">GitHub</a>，本章对应<a href="https://github.com/Lord-Turmoil/DungineX/tree/0.1.0">🏷️0.1.0</a>。</p></div><hr><h1 id="Think-Twice"><a href="#Think-Twice" class="headerlink" title="Think Twice"></a>Think Twice</h1><p>在开始创建我们的项目前，还是应该停下来思考一个问题：我们希望如何组织我们的代码？这一问题其实隐含了许多小问题，下面简单列出一些，不过暂时还不太涉及到代码层面的设计。</p><ul><li>我们使用什么工具进行项目管理？MS Solution 还是 CMake，或是其他？</li><li>我们如何对文件进行布局，怎样管理第三方依赖？</li><li>最终 DungineX 的形态是怎样的？</li></ul><p>这些问题其实很大程度上取决于个人的偏好，这里给出我个人的回答，以及相应的理由。</p><p>对于项目管理方式，即 Build System，这里选择 CMake。虽然对于 C++ 来说，并没有一个标准的项目管理工具，但是 CMake 已经是 C++ 的 de-facto standard 了。而且我们的依赖，例如 SDL 等，也都是用 CMake 进行管理，因此集成成本会相对较低。此外，现代的 IDE 对 CMake 的支持也都十分完善，所以使用起来也不会很困难。</p><p>在确定使用 CMake 后，其实也就很好回答第二个问题了，我们只需要按照经典的 CMake 项目结构进行组织即可。当然，这里也会有个人偏好的存在。我们需要有我们的 DungineX 以及第三方依赖，此外，我们还想有单元测试以及 Demo。所以基本的目录结构也就是这些，我们只需要组织整齐即可。</p><p>最后，我们 DungineX 如何发布？对于游戏引擎，自然就不能是我们常见的可执行文件了，而是用静态或动态链接库的形式，因此我们还需要考虑库的编写。</p><p>当然，这些不是想想就能得出结果的，还需要一定的经验积累。不幸的是，经验积累并不能简单的通过文字表述出来，所以，就让我们直接开始吧。</p><hr><h1 id="Let-the-Fun-Begin"><a href="#Let-the-Fun-Begin" class="headerlink" title="Let  the Fun Begin!"></a>Let  the Fun Begin!</h1><h2 id="创建-CMake-项目"><a href="#创建-CMake-项目" class="headerlink" title="创建 CMake 项目"></a>创建 CMake 项目</h2><div class="note info flat"><p>This is the official tutorial video from SDL3: <a href="https://www.youtube.com/watch?v=Mi47TQ4Tsr8">How to setup SDL3 as a git submodule with Modern CMake</a>.</p></div><p>我们刚刚已经讨论过了项目的基本结构，因此这里我们可以直接创建具体的文件夹。同时，我们使用 Git 进行版本控制，为了减小仓库的大小，一个比较标准的做法是将对应依赖作为 submodule，这里我们把它们都注册到 Vendor 目录下。这里有一个依赖我们之前没有提到，是 <a href="https://github.com/gabime/spdlog">spdlog</a>，用作之后的日志输出。</p><img src="/posts/Game-Engine-0-to-1-01-It-Starts-Now/image-20250529181338366.png" alt="image-20250529181338366" style="zoom:80%;"><div class="note info flat"><p>具体 CMake 的一些编写就不再赘述了，可以直接参考仓库中的源码。</p></div><div class="note success flat"><p>这里我使用的是 <a href="https://visualstudio.microsoft.com/vs/">Visual Studio</a> + <a href="https://www.jetbrains.com/resharper/">Resharper</a> 的开发环境。当然 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 同样可以安装相关插件获得 CMake 支持。</p></div><p>这里我想重点讨论的，是如何让这个 CMake 项目看起来更加专业。当然，也有一些小技巧。</p><h3 id="Git-submodule"><a href="#Git-submodule" class="headerlink" title="Git submodule"></a>Git submodule</h3><p>对于 C&#x2F;C++ 这种缺少统一包管理的语言来说，将依赖作为 submodule 是一个不错的选择，从而能够进行统一的构建。</p><p>具体地，我们可以通过如下的命令为 Git 仓库添加一个 submodule，如果不提供 <code>path</code>，则默认添加到项目根目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add url [path]</span><br></pre></td></tr></table></figure><p>当我们要更新依赖时，可以简单的用下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>需要注意的是，由于 SDL 的仓库很大，所以你可能需要一个稍微稳定的网络连接。</p></div><h3 id="第三方依赖管理"><a href="#第三方依赖管理" class="headerlink" title="第三方依赖管理"></a>第三方依赖管理</h3><p>为了使用 SDL 的更多功能，例如加载字体、图片等，我们还需要引入一些额外的 SDL 组件。对于字体支持，我们需要 <a href="https://github.com/libsdl-org/SDL_ttf">SDL_ttf</a>，而对于图片加载，我们需要 <a href="https://github.com/libsdl-org/SDL_image">SDL_image</a>。当然，SDL 还有音频支持，不过作为游戏引擎，之前提到的 <a href="https://www.fmod.com/">FMOD</a> 是一个相对更专业的库。由于暂时我们还不涉及音频的处理，这部分内容会在之后进行介绍。</p><p>当第三方库多起来时，链接它们就显得有些麻烦。每当添加一个依赖，不仅要改动 Vender&#x2F; 下的 CMakeLists.txt，还要改动 DungineX&#x2F; 里的 CMakeLists.txt。对此，我们可以将依赖全部依赖首先打包成一个 <code>interface</code> 类型的目标，作为所有第三方依赖的链接。具体这一目标的创建方式如下，更详细的内容可参考具体的 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/Vendor/CMakeLists.txt">Vendor&#x2F;CMakeLists.txt</a>。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_link_libraries</span>(DgeX_Vendor INTERFACE </span><br><span class="line">    SDL3_ttf::SDL3_ttf</span><br><span class="line">    SDL3_image::SDL3_image</span><br><span class="line">    SDL3::SDL3 <span class="comment"># SDL must be the last item in the list.</span></span><br><span class="line">    spdlog::spdlog</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>这里需要注意的是，必须首先使用 <code>add_subdirectory(SDL)</code> 添加 SDL 依赖，才能确保 SDL_ttf 和 SDL_image 能够获取正确的配置。但是在添加依赖时，SDL3::SDL3 必须是最后一个。</p></div><p>这里，细心的你可能注意到，我们链接的第三方库都是 <code>XX::XX</code> 的格式。这其实是目标别名（Target Alias），可以更方便地管理依赖<del>，并且让我们的 CMake 项目更加高级</del>。关于这一点，会在稍后具体介绍。</p><h3 id="更好的-CMake-项目结构"><a href="#更好的-CMake-项目结构" class="headerlink" title="更好的 CMake 项目结构"></a>更好的 CMake 项目结构</h3><div class="note info flat"><p>更多 CMake 技巧的介绍可以参考 <a href="/posts/Modern-C-Project-with-CMake/">Modern C++ Project With CMake</a>。当然，DungineX 全部都使用到了。</p></div><p>当然，如果你也一样，对项目结构有一定的“强迫症”，那你可能需要多花一些时间整理你的项目。比如，你希望添加一个 <code>utils.cmake</code> 包含一些自定义的函数，或者增加单元测试目录，又或是想在 CMakeLists.txt 添加一些选项或者注释。</p><h2 id="Minimal-DungineX"><a href="#Minimal-DungineX" class="headerlink" title="Minimal DungineX"></a>Minimal DungineX</h2><p>Now, let’s implement a minimal library, so that we can play with the compiler.</p><h3 id="Standard-project-structure"><a href="#Standard-project-structure" class="headerlink" title="Standard project structure"></a>Standard project structure</h3><p>For a CMake project, a standard project layout would be as follows. To prevent naming conflicts, a common practice is adding an extra directory so that we will include <code>DgeX/DgeX.h</code> instead of <code>DgeX.h</code> only.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DungineX</span><br><span class="line">|-- include</span><br><span class="line">|   `-- DgeX</span><br><span class="line">|       `-- DgeX.h</span><br><span class="line">|-- src</span><br><span class="line">`-- CMakeLists.txt</span><br></pre></td></tr></table></figure><p>Then, in CMakeLists.txt, we can just add our source file and include directories.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB_RECURSE DGEX_SOURCES CONFIGURE_DEPENDS </span><br><span class="line">    <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/include/*.h&quot;</span></span><br><span class="line">    <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src/*.h&quot;</span></span><br><span class="line">    <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src/*.cpp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(</span><br><span class="line">    <span class="variable">$&#123;target_name&#125;</span></span><br><span class="line">    PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">    PRIVATE <span class="variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/src</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>As for the target name <code>&#123;target_name&#125;</code>, there are some tricks here, and we will discuss that later.</p><h3 id="Global-macros"><a href="#Global-macros" class="headerlink" title="Global macros"></a>Global macros</h3><p>For a large project, especially for C&#x2F;C++, there are often many useful macros defined globally. For example, we may want to be aware of the build type. Also, we may want a shortcut for namespace declaration. Finally, we can provide an API to get the version string.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// debugging flag</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(DEBUG) || defined(_DEBUG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_RELEASE</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// namespace</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_BEGIN namespace DgeX &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_END   &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX       ::DgeX::</span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string DGEX_API <span class="title">GetDgeXVersion</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>You can find more macro definitions in <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/DungineX/include/DgeX/Defines.h">Defines.h</a>.</p><div class="note success flat"><p>Fun fact, the name Defines.h originally came from <a href="https://github.com/electronicarts/CnC_Remastered_Collection">Westwood Studios’ C&amp;C games</a>.</p></div><h3 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h3><p>I’m not sure if you also feel this way, but adding version information into a project is super cool. To achieve this, we can add <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/DungineX/include/DgeX/Version.h">Version.h</a> to our project. Also, you can use stringfy macros (defined in <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/DungineX/include/DgeX/Utils/Macros.h">Utils&#x2F;Macros.h</a>) to get version as a string.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_VERSION_MAJOR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_VERSION_MINOR 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_VERSION_PATCH 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_TO_VERSION(major, minor, patch) (major * 10000 + minor * 100 + patch)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_VERSION                         DGEX_TO_VERSION(DGEX_VERSION_MAJOR, DGEX_VERSION_MINOR, DGEX_VERSION_PATCH)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_VERSION_STRING                 \</span></span><br><span class="line"><span class="meta">    DGEX_STRINGIFY(DGEX_VERSION_MAJOR)      \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;.&quot;</span>                                     \</span></span><br><span class="line"><span class="meta">    DGEX_STRINGIFY(DGEX_VERSION_MINOR)      \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;.&quot;</span>                                     \</span></span><br><span class="line"><span class="meta">    DGEX_STRINGIFY(DGEX_VERSION_PATCH)</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>I learnt this style from <a href="https://github.com/gabime/spdlog">spdlog</a>. In fact, many of my CMake knowledge came from that, too.</p></div><h3 id="Prepare-to-be-a-shared-library-DLL"><a href="#Prepare-to-be-a-shared-library-DLL" class="headerlink" title="Prepare to be a shared library (DLL)"></a>Prepare to be a shared library (DLL)</h3><p>Back in old days, we built standalone executable files (.exe). Then, we build static libraries (.lib) that linked directly into the executable file. Building static library is easy, as you don’t need to change anything.</p><p>However, things change when it comes to a dynamic library (.dll), or shared library. That’s why you often (or always) see some “weird” macro before each function in libraries you use. For example, this is one of the APIs in SDL3, with <code>SDL_DECLSPEC</code> macro.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> SDL_DECLSPEC <span class="type">int</span> SDLCALL <span class="title">SDL_GetVersion</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>This is because, unlike static library which is linked with the target executable, shared library will be built into independent DLL file to be loaded at runtime. So, we have to tell the compiler and linker what function should be included in the DLL and how to load them.</p><p>If we have shared library in mind, it would be a bad idea to build only for static or dynamic. A good practice, as shown above, is use a macro. Below is the definition in DungineX, replacing <code>SDL_DECLSPEC</code> with <code>DGEX_API</code>. Note that we don’t need <code>__declspec</code> again in function definition.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Defines.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DGEX_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DGEX_API</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Version.h</span></span><br><span class="line"><span class="function">std::string DGEX_API <span class="title">GetDgeXVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Version.cpp</span></span><br><span class="line"><span class="function">std::string <span class="title">GetDgeXVersion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; DGEX_VERSION_STRING &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we want to build DungineX as a shared library, we can just define <code>DGEX_EXPORT</code>, and everything else will be handled by the preprocessor.</p><div class="note warning flat"><p>However, this is not over yet. There is still one important configuration waiting for you, see <a href="#Static-or-shared-library?">Static or shared library</a></p></div><h3 id="More-about-shared-libary"><a href="#More-about-shared-libary" class="headerlink" title="More about shared libary"></a>More about shared libary</h3><p>For static library, since the compilation and linking are done at compile time, so you can write code normally as what you do. For shared libary, there is more “dirty work”.</p><p>When you build shared libary, in fact, you’ll get both a <code>.lib</code> and a <code>.dll</code> file. The <code>.dll</code> file is our actual library, and <code>.lib</code> here is for linking, telling the compiler which functions will eventually come from <code>.dll</code>. By this way, you can just write your code, and the compiler will generate the code to load functions from the shared library. If somehow the <code>.lib</code> is not available (e.g. close source library), then you have to manually write those boring code.</p><p>The client is the code that depends on the library. When it includes shared library’s header files, since we have the macro, it will not see <code>__declspec(dllexport)</code>, and will eventually know that these functions should be imported via the corresponding <code>.lib</code>.</p><p>Another thing to notice is that, there are both <code>__declspec(dllexport)</code> for the libary and <code>__declspec(dllimport)</code> for the client. When you load a shared libary, there will be a table generated to map those function calls or data. <code>__declspec(dllimport)</code> explicitly specify the function or data to be loaded from a shared library, so that the compiler can generate more efficient code.</p><p>However, <code>__declspec(dllimport)</code> is not required for function, as the compiler will do the optimization anyway. The only case when it is useful is declaring variables, since we don’t want an indirect access for them. For more about this topic, you can check out the following links.</p><ul><li><a href="https://stackoverflow.com/questions/4489441/why-when-is-declspec-dllimport-not-needed">Why&#x2F;when is __declspec( dllimport ) not needed?</a></li><li><a href="https://web.archive.org/web/20140808231508/http://blogs.msdn.com/b/russellk/archive/2005/03/20/399465.aspx">LNK4217</a></li></ul><div class="note info flat"><p>Eventhough we can export variable in a shared library, it is <strong>NOT</strong> recommended to do so, because you know, global variables are bad.</p></div><h2 id="Update-CMakeLists-txt"><a href="#Update-CMakeLists-txt" class="headerlink" title="Update CMakeLists.txt"></a>Update CMakeLists.txt</h2><p>Now we have a minimum library project, let’s get ready to compile it.</p><h3 id="Static-or-shared-library"><a href="#Static-or-shared-library" class="headerlink" title="Static or shared library?"></a>Static or shared library?</h3><p>Now that we have two possible targets, one static library and one shared library, we have to decide which one to build. Of course, we can build them all, but adding such an option would always be a better choice.</p><p>In <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/DungineX/CMakeLists.txt">DungineX&#x2F;CMakeLists.txt</a>, we can optionally add two targets, marked with <code>SHARED</code> and <code>STATIC</code>. Specially, for a shared library, we need to make it position-independent, so that any program can load it. Of course, we need to add that macro <code>DGEX_EXPORT</code>. For a static library, there’s nothing different from what you see before.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(TARGET_SHARED DgeX_Shared)</span><br><span class="line"><span class="keyword">set</span>(TARGET_STATIC DgeX_Static)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DGEX_BUILD_SHARED)</span><br><span class="line">    <span class="keyword">add_library</span>(<span class="variable">$&#123;TARGET_SHARED&#125;</span> SHARED <span class="variable">$&#123;DGEX_SOURCES&#125;</span>)</span><br><span class="line">    configure_dgex_target(<span class="variable">$&#123;TARGET_SHARED&#125;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Shared library need some extra properties.</span></span><br><span class="line">    <span class="keyword">set_target_properties</span>(<span class="variable">$&#123;TARGET_SHARED&#125;</span> PROPERTIES POSITION_INDEPENDENT_CODE <span class="keyword">ON</span>)</span><br><span class="line">    <span class="keyword">target_compile_definitions</span>(<span class="variable">$&#123;TARGET_SHARED&#125;</span> PRIVATE DGEX_EXPORT)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DGEX_BUILD_STATIC)</span><br><span class="line">    <span class="keyword">add_library</span>(<span class="variable">$&#123;TARGET_STATIC&#125;</span> STATIC <span class="variable">$&#123;DGEX_SOURCES&#125;</span>)</span><br><span class="line">    configure_dgex_target(<span class="variable">$&#123;TARGET_STATIC&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>Now, you should have your shared library. But one thing may bother you, that the compiled DLL is output into its own directory, not beside the executable file. So, when you try to run your executable, you will see one of the most annoying errors on Windows.</p><img src="/posts/Game-Engine-0-to-1-01-It-Starts-Now/image-20250530233424360.png" alt="image-20250530233424360" style="zoom:80%;"><p>One quick solution is to copy the DLL file. However, you can also set CMake’s output directory so that all binaries will be output to the same location. Here, DungineX only changes this if it is built as the main project, not a dependency. This allows more flexibility if it is built as a dependency.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(DGEX_MASTER_PROJECT)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/output/lib&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/output/lib&quot;</span>)</span><br><span class="line">    <span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_BINARY_DIR&#125;/output/bin&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><h3 id="Target-alias"><a href="#Target-alias" class="headerlink" title="Target alias"></a>Target alias</h3><p>It is good to have both static and shared libraries. However, it introduces another problem. When people link DungineX, which target should they use? With the CMakeLists.txt above, the users have to explicitly choose <code>DgeX_Static</code> or <code>DgeX_Shared</code>, which is apparently not friendly.</p><p>Fortunately, CMake supports target alias, and you’ve already seen it earlier when we were adding third-party libraries. We can create a consistent alias based on the user’s choice of library. This way, they can just use <code>DgeX::Lib</code> in their CMakeLists.txt.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(DGEX_USE_SHARED)</span><br><span class="line">    <span class="keyword">add_library</span>(DgeX::Lib ALIAS <span class="variable">$&#123;TARGET_SHARED&#125;</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">add_library</span>(DgeX::Lib ALIAS <span class="variable">$&#123;TARGET_STATIC&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>However, you may encounter yet another problem, that you cannnot use target alias as target. So, you have to know the target behind the alias. This can be done via a simple function, and then you can use the original target name.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmake/utils.cmake</span></span><br><span class="line"><span class="keyword">function</span>(dgex_get_target_name alias_name output)</span><br><span class="line">    <span class="keyword">get_target_property</span>(target_name <span class="variable">$&#123;alias_name&#125;</span> ALIASED_TARGET)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;$&#123;target_name&#125;&quot;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;target_name-NOTFOUND&quot;</span>)</span><br><span class="line">        <span class="keyword">set</span>(<span class="variable">$&#123;output&#125;</span> <span class="variable">$&#123;alias_name&#125;</span> PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">        <span class="keyword">set</span>(<span class="variable">$&#123;output&#125;</span> <span class="variable">$&#123;target_name&#125;</span> PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vendor/CMakeLists.txt</span></span><br><span class="line">dgex_get_target_name(<span class="variable">$&#123;vendor&#125;</span> vendor_target)</span><br><span class="line">dgex_disable_warnings(<span class="variable">$&#123;vendor_target&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="Ship-DLL-with-your-mark"><a href="#Ship-DLL-with-your-mark" class="headerlink" title="Ship DLL with your mark"></a>Ship DLL with your mark</h3><p>Now, you should have everything work just fine. However, if you are a perfectionist, you will probably get extremely frustrated as the output DLL file has no properties. This is not good, as players won’t be able to contribute to the one who writes the engine and makes the game happen.</p><img src="/posts/Game-Engine-0-to-1-01-It-Starts-Now/image-20250531183840997.png" alt="image-20250531183840997" style="zoom:80%;"><p>To add properties to your DLL file, there is a repo <a href="https://github.com/halex2005/CMakeHelpers">CMakeHelpers</a> you can refer to. Just copy <code>VersionInfo.in</code>, <code>VersionResource.rc</code> and <code>generate_product_version.cmake</code> to your project and configure your information. See <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/DungineX/CMakeLists.txt">DungineX&#x2F;CMakeLists.txt</a> for detailed usage. Since DLL file usually don’t need an icon, so I removed <code>ICON</code> property. Finally, our DLL file will look like this. All of a sudden, it goes professional.</p><img src="/posts/Game-Engine-0-to-1-01-It-Starts-Now/image-20250531190555675.png" alt="image-20250531190555675" style="zoom:80%;"><div class="note info flat"><p>Of course, this works only on Windows. However, it is not a issue as we currently don’t target other platforms.</p></div><hr><h1 id="A-Custom-Entrypoint"><a href="#A-Custom-Entrypoint" class="headerlink" title="A Custom Entrypoint"></a>A Custom Entrypoint</h1><p>对于游戏来说，初始化或者释放可能会很复杂，涉及窗口的创建、各种资源的加载，如果涉及 Windows 应用的创建，还需要将 <code>main</code> 替换为复杂的 <code>WinMain</code>。很多时候，我们没有必要将复杂度暴露给用户。因此，这里介绍一个相对特别的话题，就是为引擎添加一个自定义的入口，从而将很多逻辑转移到引擎内部。</p><div class="note success flag flat"><p>这样做还有一个好处，就是可以向最终生成的游戏中添加一些有趣的东西，比如版权声明，启动画面等。</p></div><p>首先，我们可以创建这样的自定义入口，从而用户在使用引擎时，可以使用正常 <code>main</code> 的写法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*DgeXEntryPoint)</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">DgeXMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span>;</span><br></pre></td></tr></table></figure><p>接下来，我们可以定义引擎 <code>main</code> 函数的实现，从而在用户入口的前后插入自定义的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> DGEX_API <span class="type">int</span> <span class="title">DgeXMainImpl</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], DgeXEntryPoint entryPoint)</span></span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>说到这里，突然想到这和面向切面编程（AOP）有些类似，刚好之前也写过一篇相关的文章，<a href="/posts/AOP-in-Spring-Boot/">AOP in Spring Boot</a>。</p></div><p>对于自定义入口，最关键的就是 <code>main</code>（或 <code>WinMain</code>，以下均用 <code>main</code> 代指）函数的定义。既然我们不希望用户手动实现这一函数，那么我们就需要通过某种方式提供给用户。<code>main</code> 与其他函数不同，其他函数可以只提供声名，然后在运行时从 DLL 中动态加载，而 <code>main</code> 为可执行程序的入口，因此必须在可执行文件内有定义。所以，解决方法就是将 <code>main</code> 函数实现在引擎的头文件中，当用户引入这一头文件时，即可引入 <code>main</code> 函数。而由于 <code>main</code> 函数只能定义一次，所以我们需要将其定义在一个单独的头文件中供用户引用，而不是我们的 <code>DgeX.h</code>。</p><p>具体地，我们这里将 <code>main</code> 函数定义在 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/DungineX/include/DgeX/EntryPoint.h">DgeX&#x2F;EntryPoint.h</a>。目前的 <code>main</code> 函数实现还非常简单，只是调用一下刚刚的 <code>DgeXMainImpl</code>。由于 <code>DgeXMainImpl</code> 就不是 <code>main</code> 了，所以它可以只提供声明，而将实现放在源文件中。当然需要注意，在我们引擎内部引用 EntryPoint.h 时，就不能再包含 <code>main</code> 函数的定义了，具体可以通过特定的宏开关实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DGEX_USE_WINMAIN</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> <span class="comment">// for __argc and __argv</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInst, HINSTANCE hInstPrev, PSTR cmdline, <span class="type">int</span> cmdshow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DgeXMainImpl</span>(__argc, __argv, DgeXMain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DgeXMainImpl</span>(argc, argv, DgeXMain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DGEX_USE_WINMAIN</span></span></span><br></pre></td></tr></table></figure><p>之后，随着引擎功能逐渐复杂，我们会在 <code>DgeXMainImpl</code> 中添加更多的内容。当然，为了提供更一致的体验，我们还可以将 <code>DgeXMain</code> 进一步变成 <code>main</code>。因为预处理发生在编译前，所以不会对编译过程造成影响。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> main DgeXMain</span></span><br></pre></td></tr></table></figure><p>最后，用户只需要在原先要包含 <code>main</code> 函数源文件中，引入 EntryPoint.h 即可。下面是一个简单的示例，具体见 <a href="https://github.com/Lord-Turmoil/DungineX/blob/0.1.0/Demo/HelloThere/Main.cpp">Demo&#x2F;HelloThere&#x2F;Main.cpp</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DgeX/DgeX.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DgeX/EntryPoint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello there!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;DungineX &quot;</span> &lt;&lt; DgeX::<span class="built_in">GetDgeXVersion</span>() &lt;&lt; <span class="string">&quot;!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::endl &lt;&lt; <span class="string">&quot;Press Enter to quit...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next?"></a>What’s Next?</h1><p>现在我们已经有了一个不错的项目结构了，接下来就可以向其中添加各个模块了。在进行下一步之前，我们有必要做一些规划，也就是我们的引擎主要分为那几个部分。</p><h2 id="Device"><a href="#Device" class="headerlink" title="Device"></a>Device</h2><p>首先，自然是设备相关，包括图形设备（Graphics）、音频设备（Autdio）、输入设备（Input）三类。这一层主要对硬件设备进行封装，提供统一的抽象模型。当然，如果我们使用 SDL，和硬件相关的部分其实已经封装好了，不过我们还需要根据引擎具体的需求进行二次封装。</p><p>这一部分是整个游戏引擎的基础设施（Infrastructure），在它完成之后，其他所有模块将不再需要调用底层 SDL 和其他库的接口，所以非常关键。</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p>资源管理也是游戏引擎中一个重要的部分。游戏中通常需要加载大量的资源，硬编码自然不是一个好的选择，因此我们需要有一个统一的资源管理模块。</p><p>首先一个问题，是资源的索引，可以使用 XML 或者 JSON 格式的文本，记录资源 ID 和文件索引，这个很容易，只要准确地描述资源的各种属性即可。</p><p>第二个问题，也是更关键的问题，如何加载资源。由于资源种类很多，而且很大程度上依赖于特定的游戏，因此我们在引擎层很难有全面的支持，因此就需要考虑可扩展性。例如，在引擎里，我们可以提供最简单的文本、图片和声音资源，然后允许客户端定义新的资源类型以及加载方式。</p><p>此外，还有一些琐碎的问题，比如动态添加或修改资源、资源何时加载和释放等，这个在之后具体设计时再考虑。</p><div class="note info flat"><p>当然，如果想保护游戏资源，也可以选择对资源文件进行加密。这实现起来不难，也不是我们关注的重点。</p></div><h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><p>接下来，就是游戏引擎的重头戏，场景管理。在这一部分，我们要管理游戏对象，实现游戏对象的更新、绘制，以及它们之间的交互。</p><p>对于这一部分，游戏开发中有一个非常受欢迎的实现方式，就是 <a href="https://en.wikipedia.org/wiki/Entity_component_system">ECS（Entity Component System）</a>。这个其实在之前的 <a href="https://github.com/Lord-Turmoil/Dungeon">Dungine</a> 中就已经有所实践了，能够提供非常高的灵活性。在 DungineX 中，我们也继续使用这一模式。</p><p>曾经在 Dungine 中，我实现了非常简单的 2D 碰撞检测，然而并不是真正的物理模拟。因此，这次我想为引擎引入完整的物理系统。之前还想亲自实现物理引擎，但是实在过于艰深晦涩，我只勉强实现了粒子物理系统。由于物理引擎实在过于宏大，因此我们暂时直接使用第三方库。</p><p>此外，我们也可以在引擎层面添加一些额外的功能，比如观察者模式、原型模式、单例模式等的支持，以及对象池等等。</p><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>对于一个完整的游戏，不只有游戏画面，还有各种菜单界面。虽然可能已经超出了引擎的基本功能范围，但是我们可以为用户提供简单的界面支持。</p><p>这个可能是我个人的一些执念吧，比较想实现界面的切换效果。此外，还想提供一个基于 XML 的界面编写支持，有些类似 HTML 或 WPF 的感觉。属于额外的功能支持吧。</p><p>在界面支持的基础上，我们可以把整个游戏封装成一个 Application，从而管理整个游戏的执行流程。</p><h2 id="Logs"><a href="#Logs" class="headerlink" title="Logs"></a>Logs</h2><p>此外，其实还有很多比较零碎的点，比如日志支持等，这些会在之后的内容中穿插介绍。</p><hr><h1 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h1><p>在下一章中，我们将实现最基本的窗口创建，以及图形绘制，也就是 Device 中的 Graphics 部分。ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Game Engine 0 to 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Game Engine 0 to 1 (00): Nothing&#39;s Here</title>
      <link href="/posts/Game-Engine-0-to-1-00-Nothing-s-Here/"/>
      <url>/posts/Game-Engine-0-to-1-00-Nothing-s-Here/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center; font-size: x-large"><b>[00] Nothing's Here</b></p><p style="text-align: center"><i>&ldquo;Everything is created twice, first in the mind and then in reality.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Robin Sharma</i></p><div class="note primary flat"><p>你可以在 <a href="/tags/Game-Engine-0-to-1/">Game Engine 0 to 1</a> 标签下浏览该系列的所有文章。</p></div><hr><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>开始之前，还是有一些话想说。当我刚入门 C 语言时，迫不及待写的第一个“项目”就是游戏。随着经验不断丰富，游戏体量也逐渐增大，但同时我也发现自己正在失去对“庞大”（现在看来当然不算什么）代码库的掌控。正如 Frederick P. Brooks Jr. 在他的软件工程著作《人月神话》（<em>The Mythical Man-Month</em>）中提到的：</p><blockquote><p>“The general tendency of a first system is to be excessively ambitious in scope and functionality. The first system is usually built with a certain naivety and enthusiasm, where all the desired features and capabilities are included. However, due to time constraints, limited resources, and a lack of experience, the first system often falls short of expectations. It may be late, over budget, and contain numerous defects.”</p></blockquote><p>虽然我写出了上万行的代码，但是最终的效果不尽人意，很多设想的功能都没有实现，还存在许多 BUG🐛。更为严重的是，这一项目可以说是无法维护的。不过，通过这个“失败”的项目，我也开始意识到一些问题，尤其是针对游戏开发。</p><ul><li>一个良好的项目结构是怎样的？</li><li>如何更好地管理游戏对象？</li><li>对于多个游戏，能否有一个公共的框架？</li><li>如何使代码更加灵活？</li></ul><div class="note success flat"><p>从更宏观的角度来讲，当一件事物的规模逐渐变大时，这些问题都会出现，不过这里我们主要讨论的，还是游戏开发。</p></div><p>抱着这些问题，我思考了许久，当然结果也是显而易见的，我们需要游戏引擎（Game Engine）。当时已经有 Unity 这样成熟的商业化引擎了，但是我觉得这样会剥夺亲自动手实现的乐趣。因此我最终决定亲手实现一个游戏引擎，对那个“失败”的项目进行完全的重写。说到这里，你可能意识到了我为什么引用《人月神话》中的内容，因为它下一段便提到了这一“陷阱”：</p><blockquote><p>“However, the trap lies not in the failure of the first system itself, but in the reaction to that failure. The natural inclination is to start afresh and build a second system, believing that the lessons learned from the first system will lead to a better and more perfect result. This is where the second-system effect comes into play. The engineers tend to overcompensate for the perceived shortcomings of the first system and include excessive features, complexity, and unnecessary embellishments in the second system.”</p></blockquote><p>这次重写的产物，你或许在博客里已经见过了，那就是 <a href="/posts/Dungeon/">Dungeon</a>，其中实现了游戏引擎 Dungine，算是弥补了之前的遗憾。从某种程度上来说，它避开了所谓的 second-system effect，毕竟它做到了它该做的事情，甚至歪打正着为另一门<a href="https://github.com/Lord-Turmoil/Bezier-Visualizer">课程设计</a>提供了可视化支持，证明了它的可扩展性。然而，它仍然难以避免地落入 second-system effect 的陷阱，正如《人月神话》中提到的，它过于臃肿和繁琐，而且代码不够“漂亮”。</p><p>C++ 是我最喜欢的编程语言，然而平日的项目却更多用 Python、Java、C# 这样的语言，甚至最近又开始在跨平台应用中使用 TypeScript，唯有编写自己的游戏时，能有机会与 C++ 相遇。现在，距离 <a href="/posts/Dungeon/">Dungeon</a> 发布已经过去了三年，我的 C++ 水平应该说有了很大的长进。我想，是时候继续下去了。</p><hr><h1 id="在一切开始之前"><a href="#在一切开始之前" class="headerlink" title="在一切开始之前"></a>在一切开始之前</h1><p>当然，我喜欢写游戏，但我对如何写游戏更加感兴趣，以至于编写自己的游戏引擎似乎已经成为了一种执念。而且趁现在还没有工作，可以抓紧时间满足一下自己。当然，我指的是实现一个游戏引擎。</p><p>需要说明的是，这一想法一定程度上来自于 <a href="https://www.youtube.com/@TheCherno">The Cherno</a> 的 <a href="https://www.youtube.com/playlist?list=PLlrATfBNZ98dC-V-N3m0Go4deliWHPFwT">Game Engine Series</a>，他曾经是 <a href="https://www.ea.com/">EA</a> 的 <a href="https://www.ea.com/frostbite">Frostbite Engine</a> 开发工程师，现在主导编写了 <a href="https://hazelengine.com/">Hazel Engine</a>，这真的很酷。</p><p>在此之前，我曾写过 <a href="/posts/Introduction-to-C-Game-Development/">Introduction to C++ Game Development</a>，并配套了相关视频。虽然是作为课程的教程，但一定程度上也启发我继续写下去。作为一个业余项目，我觉得我有时间把自己的开发过程和心路历程记录下来，也算是一种特别的回忆吧。</p><p>在这一系列文章里，我会记录我从零开始编写游戏引擎的整个过程，包括其中的设计考量、项目管理、代码实现等，所以这更偏向开发日记，而不是技术教程。这也是我第一次尝试这一风格，希望会很有趣。最终，我也会基于它实现一个具体的游戏案例。当然，所有代码都会开源。</p><div class="note warning flat"><p>Due to my personal affection, sometimes I just like to write things in English, especially code related stuffs. So I may write English wherever I want.</p></div><h2 id="Managing-the-Complexity"><a href="#Managing-the-Complexity" class="headerlink" title="Managing the Complexity"></a>Managing the Complexity</h2><p>对于游戏引擎来说，这是我的 second system，所以有必要给予一定的重视。所以在开始前，还是需要进行一些思考，想清楚自己究竟要做什么。其实不久之前，我已经有所尝试，所以这严格来说是 third system，从 <a href="https://easyx.cn/">EasyX</a> 过渡到 <a href="https://www.opengl.org/">OpenGL</a>，并添加物理引擎支持。然而，这二者的复杂程度超出我的预期，使我无法专注于引擎本身。</p><div class="note danger flat"><p>你可以在<a href="https://github.com/Lord-Turmoil/DungineX-Obsolete">这里</a>找到这一失败的尝试。</p></div><p>因此，首先需要想清楚自己真正要做什么。一个游戏引擎？游戏引擎是一个非常宏大的概念，包括资源管理、图像渲染、物理模拟等等，目前看来，仅凭我一人自然是难以兼顾，因此需要做出一些妥协，所以在这次的实现中，我想将重心放在引擎流程的实现上，使用一些成熟的第三方库暂时屏蔽这些细节问题。</p><ul><li>对于渲染支持，选择更为友好的 <a href="https://libsdl.org/">SDL</a>。</li><li>对于音频支持，虽然 SDL 也支持，但是个人更倾向于使用 <a href="https://www.fmod.com/">FMOD</a>。</li><li>对于物理引擎，选择 <a href="https://box2d.org/">Box2D</a>。</li></ul><p>此外，一些其他依赖就视需求而定了。当然，核心要实现的游戏引擎流程还是得从零开始。</p><h2 id="一些期望"><a href="#一些期望" class="headerlink" title="一些期望"></a>一些期望</h2><p>在这里，我还是想提出一些对最终引擎的期望吧，也是在之后设计中需要认真思考的问题。</p><p>首先，还是我一贯的风格，这不仅是游戏引擎，更是一次编码实践。既然是一个项目，那么就应该力求规范、整洁，正好作为一次项目管理的实践。</p><p>其次，需要具备良好的可扩展性。刚刚提到，为了屏蔽技术细节，暂时选用了第三方库，但如果日后能够将其替换，那自然是再好不过了。</p><p>最后，游戏引擎也是十分注重性能的。虽然在体量小的游戏中并不明显，但我觉得还是可以适当做一些优化。不过当然，前提自然是功能的完备性。</p><p>当然，最重要的，是要让用户便于使用。这里我并不追求“零成本”，或是“低成本”，但还是希望最终用户能够以相对优雅的方式进行使用和集成，甚至是拓展。</p><hr><h1 id="Ready"><a href="#Ready" class="headerlink" title="Ready?"></a>Ready?</h1><div class="note success flat"><p>In memory of all my works before, I shall name this new engine <strong>DungineX</strong>.</p></div><p>Welcome back commander, prepare for battle control. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Game Engine 0 to 1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Demystifying NAT in P2P</title>
      <link href="/posts/Demystifying-NAT-in-P2P/"/>
      <url>/posts/Demystifying-NAT-in-P2P/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;И ещё не раз кляня судьбу,</i><br><i>Вспомнишь ты Призрака мольбу!&rdquo;</i></p><p style="text-align: right"><i>&mdash; Призрак Оперы</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Ahoy. It’s been quite a few days since the last post. I could have written more, but I’m not content of poor quality articles that are more like walkthroughs.</p><p>Recently, I come across, again, P2P gaming issues, which is really frustrating. The root cause of this is NAT. Instead of searching just for solutions, maybe it’s time to take a look at this trouble maker. So in this post, I’ll first talk about NAT, then share two ways to enjoy P2P games under bad NAT situation. Finally, I’ll try it out on my favorite game &mdash; <a href="https://cnc.fandom.com/wiki/Command_%26_Conquer_3:_Kane%27s_Wrath">Command &amp; Conquer 3: Kane’s Wrath</a>.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Thanks for all these wonderful articles!</p><ul><li><a href="https://en.wikipedia.org/wiki/Network_address_translation">Network address translation</a></li><li><a href="https://doc-kurento.readthedocs.io/en/latest/knowledge/nat.html">NAT Types and NAT Traversal</a></li><li><a href="https://support.dh2i.com/docs/Archive/kbs/general/understanding-different-nat-types-and-hole-punching/">Understanding Different NAT Types and Hole-Punching</a></li><li><a href="https://nordvpn.com/blog/vpn-vs-proxy/">Proxy vs VPN: What are the main differences?</a></li><li><a href="https://liaoguoyin.com/posts/zerotier-moon/">Zerotier组网之自建Moon加速节点</a></li><li><a href="https://monovm.com/blog/set-up-a-vpn-on-vps-server/#Why-Use-a-VPS-for-Hosting-Your-VPN">How to Set Up a VPN on VPS Server: A Step-by-Step Guide</a></li></ul><hr><h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><p>So, first, let’s talk about NAT. I’ll explain common types of NAT, and for today’s topic, how it impacts our gaming experience.</p><h2 id="What-is-NAT"><a href="#What-is-NAT" class="headerlink" title="What is NAT"></a>What is NAT</h2><p>Today, the most common protocol for internet communication is TCP&#x2F;IP. As TCP&#x2F;IP protocol communicates via IP, in order to get in touch with worldwide users freely, one must have a <strong>public</strong> IP. However, as most programs still use IPv4, and the number of IPv4 addresses is limited, most of us are in fact, sitting in a private network, and apparently, not having a public IP.</p><p>In this case, how can we communicate with the outside world? This is where NAT comes in. NAT, a.k.a. Network Address Translation, is a method of mapping a private IP address to a public one, and vice versa. A private network must have at least one router with a public IP, so that it can communicate with the outside world on our behalf. And this router is called <strong>NAT router</strong>.</p><p>When a packet is sent from a private network to the outside world, the NAT router will replace the source IP address with its own public IP address, and record the mapping in a table. When a packet comes back, it will check the destination IP address, and if it matches its own public IP, it will look up the table, and replace the destination IP address with the original private one, and send it to client.</p><p>This is how NAT works. However, this is not the end of the story. NAT routers can be configured in different ways, and this leads to different types of NAT. And some of them are not friendly for P2P gaming.</p><h2 id="Different-Types-of-NAT"><a href="#Different-Types-of-NAT" class="headerlink" title="Different Types of NAT"></a>Different Types of NAT</h2><p>There are more types of NAT, but the most common ones are:</p><ul><li>Full Cone NAT</li><li>(Address) Restricted Cone NAT</li><li>Port Restricted Cone NAT</li><li>Symmetric NAT</li></ul><p>They are defined by how they handle incoming packets, and how they map the private IP address to the public one. Before we move on, there are some terms you need to know.</p><p>The communication of TCP&#x2F;IP is between pairs of IP address and port. For us who sits behind a NAT router, let’s say we have internal IP address and port (<em>iAddr:iPort</em>). Our hard-working NAT router, will translate it into external IP address and port (<em>eAddr:ePort</em>). And finally, the target IP address and port is (<em>hAddr:hPort</em>), we call it the host. For now, we consider host to be a public server with, of course, a public IP.</p><div class="note info flat"><p>The notation I used here is taken from <a href="https://en.wikipedia.org/wiki/Network_address_translation">Network address translation</a>. The descriptions and figures also come from this wiki.</p></div><p>In this process, the source and destination address for TCP&#x2F;IP is as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 [Client] iAddr:iPort -&gt; hAddr:hPort</span><br><span class="line">2 [   NAT] eAddr:ePort -&gt; hAddr:hPort (add mapping [iAddr:iPort, eAddr:ePort])</span><br><span class="line">3 [  Host] hAddr:hPort -&gt; eAddr:ePort</span><br><span class="line">4 [   NAT] hAddr:hPort -&gt; iAddr:iPort (look for existing mapping)</span><br></pre></td></tr></table></figure><p>The differences between each type of NAT is how they handle the mapping. Usually the NAT is managed by your ISP (Internet Service Provider). Based on my experience, for home and organization, you may have Port Restricted Cone. And the mobile network, like 4G or 5G, is most likely to be Symmetric NAT.</p><h3 id="Full-Cone-NAT"><a href="#Full-Cone-NAT" class="headerlink" title="Full Cone NAT"></a>Full Cone NAT</h3><p>This is the most basic type of NAT, also the most permissive.</p><ul><li>Once an internal address (<em>iAddr:iPort</em>) is mapped to an external address (<em>eAddr:ePort</em>), any packets from (<em>iAddr:iPort</em>) are sent through (<em>eAddr:ePort</em>).</li><li><strong>Any external host</strong> can send packets to (<em>iAddr:iPort</em>) by sending packets to <em>eAddr:ePort</em>.</li></ul><p>See the figure below. Once the mapping is created, it will never change, unless the router flushes the mapping. One client, one port, many hosts, doesn’t it look like a cone?</p><p><img src="/posts/Demystifying-NAT-in-P2P/Full_Cone_NAT.svg" alt="Full_Cone_NAT"></p><div class="note info flat"><p>Each half-circle represents a port, and the same IP with different port with be treated as different address.</p></div><p>In this case, as shown in the figure. Even if Client has never sent any request to Server 2, Server 2 can send something to Client if Server 1 kindly tells him the <em>eAddr:ePort</em> of Client. But if the mapping [<em>iAddr:iPort</em>, <em>eAddr:ePort</em>] does not exists yet, no one can find Client.</p><h3 id="Address-Restricted-Cone-NAT"><a href="#Address-Restricted-Cone-NAT" class="headerlink" title="(Address) Restricted Cone NAT"></a>(Address) Restricted Cone NAT</h3><p>You may find that Full Cone NAT is a little too permissive, so people put some restrictions to it.</p><ul><li>Once an internal address (<em>iAddr:iPort</em>) is mapped to an external address (<em>eAddr:ePort</em>), any packets from (<em>iAddr:iPort</em>) are sent through (<em>eAddr:ePort</em>).</li><li>An external host (<em>hAddr:any</em>) can send packets to (<em>iAddr:iPort</em>) by sending packets to (<em>eAddr:ePort</em>) only if (<em>iAddr:iPort</em>) has previously sent a packet to (<em>hAddr:any</em>). <em>Any</em> means the port number doesn’t matter.</li></ul><p>Since Restricted Cone is still Cone, so they are essentially the same. The difference is that Restricted Cone NAT will check incoming requests. It achieves this with an extra mapping of [<em>iAddr:iPort</em>, <em>hAddr</em>]. First, it will resolve [<em>iAddr:iPort</em>] just like Full Cone NAT. Then it checks if [<em>iAddr:iPort</em>, <em>hAddr</em>] exists. If not, it will refuse the connection.</p><p><img src="/posts/Demystifying-NAT-in-P2P/Restricted_Cone_NAT.svg" alt="Restricted_Cone_NAT"></p><h3 id="Port-Restricted-Cone-NAT"><a href="#Port-Restricted-Cone-NAT" class="headerlink" title="Port Restricted Cone NAT"></a>Port Restricted Cone NAT</h3><p>This is actually the same as Restricted Cone NAT, just the extra mapping also includes port, i.e.  [<em>iAddr:iPort</em>, <em>hAddr:hPort</em>]</p><ul><li>Once an internal address (<em>iAddr:iPort</em>) is mapped to an external address (<em>eAddr:ePort</em>), any packets from (<em>iAddr:iPort</em>) are sent through (<em>eAddr:ePort</em>).</li><li>An external host (<em>hAddr:hPort</em>) can send packets to (<em>iAddr:iPort</em>) by sending packets to (<em>eAddr:ePort</em>) only if (<em>iAddr:iPort</em>) has previously sent a packet to (<em>hAddr:hPort</em>).</li></ul><p><img src="/posts/Demystifying-NAT-in-P2P/Port_Restricted_Cone_NAT.svg" alt="Port_Restricted_Cone_NAT"></p><h3 id="Symmetric-NAT"><a href="#Symmetric-NAT" class="headerlink" title="Symmetric NAT"></a>Symmetric NAT</h3><p>The first three cone NATs, are all permissive, as long as you know Client’s (<em>eAddr:ePort</em>) and it has sent you something before, you can establish a connection. But, things change for Symmetric NAT.</p><ul><li>The combination of one internal IP address and a destination IP address and port is mapped to a single unique external source IP address and port; if the same internal host sends a packet even with the same source address and port but to a different destination, a different mapping is used.</li><li>Only an external host that receives a packet from an internal host can send a packet back.</li></ul><p>The description may not be clear enough. Check the figure instead. Now, the <em>eAddr:ePort</em> is no longer fixed. Symmetric NAT ensures that every (<em>iAddr:iPort</em>, <em>hAddr:hPort</em>) has a different (<em>eAddr:ePort</em>). So even if Server 2 knows (<em>eAddr:ePort</em>) from Server 1, it is unable to establish a connection with Client.</p><p><img src="/posts/Demystifying-NAT-in-P2P/Symmetric_NAT.svg" alt="Symmetric_NAT"></p><p>Unlike Cone ones, Symmetric NAT maintains a one-to-one relation between <em>iAddr:iPort</em> and <em>hAddr:hPort</em>, and it is why this type of NAT is named “Symmetric”.</p><p>You may complain about such strict limits, but it does improves security, as not everyone can access your private address. But Port Restricted Cone can also do it, why bother making it Symmetric? Referring to <a href="https://stackoverflow.com/questions/47919129/whats-the-advantage-of-symmetric-nat-as-far-as-isp-is-concerned">What’s the advantage of symmetric NAT (as far as ISP is concerned)?</a>, Symmetric NAT is easier to maintain. It does have a point, as all connections are unique, so the router only need to lookup the mapping once, while Port Restricted Cone has to check prior records. </p><h2 id="NAT-Traversal"><a href="#NAT-Traversal" class="headerlink" title="NAT Traversal"></a>NAT Traversal</h2><p>Just now, we assume the host to be a public server, it can be webpages we visit everyday. Then it comes the question, can we communicate with someone who is also behind a NAT router?</p><p>If you are in the same private network, i.e. under the same router, the answer is definitely yes. It is just LAN, Local Area Network, it is meant to be interconnective. The real challenge is, how to communicate with someone in another LAN.</p><p>In order to expose a private host, making it connectable from the outside world, we have, the “infamous” NAT Traversal. You may be more familiar with its alias, Hole Punching. This technique allows a private address to be located just like a public one. How is it possible?</p><p>First, let’s take Full Cone as example. We know that, the mapping will never change after creation. Since <em>eAddr</em> is a public IP, we can use <em>eAddr:ePort</em>, to access <em>iAddr:iPort</em>. We did it! Just one annoying problem, that you are not able to customize <em>eAddr:ePort</em> like what you can do with a real public address. Since the NAT router’s IP is unlikely to change and it may not flush the mapping often, the connection should be stable for quite a while.</p><p>The other two Cone NATs, as <em>iAddr:iPort</em> and <em>eAddr:ePort</em> is also bind together, can do it too, but only one <em>hAddr:hPort</em> (<em>hAddr:any</em> for Restricted Cone NAT) can access the exposed <em>eAddr:ePort</em>.</p><p>However, Symmetric NAT won’t be so lucky. As <em>eAddr:ePort</em> changes, it is impossible to establish a stable connection with private devices without some help.</p><h2 id="How-NAT-Impact-P2P"><a href="#How-NAT-Impact-P2P" class="headerlink" title="How NAT Impact P2P"></a>How NAT Impact P2P</h2><p>P2P, a.k.a. Peer-to-Peer, enables direct communication between two private devices. It is commonly used for gaming. The benefit of P2P is that it doesn’t require a central server for multiplayer game, where the player’s computer acts as the server. Even if there is a central server, it doesn’t require intensive computation.</p><p>Let’s consider the situation where there are two players. If both of them are lucky to have public IPs, things would be much easier as they can naturally connect with each other. If some one is behind a NAT, then things become tricky.</p><p>Here is a figure from <a href="https://support.dh2i.com/docs/Archive/kbs/general/understanding-different-nat-types-and-hole-punching/">Understanding Different NAT Types and Hole-Punching</a>, showing connectivity of two devices under different NAT.</p><p><img src="/posts/Demystifying-NAT-in-P2P/nat_types-81eca38551a438b10ae1bb6c16ba1aee.png" alt="Different NAT type combinations and whether or not they are routable."></p><p>P2P connection cannot be established with players alone, as two private devices are no way getting each other’s information. So usually an intermediate software helps in the establishment process. And once establishment completes, the players can communicate with each other directly.</p><div class="note info flat"><p>Actually, if one of them has public IP or is under Full Cone NAT, they can achieve P2P without any help. Just let the other one know their  address, and the problem solves. <strong>As long as one way connection establishes, P2P can work.</strong></p></div> <h2 id="Establishing-A-P2P-Connection"><a href="#Establishing-A-P2P-Connection" class="headerlink" title="Establishing A P2P Connection"></a>Establishing A P2P Connection</h2><p>So how does a P2P connection establishes?</p><p>First, let’s talk about P2P among Cones. You can see in the previous figure that they are all routable. So first, two players send a request to the intermediate server, so that the server knows their <em>eAddr:ePort</em>. Then the server can tell each player the other’s address, so that connection establishes. Since the mapping of <em>iAddr:iPort</em> and <em>eAddr:ePort</em> never (at least for long enough) changes, players are sure to find each other. Although the first request may fail, as Restricted Cone only allow incoming requests when there are outcoming ones before, the following requests can work. This process is usually called handshake.</p><p>Now, what about the Symmetric NAT? Since it will change <em>ePort</em> for different connection, only <em>eAddr</em> the server acquires is valid. So the actual request sending from the player behinds Symmetric NAT to the other player has a different, and is unknown <em>ePort</em>. So the counterpart must be Full Cone or Address Restricted Cone to accept the new port, and let Symmetric NAT find it first.</p><p>The intermediate server here is called STUN (Session Traversal Utilities for NAT), this is lightweight, and the server only helps in establishing the connection, and is not involved in the data transferring later.</p><p>If both players are behind Symmetric NAT, or Port Restricted Cone meets Symmetric NAT, then unfortunately, STUN is not enough. In this case, TURN (Traversal Using Relays around NAT) is required. TURN resolves this issue by relaying all requests, therefore it is resource intensive. However, for gaming, the communication overhead is usually insignificant, so it can be a solution.</p><div class="note info flat"><p>Well, there is one possibility though, for Port Restricted Cone and Symmetric NAT. If somehow you can guess the new port right, then yes, the connection is OK. But this is not practical, as there would be too many ports. It would be even harder to guess two ports if both are behind Symmetric NAT. </p></div><p>TURN server is not that common, so if unfortunately there is Symmetric NAT among players, you can try another approach &mdash; VPN.</p><hr><h1 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h1><p>Speaking of VPN, what is the first thing coming into your mind? Bypassing some restriction, or access some private resources?</p><h2 id="What-is-VPN"><a href="#What-is-VPN" class="headerlink" title="What is VPN"></a>What is VPN</h2><p>VPN stands for Virtual Private Network. It works by creating a virtual network under the VPN server, and allow users in this virtual network to connect with other networks. It’s quite like a Full Cone NAT, where the “NAT router” is now the VPN server. NAT traversal is still needed, but this time the host is the VPN server, so it doesn’t matter what types of NAT you are behind.</p><p>The primary goal of VPN is not for P2P connection, though. VPN is meant to create secure connections by hiding your IP and encrypting your network activity, and allow access for specific resources. Without a VPN, you connect with the outside world via the NAT router. Depending on your ISP, this NAT router may be poisoned. It may ban you from access certain resources on the Internet, or monitor your activity. <del>(Or using Symmetric NAT to prevent you from P2P)</del> Once the VPN connection is established, the client can access resources provided by the VPN server. And since the actual request is delegated to the VPN server with encryption, so your IP and network activity remains unknown to others, even your ISP.</p><p>However, VPN is virtual, which means it is not real. The actual packages still traverse through your NAT to&#x2F;from the VPN server, so the ISP knows that you are communicating with a VPN server. But since the packages are encrypted, the ISP does not know what you are doing, making it secure.</p><h2 id="How-VPN-Makes-P2P-Possible"><a href="#How-VPN-Makes-P2P-Possible" class="headerlink" title="How VPN Makes P2P Possible"></a>How VPN Makes P2P Possible</h2><p>Although VPN is a virtual network, which won’t changes your NAT situation, but it brings you and your friends into the same network. So that you and your friend can play in LAN mode, if both of you join the same VPN server. However, this is not real P2P, as requests are relayed by the VPN server, and all data is encrypted. So the connection may not be as fast as P2P via STUN. But it solves the Symmetric NAT problem.</p><p>Another bonus for using VPN is that, you can acquire a public IP. Like we talked about earlier, VPN also use NAT to manage the virtual network, so you will have a public address from the VPN. This way, you can play the Online mode with players behind other networks.</p><h2 id="VPN-or-Proxy"><a href="#VPN-or-Proxy" class="headerlink" title="VPN or Proxy"></a>VPN or Proxy</h2><p>If you have previous experience using proxy server, you may wonder the differences between these to terms. To put it simple, they work the same, except that VPN provides encryption while proxy does not. For proxy, you are only invisible to the internet, and all your activity is still monitored by the ISP. Also, proxy does not create a virtual network.</p><img src="https://ic.nordcdn.com/v1/https://sb.nordcdn.com/m/9fa0714107182332/original/blog-infographic-vpn-vs-proxy-process-comparison-svg.svg" alt="VPN vs Proxy process comparison" style="zoom: 33%;"><div class="note success flat"><p>For more details, you can refer to <a href="https://nordvpn.com/blog/vpn-vs-proxy/">Proxy vs VPN: What are the main differences?</a>.</p></div><hr><h1 id="Virtual-LAN-with-Zerotier"><a href="#Virtual-LAN-with-Zerotier" class="headerlink" title="Virtual LAN with Zerotier"></a>Virtual LAN with Zerotier</h1><p>If you just want connectivity with known devices, you can put them in a LAN. For devices in different areas, we can utilize tools like <a href="https://www.zerotier.com/">Zerotier</a> to create a virtual LAN, a.k.a. VLAN.</p><h2 id="Setting-Up-VLAN"><a href="#Setting-Up-VLAN" class="headerlink" title="Setting Up VLAN"></a>Setting Up VLAN</h2><p>The instructions on Zerotier’s website are quite clear, register an account and you are ready to create your network. Free plan allow a maximum of 25 devices in a network, which is sufficient in most cases. In the dashboard, you can get the network ID to join later. And I recommend you set it to private to prevent unwanted access. Later, in IPv4 Auto-Assign section, you can pick your preferred range.</p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425151905741.png" alt="Zerotier Settings" style="zoom:67%;"><p>If you want to enable broadcast and muti-cast, you can add routes <code>255.255.255.255/32</code> and <code>224.0.0.0/4</code>. This is usually needed by P2P games for player discovering.</p><p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425172803094.png" alt="image-20250425172803094"></p><p>Now, the network is set, and you can join it on your devices.</p><h2 id="Joining-VLAN"><a href="#Joining-VLAN" class="headerlink" title="Joining VLAN"></a>Joining VLAN</h2><p>Download Zerotier client <a href="https://www.zerotier.com/download/">here</a>. You can find it in the system tray. Click “Join New Network…”, and enter the network ID.</p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425152711322.png" alt="Join VLAN" style="zoom: 80%;"><p>If you set your network private, you need to approve it in the network dashboard. You can also find the assigned IP there. On your PC, you can check the assigned IP using <code>ipconfig</code> command. You can find an ethernet adapter called Zerotier One.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ethernet adapter ZeroTier One [<span class="number">4</span>***********<span class="number">0</span>]:</span><br><span class="line"></span><br><span class="line">   Connection<span class="literal">-specific</span> DNS Suffix  . :</span><br><span class="line">   Link<span class="literal">-local</span> IPv6 Address . . . . . : fe*************<span class="number">7</span></span><br><span class="line">   IPv4 Address. . . . . . . . . . . : <span class="number">10.147</span>.***.***</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">   Default Gateway . . . . . . . . . : <span class="number">25.255</span>.<span class="number">255.254</span></span><br></pre></td></tr></table></figure><p>Now, you are in the VLAN. If you have other devices in it, you can communicate with them.</p><h2 id="Launching-the-Moon"><a href="#Launching-the-Moon" class="headerlink" title="Launching the Moon"></a>Launching the Moon</h2><p>Zerotier achieves VLAN using NAT Traversal as we mentioned before to achieve P2P connection. So it also faces the routing problem. In case you have Symmetric NAT, Zerotier will relay the requests to ensure connectivity. It is nice of Zerotier to provide relay service, but the relay server is not reliable for free users. If you want stable connection, you can set up your own relay server.</p><div class="note info flat"><p>Zerotier is really good at naming. It’s own server is called planet, and self-hosted ones are called moon.</p></div><h3 id="Install-Zerotier"><a href="#Install-Zerotier" class="headerlink" title="Install Zerotier"></a>Install Zerotier</h3><div class="note warning flat"><p>Before you start, you need to allow UDP 9993 on your server, which is used by Zerotier.</p></div><p>First, install Zerotier on your server. The script is smart and will handle everything for you. By the way, all commands of Zerotier require <code>sudo</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://install.zerotier.com/ | sudo bash</span><br></pre></td></tr></table></figure><p>Then, you can check the server’s status.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zerotier-cli info</span><br></pre></td></tr></table></figure><p>If everything is fine, you can get the following response. The third column is node ID, which will be used later.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200 info 92******65 1.14.2 ONLINE</span><br></pre></td></tr></table></figure><p>If the status is not <code>ONLINE</code>, you can refer to <a href="#Zerotier-Troubleshoot">Troubleshoot</a> for solution.</p><h3 id="Configure-Moon"><a href="#Configure-Moon" class="headerlink" title="Configure Moon"></a>Configure Moon</h3><p>Now, we will convert the Zerotier node on the server into a Moon.</p><p>First, we need to get a initial configuration file, which is the identity of the node.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zerotier-idtool initmoon /var/lib/zerotier-one/identity.public &gt; moon.json</span><br></pre></td></tr></table></figure><p>Open <code>moon.json</code>, add your server’s public IP as a stable endpoint.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> ...</span><br><span class="line"> <span class="attr">&quot;roots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="attr">&quot;stableEndpoints&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;***.***.***.***/9993&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Then, we can generate the final configuration using this <code>moon.json</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zerotier-idtool genmoon moon.json</span><br></pre></td></tr></table></figure><p>It will generate a <code>*.moon</code> file. Copy it to <code>/var/lib/zerotier-one/moons.d/</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/lib/zerotier-one/moons.d/</span><br><span class="line">sudo <span class="built_in">cp</span> *.moon /var/lib/zerotier-one/moons.d/</span><br></pre></td></tr></table></figure><p>Now, restart Zerotier service, and the configuration is done.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart zerotier-one.service</span><br></pre></td></tr></table></figure><h3 id="Orbiting-Around-the-Moon"><a href="#Orbiting-Around-the-Moon" class="headerlink" title="Orbiting Around the Moon"></a>Orbiting Around the Moon</h3><p>The moon does not have to be a node in the VLAN. We just need to orbit around it. In each node in the VLAN, run the following command to add the Moon. The <code>&lt;moon id&gt;</code> is what you get via <code>zerotier-cli info</code> on the server.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zerotier<span class="literal">-cli</span> orbit &lt;moon id&gt; &lt;moon id&gt;</span><br></pre></td></tr></table></figure><p>If everything is OK, it will return <code>200 orbit OK</code>. Wait a few seconds, and you can use <code>zerotier-cli listmoons</code> to see it. You can also see it using <code>zerotier-cli listpeers</code> with role as <code>MOON</code>. To deorbit a moon, you can use <code>zerotier-cli deorbit &lt;moon-id&gt;</code>.</p><div class="note info flat"><p>All Zerotier commands require administrative privileges. On Windows, you can use <code>sudo</code>, which is added in Windows 11. Or press <code>Win + X</code> to run terminal as Administrator. </p></div><p>Congratulations, you now have a low-ping VLAN ready to go! </p><h2 id="Zerotier-Troubleshoot"><a href="#Zerotier-Troubleshoot" class="headerlink" title="Zerotier Troubleshoot"></a>Zerotier Troubleshoot</h2><p>If the status is <code>TUNNELED</code> instead of <code>ONLINE</code>, it is probably that the node is not able to connect the planet server. Check if UDP 9993 is allowed. If UFW is enabled, you can allow it with the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 9993/udp</span><br></pre></td></tr></table></figure><p>Then, restart Zerotier service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart zerotier</span><br></pre></td></tr></table></figure><p>Now, check again, it should be <code>ONLINE</code>.</p><hr><h1 id="VPN-with-OpenVPN"><a href="#VPN-with-OpenVPN" class="headerlink" title="VPN with OpenVPN"></a>VPN with OpenVPN</h1><p>Zerotier is essentially a networking utility that helps you better manage virtual network. If you want to use it for communicating with other networks, you have to configure routers within the created virtual LAN. In this case, setting up a VPN could be a better choice.</p><div class="note warning flat"><p>Well, to setup your own VPN, you need a public server. It is quite easy to get one nowadays. You can purchase a ECS or VPS, or use some free ones.</p></div><p>Of course, you can buy VPN services from those companies. But they are usually expensive, and may not be legal in some countries as they provide access for forbidden resources. In this case, getting your own VPN server could be an alternative. For personal use, <a href="https://openvpn.net/">OpenVPN</a> is a perfect solution, as it is opensource and free. </p><h2 id="Install-OpenVPN-Server"><a href="#Install-OpenVPN-Server" class="headerlink" title="Install OpenVPN Server"></a>Install OpenVPN Server</h2><p>First, get the OpenVPN installer script. See <a href="https://github.com/Nyr/openvpn-install">openvpn-install</a> for more details. <a href="https://git.io/vpn">https://git.io/vpn</a> is merely a shortcut for the <a href="https://github.com/Nyr/openvpn-install/blob/master/openvpn-install.sh">openvpn-install.sh</a> in the master branch. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://git.io/vpn -O openvpn-install.sh</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>If your server has connection issues with GitHub, see <a href="#OpenVPN-Troubleshoot">Troubleshoot</a> for workarounds.</p></div><p>Then, execute the installer. It requires <code>sudo</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash openvpn-install.sh</span><br></pre></td></tr></table></figure><p>It will ask you the following questions. You can choose default values, but I recommend you change the default port.</p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425113159582.png" alt="Setup OpenVPN Server" style="zoom:67%;"><div class="note info flat"><p>Remember to open the port to allow UDP on your server provider’s dashboard. Also you may need to use <code>ufw</code> to open the port.</p></div><p>If nothing goes wrong, you’ll see the client creation that ended with “Finished!”. And you will get a file with extension <code>ovpn</code>. Later, when you want to add new users, just execute <code>openvpn-install.sh</code> again, and you will have the options.</p><p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425120859678.png" alt="image-20250425120859678"></p><p>Good, you now have your own VPN server.</p><h2 id="Install-OpenVPN-Client"><a href="#Install-OpenVPN-Client" class="headerlink" title="Install OpenVPN Client"></a>Install OpenVPN Client</h2><p>Now, you need the VPN client on your PC. You can get the installer at <a href="https://openvpn.net/community-downloads/">Community Downloads</a>. Remember to tick OpenSSL Utilities on installation.</p><p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425112024295.png" alt="Setup OpenVPN"></p><p>On your first launch, you may see a dialog saying no config file found. Of course, you have to import one. Download the <code>ovpn</code> file you get on your server, and import it. You can find it in the system tray.</p><p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425121514045.png" alt="Import"></p><p>After importing the configuration, you can connect with the VPN server. Now, you can use websites like <a href="https://www.showmyip.com/">ShowMyIP</a> to check if your IP really changes or not.</p><h2 id="OpenVPN-Troubleshoot"><a href="#OpenVPN-Troubleshoot" class="headerlink" title="OpenVPN Troubleshoot"></a>OpenVPN Troubleshoot</h2><p>Utilizing our knowledge, you can use existing proxy or VPN on your own PC to download the stuffs, then transfer them to your server. However, when you executing the installer, you may still get stuck. It is because inside the installer, it requests EasyRSA, which is also on GitHub. So you may have to modify the script.</p><p>Open <code>openvpn-installer.sh</code>, find <code>easy_rsa_url</code>. You can see that it fetches EasyRSA-3.2.2.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">easy_rsa_url=<span class="string">&#x27;https://github.com/OpenVPN/easy-rsa/releases/download/v3.2.2/EasyRSA-3.2.2.tgz&#x27;</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/openvpn/server/easy-rsa/</span><br><span class="line">&#123; wget -qO- <span class="string">&quot;<span class="variable">$easy_rsa_url</span>&quot;</span> 2&gt;/dev/null || curl -sL <span class="string">&quot;<span class="variable">$easy_rsa_url</span>&quot;</span> ; &#125; | tar xz -C /etc/openvpn/server/easy-rsa/ --strip-components 1</span><br></pre></td></tr></table></figure><p>Instead of requesting it, you can manually download it and put it somewhere. Comment out <code>wget</code> and goes directly to extract.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">easy_rsa_url=<span class="string">&#x27;https://github.com/OpenVPN/easy-rsa/releases/download/v3.2.2/EasyRSA-3.2.2.tgz&#x27;</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/openvpn/server/easy-rsa/</span><br><span class="line"><span class="comment"># &#123; wget -qO- &quot;$easy_rsa_url&quot; 2&gt;/dev/null || curl -sL &quot;$easy_rsa_url&quot; ; &#125; | tar xz -C /etc/openvpn/server/easy-rsa/ --strip-components 1</span></span><br><span class="line"><span class="built_in">cat</span> /path/to/EasyRSA-3.2.2.tgz | tar xz -C /etc/openvpn/server/easy-rsa/ --strip-components 1</span><br></pre></td></tr></table></figure><p>Now, there should be no more network issues.</p><hr><h1 id="Have-Fun🎉"><a href="#Have-Fun🎉" class="headerlink" title="Have Fun🎉"></a>Have Fun🎉</h1><p>Now, we know what’s going on with NAT, it’s time for gaming!🎮</p><p>Take Command &amp; Conque 3: Kane’s Wrath as an example. It is a classic RTS game with P2P for multiplayer. As we know, P2P require NAT Traversal, or Hole Punching, which can be a problem if players are in different networks. Especially after <a href="https://www.techspot.com/article/2170-gamespy/">the shutdown of GameSpy</a>.</p><p>Luckily, there is other services to keep P2P games. One of them is <a href="https://www.gameranger.com/">GameRanger</a>. It configures NAT Traversal using STUN so that you can play in LAN. But since it uses STUN, it fails if one of you is behind Symmetric NAT and the other is not Full Cone or (Address) Restricted Cone. It is suitable for close friends, as it doesn’t have lobby, which means you have to call your friends in real life.</p><p>The other is <a href="https://cnc-online.net/en/">C&amp;C:Online</a> supported by Revora, the substitution of GameSpy, allowing you to play Online with players all over the world. So now you should realize, it requires public IP to play online. So you should either have one, or use VPN.</p><p>Here, with all we gathered earlier, I present you two methods, and it should work for all P2P games.</p><p>If you feel OK to play in LAN, you can simply use GameRanger. It is easy to use, no configuration required. However, if you encounter Symmetric NAT, you can setup Zerotier for relaying. Of course, using VPN can also allow you to play in LAN, as long as you and your friends connect to the same VPN server.</p><p>However, if you want to play Online, you have to use VPN. And to ensure a more stable connection, you should better have a static public IP. If you set up your own VPN server, then of course, your public IP is fixed. But if you purchase VPN services, you may check if they have this option.</p><p>Whether you use Zerotier or VPN, you need to change the Online IP in Settings to the assigned IP in the virtual network. Then, you can just go LAN or Online.</p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425132802128.png" alt="image-20250425132802128" style="zoom: 50%;"><h2 id="Play-with-Zerotier"><a href="#Play-with-Zerotier" class="headerlink" title="Play with Zerotier"></a>Play with Zerotier</h2><p>To just play in LAN, you can use Zerotier. All players should have Zerotier client, and join the same VLAN. If you have self-hosted moon, then all players should add it. See <a href="#Orbiting-Around-the-Moon">Orbiting Around the Moon</a>. Then, just open the game and play in LAN.</p><p>If you are unable to see your friends in the lobby, you probably forgot to allow broadcast in your network. See <a href="#Setting-Up-VLAN">Setting Up VLAN</a> to add broadcast routes.</p><p>A notable issue for Kane’s Wrath is that, the game is buggy for Network games. It will always choose the “smallest” IP address available, regardless of the Online IP you select in Network Options. So in order to let the game choose the correct IP, you need to ensure the IPs in the IPv4 Auto-Assign range you selected are smaller than your other IPs.</p><div class="note info flat"><p>When I say “smallest”, I mean, the smallest. Just compare each part from left to right. Or, for Kane’s Wrath, the first in your Online IP list.</p></div><h2 id="Play-with-VPN"><a href="#Play-with-VPN" class="headerlink" title="Play with VPN"></a>Play with VPN</h2><p>Of course, you can setup your own VPN server. You can add more accounts for your friends so they can connect to your VPN server to play in LAN. But for those who don’t have a public server, using the default server provided by <a href="https://cgf-uploads.net/">Command Post</a> can be an alternative. But not all games have this convenience.</p><img src="/posts/Demystifying-NAT-in-P2P/image-20250425133537822.png" alt="Command Post VPN" style="zoom: 67%;"><p>Of course, self-hosted VPN can be faster. Also, you can play Online with your own VPN server.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Isn’t it great to be able to play P2P games? But the point is that, we now know what is going on, instead of just complaining about the NAT. It’s been about two years since I first encountered this problem, and now, finally, the problem is resolved. Good luck, have fun!ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Miscellany </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> NAT </tag>
            
            <tag> VPN </tag>
            
            <tag> Zerotier </tag>
            
            <tag> OpenVPN </tag>
            
            <tag> P2P </tag>
            
            <tag> Command &amp; Conquer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thoughts on Black Hand Strategy</title>
      <link href="/posts/Thoughts-on-Black-Hand-Strategy/"/>
      <url>/posts/Thoughts-on-Black-Hand-Strategy/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;The Black Hand is in control.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Black Hand</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Well, as I mentioned in the other post <a href="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/">Kane’s Wrath Launch Error Troubleshoot</a>, I’m a <strong>BIG</strong> fan of Kane’s Wrath. It keeps the C&amp;C tradition with nine specialized factions and my personal favorite is the <a href="https://cnc.fandom.com/wiki/Black_Hand">Black Hand</a>.</p><p>I play PVE the most, and is able to defeat brutal enemies with a fair winning ratio. Recently I made some progress to make this ratio close to 100% by adjusting my strategy. So, here I’d like to make a summary of my experience with the Black Hand.</p><div class="note info flat"><p>All my game recordings can be found at Bilibili: <a href="https://space.bilibili.com/2030942344/lists/1652620">Command &amp; Conquer 3: Kane’s Wrath</a>.</p></div><hr><h1 id="Strategies"><a href="#Strategies" class="headerlink" title="Strategies"></a>Strategies</h1><p>No matter what strategy you use, there is something to keep in your mind.</p><ul><li><strong>Economy is crucial</strong>, so ensure your income in the early game, and transit to other expansions in time.</li><li><strong>Scout regularly</strong> to know your opponent’s move.</li><li><strong>T1 unit</strong> is important at early game.</li></ul><div class="note info flat"><p>A small tip for you, keep at least <strong>9 harvesters</strong> for a steady late-game income.</p></div><p>Now comes the strategy. I’ll focus on the idea only as the battlefield can be complicated. So, good luck, have fun! 😎</p><h2 id="Early-Game-Rush"><a href="#Early-Game-Rush" class="headerlink" title="Early-Game Rush"></a>Early-Game Rush</h2><div class="note warning flat"><p>Only rush your enemy on small maps. ⚠️</p></div><p>Black Hand has the most fierce ground unit in game, which is effective for early-game rush. To rush your enemy, you can open the game with the following steps.</p><ul><li>2 ~ 3 Confessors for scout</li><li>Refinery</li><li>War Factory + 1 Harvester</li><li>Operation Center + Liquid Tiberium Core</li><li>Flame Tank &times; N</li></ul><p><strong>Scout is important</strong> to find weakness in your enemy’s defense. When your Flame Tanks are ready, let them <strong>sneak</strong> into your opponent’s base. At the same time, you can also build a Reckoner, and put in one or two Black Hand squad to assist your Flame Tanks.</p><div class="note success flat"><p>You can get a discount Black Hand squad by selling Operation Center.</p></div><p>Usually, you can just burn down the computer’s base and enjoy the victory. If not, you are at risk as your economy will be far behind your enemy.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><div style="text-align:center"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1405704893&bvid=BV196421f7Rb&cid=1574252602&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><div style="text-align:center"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1553644907&bvid=BV1H1421R74S&cid=1522327856&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><h3 id="What-to-do-if-you-failed-to-rush"><a href="#What-to-do-if-you-failed-to-rush" class="headerlink" title="What to do if you failed to rush"></a>What to do if you failed to rush</h3><p>Don’t get panic, just sell your Operation Center, build a second Refinery and more Harvesters. If possible, use the scouts to keep an eye on your opponent and build T1 units in reaction to possible attacks.</p><h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>Rush is good, but you should be aware that brutal enemies have doubled income, and build faster. Once the rush fails, you will probably be overwhelmed by an endless army.</p><h2 id="Standard"><a href="#Standard" class="headerlink" title="Standard"></a>Standard</h2><p>This is what I recently developed, and it works well with zero defeat. Unlike rushing, you <strong>focus on your economy</strong> in this strategy. So, the opening can be a little different.</p><ul><li>2 ~ 3 Confessors for scout</li><li>Refinery</li><li>War Factory</li><li>Refinery</li><li>Harvesters &times; 2 + Raider Buggy &times; 1 + Harvester &times; 2</li><li>Move MCV to your second expansion</li></ul><p>Now you can see the difference, <strong>we prioritize harvesting here</strong>. If you are out of money when building the second refinery,  which is most likely, offline your War Factory to pause vehicle production. Also, you will run out of power after when the second Refinery is down, but don’t worry, just move your MCV. You will have enough money when you reach the second expansion, where you build a third Refinery.</p><p>Economy is only one part, the other is scouting. Make sure you see more than 50% of the mini map, or at least have visual on the paths that your opponent most likely to invade. The Raider Buggy you built is the perfect choice to scout enemy base.</p><p><strong>Don’t go for tech too soon.</strong> Build some T1 units such as Scorpion Tank and Raider Buggy to prevent or stop early attacks. At the same time, prepare to move to your third expansion (most 1v1 maps have three Tiberium fields for each player).</p><p>When you have a third expansion, you can prepare your army. Depends on the faction of your opponent, you may have different choices for units. In most cases, Confessors and Rocket Militant with Black Disciple and Purifying Flame upgrade is the silver bullet. As for Purifiers, 3 to 5 are enough. If the air is a problem, build some Mantis. If economy allows, you can build a Redeemer. And that’s it, victory awaits.</p><h3 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h3><p>This is the first recorded game using this strategy.</p><div style="text-align:center"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=114080052413281&bvid=BV1ic9gYhEhw&cid=28615969764&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Anyway, I’m still very low. Just enough to entertain myself, I guess. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command &amp; Conquer </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Modern TypeScript Project</title>
      <link href="/posts/Setup-Modern-TypeScript-Project/"/>
      <url>/posts/Setup-Modern-TypeScript-Project/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;Failure means you've now learned another valuable lesson that pushes you one step closer to success.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Steve Harvey</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In the last post (<a href="/posts/Understanding-TypeScript-Philosophy/">Understanding TypeScript Philosophy</a>), I talked about some thoughts on TypeScript. Then, I think there should better be another post about how to actually setup a good TypeScript project. Well, in this post, I’m going to show you the way.😉</p><p>Before I start, I’d like to express my gratitude for the following articles, which inspired me a lot.🙏</p><ul><li><a href="https://simonboisset.com/blog/create-typescript-library-tsup">How to Create Your Own TypeScript Library in 2024: A Step-by-Step Guide</a></li><li><a href="https://www.tsmean.com/articles/how-to-write-a-typescript-library/local-consumer/">Create a consumer for your library</a></li></ul><p>As we know, “talk is cheap, show me the code”. In this post, I’ll show you with a demo project consisting of one application (<code>app</code>) and two libraries (<code>lib-a</code> and <code>lib-b</code>). All code of this post is available at <a href="https://github.com/Lord-Turmoil/TypeScriptDemo">TypeScriptDemo</a>. Since it involves multiple projects, and it is inconvenient for you to jump back and forth between repositories, I use a <a href="https://en.wikipedia.org/wiki/Monorepo">monorepo</a> to place them together.</p><div class="note info flat"><p>Well, to start with TypeScript development, you must have <a href="https://nodejs.org/">Node.js</a> environment ready. You should know it, though.</p></div><hr><h1 id="Basic-Setup"><a href="#Basic-Setup" class="headerlink" title="Basic Setup"></a>Basic Setup</h1><h2 id="Initializing-workspace"><a href="#Initializing-workspace" class="headerlink" title="Initializing workspace"></a>Initializing workspace</h2><p>Let’s take <code>app</code> for example. Create a directory called <code>app/</code> as project root directory, and execute the following command in it. If you just want a quick initialization, add <code>-y</code> option.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>After that, you will get a <code>package.json</code> under <code>app/</code>. Don’t worry about the content, as we will modify it later.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo application&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;demo&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tony S.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Installing-necessary-packages"><a href="#Installing-necessary-packages" class="headerlink" title="Installing necessary packages"></a>Installing necessary packages</h2><p>First, install TypeScript support and a build tool <a href="https://tsup.egoist.dev/">tsup</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript tsup</span><br></pre></td></tr></table></figure><p>For better code style, you can install ESLint.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint @eslint/js typescript typescript-eslint</span><br></pre></td></tr></table></figure><h2 id="About-npm-install"><a href="#About-npm-install" class="headerlink" title="About npm install"></a>About <code>npm install</code></h2><p>You may have confusion about this <code>--save-dev</code> (a.k.a. <code>-D</code>) option. It is a flag indicating that the installed packages are only needed during development. That is to say, they only boost your productivity and are not required by the application itself. For example, <code>typescript</code> is only needed to compile your TypeScript code into JavaScript, then the only thing you need at production is the JavaScript.</p><div class="note success flat"><p>Check out more information with <code>npm help install</code>.</p></div><hr><h1 id="Create-Your-Application"><a href="#Create-Your-Application" class="headerlink" title="Create Your Application"></a>Create Your Application</h1><h2 id="Initializing-project-structure"><a href="#Initializing-project-structure" class="headerlink" title="Initializing project structure"></a>Initializing project structure</h2><p>Before we write any code, let’s create some files. It is a classic TypeScript project structure, you put all your source files under <code>src/</code>, with some configuration files.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">|-- src</span><br><span class="line">|   `-- index.ts</span><br><span class="line">|-- eslint.config.mjs</span><br><span class="line">|-- package.json</span><br><span class="line">|-- tsconfig.json</span><br><span class="line">`-- tsup.config.ts</span><br></pre></td></tr></table></figure><h2 id="Filling-configurations"><a href="#Filling-configurations" class="headerlink" title="Filling configurations"></a>Filling configurations</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>The most important changes here are <code>main</code> and <code>scripts</code>. You can fill other fields as you wish, and you can also add repository stuff here.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo application&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsup&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node dist/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;demo&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tony S.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/Lord-Turmoil/TypeScriptDemo&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/Lord-Turmoil/TypeScriptDemo/issues&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/Lord-Turmoil/TypeScriptDemo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>For more information about <code>package.json</code>, see <a href="https://docs.npmjs.com/cli/v10/configuring-npm/package-json">npm Docs - package.json</a>.</p></div><h3 id="tsup-config-ts"><a href="#tsup-config-ts" class="headerlink" title="tsup.config.ts"></a>tsup.config.ts</h3><p>This file is how you want your project to be built. For our simple project, the following configuration should be sufficient.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;tsup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">entry</span>: [<span class="string">&quot;src/index.ts&quot;</span>],</span><br><span class="line">    <span class="attr">format</span>: [<span class="string">&quot;cjs&quot;</span>, <span class="string">&quot;esm&quot;</span>],</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Here, each file in <code>entry</code> will be compiled and bundled into one standalone JavaScript file, so we can run them with <code>node</code>. We set <code>clean</code> to true to clean the output directory (by default is <code>dist/</code>) before each build to delete out old files.</p><p>I know I missed <code>format</code>, for which you can refer to <a href="https://antfu.me/posts/publish-esm-and-cjs">Ship ESM &amp; CJS in one Package</a> and <a href="https://dev.to/iggredible/what-the-heck-are-cjs-amd-umd-and-esm-ikm">What the heck are CJS, AMD, UMD, and ESM in Javascript?</a>. For CJS, tsup will output <code>index.js</code>, and for ESM, tsup will output <code>index.mjs</code>. Since we simply run <code>.js</code>, ESM option is not necessary here.</p><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><p>This file configures some common TypeScript properties., you can just copy it.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;src&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;**/*.test.ts&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;dom&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;declaration&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;~/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;src/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>One thing I’d like to say is <code>lib</code> under <code>compilerOptions</code>. If you want to use <code>console.log</code>, you should have <code>dom</code> included.</p><p>Also, you may pay attention to <code>baseUrl</code> and <code>paths</code> under <code>compilerOptions</code>, they configures the path alias so you can use absolute path in your project.</p><div class="note success flat"><p>Sounds familiar? Reminds you of <a href="/posts/Configure-Path-Aliases-in-React-Vue-with-Vite/">Configure Path Aliases in React&#x2F;Vue With Vite</a>?😁</p></div><div class="note info flat"><p>For more information about <code>tsconfig.json</code>, check out <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">What is a tsconfig.json</a>.</p></div><h3 id="eslint-config-mjs"><a href="#eslint-config-mjs" class="headerlink" title="eslint.config.mjs"></a>eslint.config.mjs</h3><p>This file defines ESLint rules, and is quite subjective. Here is my preference, force semi-colon and double quotes.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eslint <span class="keyword">from</span> <span class="string">&quot;@eslint/js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> tseslint <span class="keyword">from</span> <span class="string">&quot;typescript-eslint&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> tseslint.<span class="title function_">config</span>(</span><br><span class="line">  eslint.<span class="property">configs</span>.<span class="property">recommended</span>,</span><br><span class="line">  tseslint.<span class="property">configs</span>.<span class="property">recommended</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">      <span class="attr">semi</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">      <span class="attr">quotes</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;double&quot;</span>, &#123; <span class="string">&quot;avoidEscape&quot;</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Check out <a href="https://eslint.org/docs/latest/use/configure/configuration-files">ESLint - Configuration Files</a> for more information.</p></div><h2 id="Write-the-code"><a href="#Write-the-code" class="headerlink" title="Write the code"></a>Write the code</h2><p>Since our topic today is project setup, the code we write doesn’t matter. We can put it simple here, and add our library later.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">message</span>: <span class="built_in">string</span> = <span class="string">&quot;Hello, welcome to this demo application!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br></pre></td></tr></table></figure><p>Then, you can build and run the project with the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>Great, you now have a good-looking TypeScript application!🎊</p><hr><h1 id="Create-Your-Library"><a href="#Create-Your-Library" class="headerlink" title="Create Your Library"></a>Create Your Library</h1><p>A library is pretty much the same as application, only some slight differences in configuration.</p><h2 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h2><p>For a TypeScript library, you need to specify some extra entries in <code>package.json</code>, which is <code>module</code> and <code>types</code>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lib-a&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Demo library A&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.mjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsup&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Then, for <code>tsup.config.ts</code>, we need to add an extra option to generate that <code>d.ts</code>. Also, as we now need <code>.mjs</code>, we need both CJS and ESM here.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;tsup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">entry</span>: [<span class="string">&quot;src/index.ts&quot;</span>],</span><br><span class="line">    <span class="attr">format</span>: [<span class="string">&quot;cjs&quot;</span>, <span class="string">&quot;esm&quot;</span>],</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">dts</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Other configuration files are the same, and you can initialize two libraries with the same method.</p><div class="note danger flat"><p>In fact, as will introduced later, <code>lib-b</code> will depends on <code>lib-a</code>, which will introduce an unwanted behavior later using the <code>tsup.config.ts</code> given here. I will explain it later when we actually see it.</p></div><h2 id="Local-dependency"><a href="#Local-dependency" class="headerlink" title="Local dependency"></a>Local dependency</h2><p>The reason we have two libraries here is to demonstrate a more complex scenario. In this case, <code>lib-a</code> is the core library, and <code>lib-b</code> is a application library on <code>lib-a</code>, then our application will refer to both of these libraries.</p><p>Since the packages are still under development, we cannot use <code>npm install</code> to install them. For now, we have to link them locally. This requires the package be added to global package first. To do this, run <code>npm link</code> under the library project. In our demo, you need to run <code>npm link</code> under both <code>lib-a</code> and <code>lib-b</code>.</p><div class="note warning flat"><p>I’m not sure about this, but somehow adding global package may ask for administrative permission. So you can run it with <code>sudo</code>.</p></div><div class="note info flat"><p>Did you know that? The latest Windows 11 has <code>sudo</code> command, too!🙌</p></div><p>Then, to “install” local package, run <code>npm link &lt;package&gt;</code> under the project that reference it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># under lib-b/</span></span><br><span class="line">npm <span class="built_in">link</span> lib-a</span><br><span class="line"><span class="comment"># under app/</span></span><br><span class="line">npm <span class="built_in">link</span> lib-a lib-b</span><br></pre></td></tr></table></figure><p>Local packages will not be added to <code>package.json</code>, as they are not accessible for <code>npm install</code>. And because of this, they will be <strong>removed</strong> after you run <code>npm install</code> or <code>npm link &lt;some other package&gt;</code>. Therefore, you need to specify all local packages in one <code>npm link ...</code> command, and rerun it after you install other packages.</p><p>To update a local package, just re-build it. If you want to unlink local packages, just run <code>npm install</code> again. And if you want to delete a local package, run <code>npm unlink</code> where you ran <code>npm link</code>.</p><h2 id="Write-the-code-1"><a href="#Write-the-code-1" class="headerlink" title="Write the code"></a>Write the code</h2><h3 id="lib-a"><a href="#lib-a" class="headerlink" title="lib-a"></a>lib-a</h3><p><code>lib-a</code> is our core library, with low-level definitions. Although it is simple, I used a slight verbose structure to demonstrate module management.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">|-- lib</span><br><span class="line">|   |-- index.ts</span><br><span class="line">|   `-- Phantom.ts</span><br><span class="line">`-- index.ts</span><br></pre></td></tr></table></figure><p>In order to keep the top-level <code>index.ts</code> clean and ordered, you can create “barrel files” under each folder. This way, you won’t have a huge and messy <code>index.ts</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./Phantom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib/Phantom.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Phantom</span> &#123;</span><br><span class="line">    <span class="attr">line</span>: <span class="built_in">string</span>; <span class="comment">// a line in the musical</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected to be a singleton</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ThePhantom</span>: <span class="title class_">Phantom</span> = &#123;</span><br><span class="line">    <span class="attr">line</span>: <span class="string">&quot;Sing, my Angel of Music!&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./lib&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="lib-b"><a href="#lib-b" class="headerlink" title="lib-b"></a>lib-b</h3><p>As we already have a demo for project structure, we just write our stuff in <code>index.ts</code> here.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Phantom</span>, <span class="title class_">ThePhantom</span> &#125; <span class="keyword">from</span> <span class="string">&quot;lib-a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sing</span>(<span class="params">phantom: Phantom</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Phantom: <span class="subst">$&#123;phantom.line&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defaultSing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">sing</span>(<span class="title class_">ThePhantom</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>Note the use of global singleton <code>ThePhantom</code> here. Is it really a singleton?🤔</p></div><h2 id="Use-the-library"><a href="#Use-the-library" class="headerlink" title="Use the library"></a>Use the library</h2><p>Now, let’s add our libraries to the application. Run <code>npm link lib-a lib-b</code> under <code>app/</code>. Then, we can update our <code>src/index.ts</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Phantom</span>, <span class="title class_">ThePhantom</span> &#125; <span class="keyword">from</span> <span class="string">&quot;lib-a&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defaultSing, sing &#125; <span class="keyword">from</span> <span class="string">&quot;lib-b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">phantom</span>: <span class="title class_">Phantom</span> = &#123;</span><br><span class="line">    <span class="attr">line</span>: <span class="string">&quot;Sing once again with me&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defaultSing</span>();  <span class="comment">// Sing, my Angel of Music!</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">sing</span>(phantom);  <span class="comment">// Sing once again with me</span></span><br><span class="line"><span class="title class_">ThePhantom</span>.<span class="property">line</span> = <span class="string">&quot;Our strange duet&quot;</span>;</span><br><span class="line"><span class="title function_">defaultSing</span>();  <span class="comment">// Our strange duet ???</span></span><br></pre></td></tr></table></figure><p>What will it output? The same as the comment? Run <code>npm run start</code>, and we get this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Phantom: Sing, my Angel of Music!</span><br><span class="line">Phantom: Sing once again with me</span><br><span class="line">Phantom: Sing, my Angel of Music!</span><br></pre></td></tr></table></figure><p>How is this possible?😱We did modified the singleton, why does <code>defaultSing()</code> still output the same line?</p><h2 id="Module-Duplication"><a href="#Module-Duplication" class="headerlink" title="Module Duplication"></a>Module Duplication</h2><p>It seems to be supernatural. Well, the code tells no lie, so let’s check the final output JavaScript file at <code>app/dist/index.js</code>. Aha, there are two phantoms!😯Now you probably know why.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ../lib-a/dist/index.mjs</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ThePhantom</span> = &#123;</span><br><span class="line">  <span class="attr">line</span>: <span class="string">&quot;Sing, my Angel of Music!&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ../lib-b/dist/index.mjs</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ThePhantom2</span> = &#123;</span><br><span class="line">  <span class="attr">line</span>: <span class="string">&quot;Sing, my Angel of Music!&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Since <code>lib-b</code> depends on <code>lib-a</code>, tsup will bundle <code>lib-a</code> into <code>lib-b</code>. Therefore when <code>app</code> references both <code>lib-a</code> and <code>lib-b</code>, <code>app</code> and <code>lib-b</code> will use their own copy of <code>lib-a</code>, causing the duplication.</p><p>Luckily, there is solution for this, which is quite straightforward. Just mark <code>lib-a</code> external in <code>lib-b</code> so that they won’t be bundled together. The modified <code>tsup.config.ts</code> is as follows, with <code>lib-a</code> in <code>external</code> field.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;tsup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">entry</span>: [<span class="string">&quot;src/index.ts&quot;</span>],</span><br><span class="line">    <span class="attr">format</span>: [<span class="string">&quot;cjs&quot;</span>, <span class="string">&quot;esm&quot;</span>],</span><br><span class="line">    <span class="attr">external</span>: [<span class="string">&quot;lib-a&quot;</span>],</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">dts</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now, rebuild <code>lib-b</code> and <code>app</code>, you will see the expected output.😆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Phantom: Sing, my Angel of Music!</span><br><span class="line">Phantom: Sing once again with me</span><br><span class="line">Phantom: Our strange duet</span><br></pre></td></tr></table></figure><p>Congratulations! Now you are able to write impressive TypeScript projects!🎉</p><hr><h1 id="Trivia"><a href="#Trivia" class="headerlink" title="Trivia"></a>Trivia</h1><h2 id="Unit-testing"><a href="#Unit-testing" class="headerlink" title="Unit testing"></a>Unit testing</h2><p>Still, to make this article complete, I’d like to talk about unit testing. Here, we use <a href="https://vitest.dev/">Vitest</a>. Since testing is usually for library, we just add it to <code>lib-b</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev vitest</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Don’t forget to re-link <code>lib-a</code> after installing <code>vitest</code>.😉</p></div><p>Then, create <code>vitest.config.ts</code> under <code>lib-b/</code>.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vitest/config&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">test</span>: &#123;</span><br><span class="line">    <span class="attr">globals</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">environment</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Then, add a script to <code>package.json</code>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vitest run&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Finally, we can write the test file, let’s call it <code>test/index.test.ts</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; expect, test &#125; <span class="keyword">from</span> <span class="string">&quot;vitest&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defaultSing, sing &#125; <span class="keyword">from</span> <span class="string">&quot;../src/index&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;sing&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">sing</span>(&#123; <span class="attr">line</span>: <span class="string">&quot;Sing&quot;</span> &#125;)).<span class="title function_">toBe</span>(<span class="string">&quot;Sing&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;default sing&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(<span class="title function_">defaultSing</span>()).<span class="title function_">toBe</span>(<span class="string">&quot;Sing, my Angel of Music!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now, run <code>npm run test</code>, you can see two passed tests.</p><h2 id="Publishing-your-package"><a href="#Publishing-your-package" class="headerlink" title="Publishing your package"></a>Publishing your package</h2><p>Eventually, if you have some good packages for others to use, you can publish them to npm registry.</p><p>First, register an account at <a href="https://www.npmjs.com/">npmjs.com</a>. Then, just run the following commands.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>There you go. Now your package can be accessed by developers all over the world!🌏</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Perhaps a forced habit, I just want to do things right, and always pursue the best practice. Is it good? You tell me. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Repo Available </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scam From Your Own Email Address</title>
      <link href="/posts/Scam-From-Your-Own-Email-Address/"/>
      <url>/posts/Scam-From-Your-Own-Email-Address/</url>
      
        <content type="html"><![CDATA[<h1 id="The-scam"><a href="#The-scam" class="headerlink" title="The scam"></a>The scam</h1><p>It has been annoying for the last few months. My email is somehow leaked, and there are unauthorized attempts to login to my account every day. I can see the suspicious activities, but there is nothing I can do to stop it.😡</p><p>I was unaware of such attack at first, until I received this email, <strong>from my email address</strong>.</p><blockquote><p><strong>You have been hacked!</strong></p><p><em>&ldquo;Hello pervert, I’ve sent this message from your Microsoft account. …&rdquo;</em></p></blockquote><p>I was totally shocked, as it indicates that my account is compromised. However, when I continue reading, I know it is nothing but a scam. But the fact that it uses my email address haunts me, so I updated the passwords and changed my email address.</p><p>And today, I received a second one with the same words! So here I am, writing a post to repay the scam.🤬</p><hr><h1 id="How-is-this-possible"><a href="#How-is-this-possible" class="headerlink" title="How is this possible?"></a>How is this possible?</h1><p>The reason this scam works is probably because of the sender’s address. It is you so that they make you believe your account is compromised. Now we know it is fake, but how is this possible?</p><p>When you send an email, you are sending a SMTP request to the email server. So, as long as your request matches the description of SMTP protocol, you can literally send anything you want, even with a random sender. We can’t do it because our email clients refuse to do so, but it is feasible for those <strong>wicked</strong> client software. And we call such email with fake sender <strong>spoofed email</strong>.</p><p>For Outlook users, to unveil the nature of email, you can view the raw content with a few clicks shown below. Other email clients should have similar functions.</p><img src="/posts/Scam-From-Your-Own-Email-Address/image-20250108225926571.png" alt="image-20250108225926571" style="zoom:50%;"><p>This is an example email from Battle.net of Blizzard Entertainment. And you can find the sender in the message source.</p><img src="/posts/Scam-From-Your-Own-Email-Address/image-20250108230159530.png" alt="image-20250108230159530" style="zoom:50%;"><p>Although SMTP protocol doesn’t have identity validation, email server provider may add such protection. Normal emails, though may be classified to junks, have <code>X-SID-Result: PASS</code>. However, for spoofed email in our case, you will see <code>FAILED</code> here.</p><div class="note info flat"><p>A tip for you. Each line you see in the source is called a header, which is a key-value pair. The keys start with “X-“ are usually extra headers added by the server, and the others are original headers comes from the email client. So you can see that most the “X-“ headers are related to Microsoft, as I use Outlook.</p></div><hr><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Here are some posts on this scam from experts.</p><ul><li><a href="https://malwaretips.com/blogs/hello-perv-email-scam/">Don’t Panic: The “Hello Perv” Blackmail Emails are Fake</a></li><li><a href="https://malwaretips.com/blogs/ive-sent-this-message-from-your-icloud-mail-email-scam/">“I’ve Sent This Message From Your iCloud Mail” Email Scam Explained</a></li><li><a href="https://www.howtogeek.com/427152/why-can-you-get-spam-from-your-own-email-address/">Why Am I Getting Spam From My Own Email Address?</a></li><li><a href="https://www.howtogeek.com/829504/what-is-email-spoofing/">What Is Email Spoofing, and How Can You Protect Yourself?</a></li></ul><h2 id="Scam-email-template"><a href="#Scam-email-template" class="headerlink" title="Scam email template"></a>Scam email template</h2><p>Below is the common template used by such email, with <strong>your email</strong> as the sender. Although I hate it, its language is quite impressive and convincing. I think if the victim does watch porn, he must be so frightened.</p><blockquote><p>Hello pervert, I’ve sent this message from your Microsoft account.</p><p>I want to inform you about a very bad situation for you. However, you can benefit from it, if you will act wisely.</p><p>Have you heard of Pegasus? This is a spyware program that installs on computers and smartphones and allows hackers to monitor the activity of device owners. It provides access to your webcam, messengers, emails, call records, etc. It works well on Android, iOS, and Windows. I guess, you already figured out where I’m getting at.</p><p>It’s been a few months since I installed it on all your devices because you were not quite choosy about what links to click on the internet. During this period, I’ve learned about all aspects of your private life, but one is of special significance to me.</p><p>I’ve recorded many videos of you jerking off to highly controversial porn videos. Given that the “questionable” genre is almost always the same, I can conclude that you have sick perversion.</p><p>I doubt you’d want your friends, family and co-workers to know about it. However, I can do it in a few clicks.<br>Every number in your contact book will suddenly receive these videos – on WhatsApp, on Telegram, on Skype, on email – everywhere. It is going to be a tsunami that will sweep away everything in its path, and first of all, your former life.</p><p>Don’t think of yourself as an innocent victim. No one knows where your perversion might lead in the future, so consider this a kind of deserved punishment to stop you.</p><p>I’m some kind of God who sees everything. However, don’t panic. As we know, God is merciful and forgiving, and so do I. But my mercy is not free.</p><p>Transfer $1220 USD to my bitcoin wallet: 1JVMTu******************Y6g2</p><p>Once I receive confirmation of the transaction, I will permanently delete all videos compromising you, uninstall Pegasus from all of your devices, and disappear from your life. You can be sure – my benefit is only money. Otherwise, I wouldn’t be writing to you, but destroy your life without a word in a second.</p><p>I’ll be notified when you open my email, and from that moment you have exactly 48 hours to send the money. If cryptocurrencies are unchartered waters for you, don’t worry, it’s very simple. Just google “crypto exchange” and then it will be no harder than buying some useless stuff on Amazon.</p><p>I strongly warn you against the following:</p><p>* Do not reply to this email. I sent it from your Microsoft account.<br>* Do not contact the police. I have access to all your devices, and as soon as I find out you ran to the cops, videos will be published.<br>* Don’t try to reset or destroy your devices.</p><p>As I mentioned above: I’m monitoring all your activity, so you either agree to my terms or the videos are published.</p><p>Also, don’t forget that cryptocurrencies are anonymous, so it’s impossible to identify me using the provided address.</p><p>Good luck, my perverted friend. I hope this is the last time we hear from each other.</p><p>And some friendly advice: from now on, don’t be so careless about your online security.”</p></blockquote><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Although it is a scam, it has one thing to be true, that is <strong>don’t be so careless about your online security</strong>. Next time you see suspicious email, go search for it first before you believe any of the words in it.</p>]]></content>
      
      
      <categories>
          
          <category> Miscellany </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Understanding TypeScript Philosophy</title>
      <link href="/posts/Understanding-TypeScript-Philosophy/"/>
      <url>/posts/Understanding-TypeScript-Philosophy/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;Not engaging in ignorance is wisdom.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Bodhidharma</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>I heard of TypeScript for long, most are about its type system. However, I never got the chance to write a TypeScript project, despite a simple <a href="https://github.com/Lord-Turmoil/heading-toggler-obsidian">Obsidian plugin</a>. Now, when I firstly craft a TypeScript project, I think how difficult it can be? Just JavaScript with types, huh?🤔With this thought in mind, I built some total 💩. I can’t even dare to look at it!😨</p><p>After some deliberate consideration, I rewrote the project, and started to understand the philosophy behind TypeScript. And in this post, I’m going to share with you some of my thoughts. Since I have much experience in JavaScript and other languages, I’ll focus only on high-level concepts.</p><hr><h1 id="Philosophy-of-TypeScript"><a href="#Philosophy-of-TypeScript" class="headerlink" title="Philosophy of TypeScript"></a>Philosophy of TypeScript</h1><div class="note info flat"><p>First of all, I recommend you to read <a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals">TypeScript Design Goals</a>.</p></div><p>Overall, you can take TypeScript as a wrapper around JavaScript. It enables strict type checking to avoid unnecessary errors. And since it is only a wrapper, it will eventually become pure JavaScript after compilation.</p><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><p>Since TypeScript is famous for its “type”, let’s talk about type first. In my point of view, the term “type” in typescript is different from that in other languages. It is some kind of “contract” between you and the compiler. A good example can be how TypeScript handles object.</p><p>For example, we have an object <code>&#123; &quot;name&quot;: &quot;Tony&quot; &#125;</code>. In JavaScript, we can only guess what is inside an object.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">// do we really have obj.name?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But in TypeScript, we can specify what type of object we want.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj: Person</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The keyword <code>interface</code> might be a little confusing at first, as it has totally different meaning in other languages. In TypeScript, it is a compile-time <strong>type</strong>, telling the compiler what is inside this object. So in this example, we know there is  a field <code>name</code> in <code>obj</code>.</p><div class="note warning flat"><p>Even though <code>interface</code> in TypeScript can work similar to other languages like Java, the fundamental difference is that it will be <strong>erased</strong> when translated to JavaScript. So it cannot be used for runtime type identification.</p></div><h2 id="interface-or-class"><a href="#interface-or-class" class="headerlink" title="interface or class"></a><code>interface</code> or <code>class</code></h2><p>If you are familiar with Java, you may have the impulse of defining plenty of interfaces. However, in TypeScript, you must resist this eagerness. Like we just talked about, <code>interface</code> in TypeScript is merely a compile-time type, unlike Java, in which <code>interface</code> is an object. So, when you want an <code>interface</code> equivalent in TypeScript, you can consider <code>abstract class</code>.</p><div class="note warning flat"><p>However, like many other object-oriented languages, TypeScript doesn’t allow multiple inheritance. In this case, you have to use <code>interface</code>.</p></div><h2 id="Pitfall"><a href="#Pitfall" class="headerlink" title="Pitfall"></a>Pitfall</h2><p>Now that we have the type system, you may think that determine the type of an object is a piece of cake. However, there is some tricky scenarios. Look at the code below, we have two functional interface.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberConsumer</span> &#123;</span><br><span class="line">    (<span class="attr">x</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">StringConsumer</span> &#123;</span><br><span class="line">    (<span class="attr">x</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">accept</span>(<span class="params">consumer: NumberConsumer | StringConsumer</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (consumer <span class="keyword">instanceof</span> <span class="title class_">NumberConsumer</span>) &#123;</span><br><span class="line">        <span class="title function_">consumer</span>(<span class="number">123</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (consumer <span class="keyword">instanceof</span> <span class="title class_">StringConsumer</span>) &#123;</span><br><span class="line">        <span class="title function_">consumer</span>(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line">    &#125; <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may take this for granted, but don’t. After compilation, all types (<code>number</code>, <code>string</code>, etc, and <code>interface</code>) are wiped out. That is to say, in the example above, <code>instanceof</code> will cause compile error! And since all types will be erased, these two consumer interfaces are of no difference!😱</p><p>The solution is to convert them into <code>class</code>, so that we can use <code>instanceof</code>. Take <code>NumberConsumer</code> for example.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumberConsumer</span> &#123;</span><br><span class="line">    <span class="attr">accept</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">accept: (x: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">accept</span> = accept;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p><code>instanceof</code> can only be applied to <code>class</code>.</p></div><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>There are already many wonderful articles on every aspects of TypeScript, just go for them.🫡</p><ul><li><a href="https://medium.com/@nick-stambaugh/the-philosophy-of-typescript-8953fcdfc2e9">The Philosophy of TypeScript</a></li><li><a href="https://bobbyhadz.com/blog/typescript-check-type-of-variable">How to Check the Type of a Variable in TypeScript</a></li><li><a href="https://blog.logrocket.com/when-how-use-interfaces-classes-typescript/">When and how to use interfaces and classes in TypeScript</a></li></ul><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>In a word, TypeScript features <strong>compile-time</strong> type checking and saves you from the question of “what is it”.</p><p>Hmm, the first post in 2025. So, happy coding in the new year.😉 ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modern C++ Project With CMake</title>
      <link href="/posts/Modern-C-Project-with-CMake/"/>
      <url>/posts/Modern-C-Project-with-CMake/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;Wondering child, so lost, so helpless,</i><br>    <i>Yearning for my guidance.&rdquo;</i></p><p style="text-align: right; font-family: var(--font-phantom)">&mdash; THE PHANTOM OF THE OPERA</p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>As a <a href="https://visualstudio.microsoft.com/">Visual Studio</a> user from the age of <a href="https://news.microsoft.com/1998/06/29/microsoft-introduces-visual-c-6-0/">Visual C++ 6.0</a>, I’ve always been using <code>.sln</code> (or as old as <code>.dsw</code>) to manage my C++ projects. It works pretty well with Visual Studio, but is not portable for other toolchains. When I started to program on Linux, I have to use other tools like <a href="https://www.gnu.org/software/make/manual/make.html">Make</a> and <a href="https://cmake.org/">CMake</a>.🤔</p><p>Unlike Make, which is the <strong>low-level</strong> build tool, CMake is a <strong>high-level</strong> cross-platform build system generator. Take a look at some popular projects on <a href="https://github.com/">GitHub</a>, you will find that most of them are using CMake to manage their projects. And all that that implies &mdash; CMake is the de-facto standard for building C++ code.😲</p><blockquote><p>Besides CMake, you may also notice a file called conanfile.txt. It is yet another modern C++ package manager called <a href="https://conan.io/">Conan</a>. I haven’t get used to it yet, so it is not our topic today.</p></blockquote><p>Although it’s been a while since I first came across CMake, I still find my <code>CMakeLists.txt</code> extremely messy. Then one day, I found <a href="https://github.com/gabime/spdlog">spdlog</a>, whose <code>CMakeLists.txt</code> is laconic and straightforward. All of a sudden, the vision is clear, and now I’m writing this article to share with you the best practices of managing a modern C++ project with CMake.😎</p><hr><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><div class="note warning flat"><p>CMake is a project management tool, it only generate the build system. So you still need to install the underlying toolchain, e.g. Make on Linux or MSBuild (the one used by Visual Studio) on Windows.</p></div><h2 id="Install-CMake"><a href="#Install-CMake" class="headerlink" title="Install CMake"></a>Install CMake</h2><p>Not much to say, just download the installer from <a href="https://cmake.org/download/">CMake official website</a>, and follow the instructions to install it. For convenience, I’ll do it on my Windows machine. Don’t worry if you are a Linux user, the <code>cmake</code> command is available everywhere. If you also use Windows installer, make sure you check the option to add CMake to the system PATH. Otherwise, you have to add it manually. After installation, run the following command to check if CMake is installed correctly.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure><h2 id="About-CMakeLists-txt"><a href="#About-CMakeLists-txt" class="headerlink" title="About CMakeLists.txt"></a>About <code>CMakeLists.txt</code></h2><p>This is the most important file in your CMake project. One <code>CMakeLists.txt</code> takes care of the build process of a directory. If you have a large project, you may have multiple <code>CMakeLists.txt</code> files in different directories. <code>CMakeLists.txt</code> is written in some kind of script language instead of a bunch of configuration, therefore it is super flexible and powerful.</p><h2 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a>Workspace</h2><p>Well, I bet you do not write code with notepad. Modern IDEs like Visual Studio and CLion have built-in support for CMake, making it easier to interact with CMake. However, CMake itself is not limited to any IDE, so I recommend you use a code editor with fewer integration to go through the original CMake experience at first. Yes, I’m talking about <a href="https://code.visualstudio.com/">Visual Studio Code</a>. However, we’re not primitives. <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools">CMake Tools</a> and <a href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer">Test Explorer UI</a> are good extensions to make this process more enjoyable.</p><h2 id="Attached-Repository"><a href="#Attached-Repository" class="headerlink" title="Attached Repository"></a>Attached Repository</h2><p>All projects of this article is available at <a href="https://github.com/Lord-Turmoil/CMakeDemo">Lord-Turmoil&#x2F;CMakeDemo</a>. You can build each project separately, or all together. See <a href="https://github.com/Lord-Turmoil/CMakeDemo/blob/main/README.md">README.md</a> for more information.</p><hr><h1 id="Getting-Started-with-CMake"><a href="#Getting-Started-with-CMake" class="headerlink" title="Getting Started with CMake"></a>Getting Started with CMake</h1><div class="note success flat"><p>All projects in this chapter are placed under <code>chapter_1</code>.</p></div><p>In this chapter, I’ll show you the very basic set up with CMake, which should be sufficient for small projects, and large projects that do not require much configuration.</p><h2 id="Your-First-CMake-Project"><a href="#Your-First-CMake-Project" class="headerlink" title="Your First CMake Project"></a>Your First CMake Project</h2><div class="note success flat"><p>Project of this section is under <code>chapter_1/demo_11</code>.</p></div><p>So, let’s start with a single file project to see how CMake works. First, prepare two files in your workspace.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- main.cpp</span><br><span class="line">`-- CMakeLists.txt</span><br></pre></td></tr></table></figure><p>In <code>main.cpp</code>, write whatever you like. Or you can copy this to save some time.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Welcome to the world of CMake!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, it comes to <code>CMakeLists.txt</code>. For this simplest project, three lines are enough.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"><span class="keyword">project</span>(demo_11)</span><br><span class="line"><span class="keyword">add_executable</span>(demo_11 main.cpp)</span><br></pre></td></tr></table></figure><p>If you use Visual Studio Code, you can get the documentation when you hover on the commands. But for the first time, I’ll list them below.</p><ul><li><code>cmake_minimum_required()</code>: Require a minimum version of CMake.</li><li><code>project()</code>: Sets the name of the project, and stores it in the variable <code>PROJECT_NAME</code>. When called from the top-level <code>CMakeLists.txt</code> also stores the project name in the variable <code>CMAKE_PROJECT_NAME</code>.</li><li><code>add_executable()</code>: Add an executable to the project using the specified source files.</li></ul><p>Now, you can see that CMake commands are quite intuitive. However, you may find some new terms like “variable”, which I’ll cover later.</p><h2 id="Build-with-CMake"><a href="#Build-with-CMake" class="headerlink" title="Build with CMake"></a>Build with CMake</h2><p>Now, how to build our project? If you use the CMake extension, you can easily find the “Build” button and run it with a few clicks. Command line build is also simple. When you build your project for the first time, or after you modify the <code>CMakeLists.txt</code>, you need to (re)generate the build system.</p><p>The complete command to do this is as follows. Basically <code>cmake</code> needs to know the source path and build path.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake [options] &lt;path-to-source&gt;</span><br><span class="line">cmake [options] &lt;path-to-existing-build&gt;</span><br><span class="line">cmake [options] -S &lt;path-to-source&gt; -B &lt;path-to-build&gt;</span><br></pre></td></tr></table></figure><p>Personally, I prefer the following command. You just run it under the project directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake -Bbuild</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">cmake -B build</span><br></pre></td></tr></table></figure><p>Or, you can specify source path instead. It does the same thing, but takes extra commands.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br></pre></td></tr></table></figure><p>Then, to actually build our project, we can run the following command under project directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build build</span><br></pre></td></tr></table></figure><p>After this, you can find the output executable file somewhere under <code>build</code> directory (usually <code>build/Debug</code>).</p><p>Since CMake itself only manages our project, it invokes related tools to build our project. For example, it may use Make on Linux and MSBuild on Windows. And if you are a curious reader, you may already found this by looking into the <code>build</code> directory. Therefore, some folks may directly use the underlying toolchain instead of <code>cmake</code> to build their project.</p><blockquote><p>A fun tip for you. If you want to speed up the build speed, you can specify compile flags after build. On Linux, CMake uses Make, so you can specify <code>-j [N]</code> to utilize your many cores. Note that Make uses infinite jobs if <code>N</code> is missing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build build -- -j</span><br></pre></td></tr></table></figure><p>For MSBuild, you need to use <code>/m[:N]</code>. Also, you can let it choose automatically without <code>N</code>.</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake <span class="literal">--build</span> build <span class="literal">--</span> /m</span><br></pre></td></tr></table></figure></blockquote><h2 id="Classic-Project-Structure"><a href="#Classic-Project-Structure" class="headerlink" title="Classic Project Structure"></a>Classic Project Structure</h2><div class="note success flat"><p>Project of this section is placed under <code>chapter_1/demo_12</code>.</p></div><p>I suppose no one write projects with only one file. So it’s time to consider a proper way to organize our source files and header files. A classic project structure is shown below. We put header files into <code>include</code> and source files into <code>src</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">demo_12</span><br><span class="line">|-- include</span><br><span class="line">|   `-- demo_12</span><br><span class="line">|       `-- app.h</span><br><span class="line">|-- src</span><br><span class="line">|   |-- app.cpp</span><br><span class="line">|   `-- main.cpp</span><br><span class="line">`-- CMakeLists.txt</span><br></pre></td></tr></table></figure><div class="note info flat"><p>When your project includes many libraries, it is likely that some header files happen to have the same name. In this case, we add an extra directory under <code>include</code> (here is <code>demo_12</code>). In this case, we will include our header file as <code>demo_12/app.h</code> so as to tell header files from different projects.</p></div><p>Now, how should we write the <code>CMakeLists.txt</code>? Only one more line of script. Note that we only need to add source files, header files will be included into source file when the compilation happens. However, you can include header files in it.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"><span class="keyword">project</span>(demo_12)</span><br><span class="line"><span class="keyword">add_executable</span>(demo_12 src/main.cpp src/app.cpp)</span><br><span class="line"><span class="keyword">target_include_directories</span>(demo_12 PRIVATE <span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><p>After we call <code>add_executable()</code>, we add a target called <code>demo_12</code>. Then we use <code>target_include_directories</code> to set the include directory of this target. Here, after the target name, we have a <code>PRIVATE</code> keyword. It means that the include directory (<code>include</code>) is private to this target, and won’t be inherited by targets that depend on it.</p><div class="note info flat"><p>Here our target is an executable, which apparently cannot be referenced, so it doesn’t matter whether it is <code>PRIVATE</code> or <code>PUBLIC</code>. It is usually a consideration for library project and you’ll see it later.</p></div><p>Because we’ve set the target include directory, we can use absolute include path for <code>#include</code>. Although both <code>&quot;&quot;</code> and <code>&lt;&gt;</code> are OK here, we usually use the former as it is a custom header.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;demo_12/app.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Tada! You project looks organized now!😆</p><h2 id="It’s-Getting-Larger"><a href="#It’s-Getting-Larger" class="headerlink" title="It’s Getting Larger"></a>It’s Getting Larger</h2><p>Everything looks great, until there are too many source files. Adding them one by one is really tiring. So in this case, you can use the following command to automatically find source files in your project.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_LIST CONFIGURE_DEPENDS <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="keyword">add_executable</span>(demo_12 <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure><p>Here, <code>SRC_LIST</code> is a custom variable, which stores all <code>.cpp</code> files under <code>$&#123;PROJECT_SOURCE_DIR&#125;</code>, which is a built-in variable as its literal meaning.</p><hr><h1 id="Use-CMake-Like-a-Pro"><a href="#Use-CMake-Like-a-Pro" class="headerlink" title="Use CMake Like a Pro"></a>Use CMake Like a Pro</h1><div class="note success flat"><p>All projects in this chapter are placed under <code>chapter_2</code>.</p></div><p>In the last chapter, we learned the basic use of CMake. And now, let’s take a step further to become “professional”.</p><h2 id="Your-First-CMake-Library"><a href="#Your-First-CMake-Library" class="headerlink" title="Your First CMake Library"></a>Your First CMake Library</h2><div class="note success flat"><p>Project of this section is under <code>chapter_2/demo_21</code>.</p></div><p>Not all projects are executables. Sometimes a library is a better choice to reuse our code. Or we just divide our logic into several libraries. So in section, I’ll talk about the basic structure of a library project. More specifically, static library.</p><p>In this project, our final target is an executable, but we depends on a library called <code>app</code>. The <code>app</code> library has both public headers and private ones. In this case, a good project structure is as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">demo_21</span><br><span class="line">|-- CMakeLists.txt</span><br><span class="line">|-- lib</span><br><span class="line">|   |-- CMakeLists.txt</span><br><span class="line">|   `-- app</span><br><span class="line">|       |-- CMakeLists.txt</span><br><span class="line">|       |-- include/app</span><br><span class="line">|       |   |-- detail</span><br><span class="line">|       |   |   `-- app_public.h</span><br><span class="line">|       |   `-- app.h</span><br><span class="line">|       `-- src</span><br><span class="line">|           |-- app_private.h</span><br><span class="line">|           |-- app_private.cpp</span><br><span class="line">|           `-- app_public.cpp</span><br><span class="line">`-- src</span><br><span class="line">    `-- main.cpp</span><br></pre></td></tr></table></figure><p>Since all our dependencies are moved into the library, the top-level <code>include</code> directory is omitted. The <code>lib/app</code> directory is a complete CMake library project, which has its own <code>include</code> and <code>src</code>.</p><p>Usually, for a library, we will have an all-in-one header, so that client can get access to all functions with one include. For example, this is our <code>app.h</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;app/detail/app_public.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>Then in our <code>main.cpp</code>, we can simply write one line of <code>#include</code>. Here we use <code>&lt;&gt;</code> because we can take library as external code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;app/app.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>Usually, it is OK to make all header files public. However, if you do care about privacy, you can place private headers in <code>src</code> directory along with source files.</p></div><p>First, let’s see the <code>CMakeLists.txt</code> under <code>lib/app</code>. This time, we use <code>add_library</code> to make it a library instead of an executable. Also, we use the built-in <code>$&#123;PROJECT_NAME&#125;</code> to avoid writing <code>app</code> everywhere. Then, for the <code>target_include_directories()</code>, we set it more carefully by separating public and private headers.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SRC_LIST CONFIGURE_DEPENDS <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src/*.cpp&quot;</span>)</span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SRC_LIST&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(</span><br><span class="line">    <span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">    PUBLIC <span class="variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">    PRIVATE <span class="variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/src</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Since library can be referenced by other projects, we can use <code>${CMAKE_CURRENT_LIST_DIR}</code> to make it always points to the path in our library. Or you can use <code>${CMAKE_CURRENT_SOURCE_DIR}</code>.</p></div><p>Then, in <code>lib/CMakeLists.txt</code>, we simply use <code>add_subdirectory</code> to include our library.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_subdirectory</span>(app)</span><br></pre></td></tr></table></figure><p>This is something new. By executing <code>add_subdirectory</code>, we go into that directory and run <code>CMakeLists.txt</code> there. This way, we can build large projects recursively. When there are more libraries, you can put them all here, so that we can add them all by executing <code>add_subdirectory(lib)</code>.</p><p>Finally, our top-level <code>CMakeLists.txt</code>, we first add <code>lib</code>, and finally link <code>app</code> to our executable. The <code>PRIVATE</code> here has the same meaning as that of <code>target_include_directories()</code>.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(demo_21)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dependencies</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> src/main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Link the app library</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE app)</span><br></pre></td></tr></table></figure><p>This is how you build a project with library dependency.</p><h2 id="No-Source-File"><a href="#No-Source-File" class="headerlink" title="No Source File?"></a>No Source File?</h2><div class="note success flat"><p>Project of this section is placed under <code>chapter_2/demo_22</code>.</p></div><p>Sometimes, a library may only contain a bunch of header files, which is known as header-only libarary. In this case, there is no source file to be added to the target. Therefore, CMake provides a special target called <code>INTERFACE</code>. Now, we convert our library <code>app</code> in the last section into a header-only library.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">demo_22</span><br><span class="line">|-- CMakeLists.txt</span><br><span class="line">|-- lib</span><br><span class="line">|   |-- CMakeLists.txt</span><br><span class="line">|   `-- app_ho</span><br><span class="line">|       |-- CMakeLists.txt</span><br><span class="line">|       `-- include/app</span><br><span class="line">|           |-- detail</span><br><span class="line">|           |   `-- app_public.h</span><br><span class="line">|           `-- app.h</span><br><span class="line">`-- src</span><br><span class="line">    `-- main.cpp</span><br></pre></td></tr></table></figure><p>Except the changes in source code, only <code>app_ho/CMakeLists.txt</code> is slightly different. Now, instead of listing source files in <code>add_library()</code>, we use <code>INTERFACE</code> to indicate that it is header-only. Then, we also need to specify <code>INTERFACE</code> in <code>target_include_directories()</code>.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(app_ho)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> INTERFACE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_include_directories</span>(</span><br><span class="line">    <span class="variable">$&#123;PROJECT_NAME&#125;</span> INTERFACE <span class="variable">$&#123;CMAKE_CURRENT_LIST_DIR&#125;</span>/<span class="keyword">include</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>That’s it. You can reference this library in the same way.</p><h2 id="Unit-Test-with-CMake"><a href="#Unit-Test-with-CMake" class="headerlink" title="Unit Test with CMake"></a>Unit Test with CMake</h2><div class="note success flat"><p>Project of this section is placed under <code>chapter_2/demo_23</code>.</p></div><p>As a final step, I’d like to talk about unit testing with CMake. You may already heard about unit testing somewhere else. It is especially useful for library projects. To add unit test to your project, first you need to add <code>enable_testing()</code> in your <strong>top-level</strong> <code>CMakeLists.txt</code>.</p><div class="note danger flat"><p><code>enable_testing()</code> must be placed top-level before you add the test directory. Otherwise, it will be ignored.</p></div><p>Usually, we place our unit tests under <code>tests</code>. And the complete project structure looks like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fawefdemo_23</span><br><span class="line">|-- CMakeLists.txt</span><br><span class="line">|-- lib</span><br><span class="line">|   |-- CMakeLists.txt</span><br><span class="line">|   `-- add</span><br><span class="line">|       |-- CMakeLists.txt</span><br><span class="line">|       `-- include/add</span><br><span class="line">|           |-- detail</span><br><span class="line">|           |   `-- add.h</span><br><span class="line">|           `-- add.h</span><br><span class="line">|-- src</span><br><span class="line">|   `-- main.cpp</span><br><span class="line">`-- tests</span><br><span class="line">    |-- CMakeLists.txt</span><br><span class="line">    `-- add_test.cpp</span><br></pre></td></tr></table></figure><p>The content of <code>tests/CMakeLists.txt</code> is as follows. The unit test is in fact an executable, and we add it as a test. You can add more as you wish.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">add_test</span> <span class="keyword">add_test</span>.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="keyword">add_test</span> PRIVATE add)</span><br><span class="line"><span class="keyword">add_test</span>(NAME <span class="keyword">add_test</span> <span class="keyword">COMMAND</span> <span class="keyword">add_test</span>)</span><br></pre></td></tr></table></figure><p>Whether a test passes is indicated by its return value. Here, our test contains one assertion. If the assertion fails, it will return non-zero value, thus the unit test will fail.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add/add.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">add</span>(<span class="number">22</span>, <span class="number">44</span>) == <span class="number">66</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unit test is backed by <code>ctest</code>. You can run them simply with the following command.</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ctest <span class="literal">--test-dir</span> build</span><br><span class="line">Test project F:/Development/Trivial/CMakeDemo/build</span><br><span class="line">    <span class="built_in">Start</span> <span class="number">1</span>: add_test</span><br><span class="line"><span class="number">1</span>/<span class="number">1</span> Test <span class="comment">#1: add_test .........................   Passed    0.01 sec</span></span><br><span class="line"></span><br><span class="line"><span class="number">100</span>% tests passed, <span class="number">0</span> tests failed out of <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Total Test time (real) =   <span class="number">0.02</span> sec</span><br></pre></td></tr></table></figure><blockquote><p>If you have build type specified, you may need to pass configuration argument to <code>ctest</code>, for example:</p><figure class="highlight pwsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctest <span class="literal">--test-dir</span> build <span class="literal">-C</span> Debug</span><br></pre></td></tr></table></figure></blockquote><p>Or if you have Test Explorer UI extension installed, you can view test cases in the sidebar of Visual Studio Code.</p><p>Now, I believe you are capable of managing a nice CMake project.😉</p><hr><h1 id="CMake-Best-Practices"><a href="#CMake-Best-Practices" class="headerlink" title="CMake Best Practices"></a>CMake Best Practices</h1><div class="note success flat"><p>Project of this chapter is under <code>chapter_3</code>.</p></div><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>First of all, it is a library project with dependencies, a demo and a set of unit tests, which makes it a comprehensive example. As you’ve already learned the essential of CMake in the previous chapters, I’ll focus on more advanced topics here, showing below.</p><ul><li>Automatically version your project.</li><li>Using options to allow more flexible build.</li><li>Managing compiler flags.</li><li>Simplifying your <code>CMakeLists.txt</code> with loop.</li></ul><h2 id="Auto-Versioning"><a href="#Auto-Versioning" class="headerlink" title="Auto Versioning"></a>Auto Versioning</h2><p>It is a bad habit to copy code in your project, as it causes duplication, making it hard to maintain in the long run. One example is the project version. Usually, you will have a version in your code, but you have to write the same version again in the project configuration file, e.g. <code>CMakeLists.txt</code>. Fortunately, CMake is able to read files, so that you can automatically extract version from your code.</p><p>First, you can set the version of your project using MACROS in one of your header files. Here, I put it in <code>c3/include/version.h</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> C3_VERSION_MAJOR 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C3_VERSION_MINOR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C3_VERSION_PATCH 0</span></span><br></pre></td></tr></table></figure><p>Then, in your <code>CMakeLists.txt</code>, define a function called <code>c3_extract_version</code> to extract version from our header file via regex.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(c3_extract_version)</span><br><span class="line">    <span class="keyword">file</span>(READ <span class="string">&quot;$&#123;CMAKE_CURRENT_LIST_DIR&#125;/c3/include/version.h&quot;</span> file_contents)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>(REGEX MATCH <span class="string">&quot;C3_VERSION_MAJOR ([0-9]+)&quot;</span> _ <span class="string">&quot;$&#123;file_contents&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">NOT</span> CMAKE_MATCH_COUNT <span class="keyword">EQUAL</span> <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;Could not extract major version number&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">set</span>(major_version <span class="variable">$&#123;CMAKE_MATCH_1&#125;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>(REGEX MATCH <span class="string">&quot;C3_VERSION_MINOR ([0-9]+)&quot;</span> _ <span class="string">&quot;$&#123;file_contents&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">NOT</span> CMAKE_MATCH_COUNT <span class="keyword">EQUAL</span> <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;Could not extract minor version number&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">set</span>(minor_version <span class="variable">$&#123;CMAKE_MATCH_1&#125;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">string</span>(REGEX MATCH <span class="string">&quot;C3_VERSION_PATCH ([0-9]+)&quot;</span> _ <span class="string">&quot;$&#123;file_contents&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">NOT</span> CMAKE_MATCH_COUNT <span class="keyword">EQUAL</span> <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">message</span>(FATAL_ERROR <span class="string">&quot;Could not extract patch version number&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">set</span>(patch_version <span class="variable">$&#123;CMAKE_MATCH_1&#125;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>(C3_VERSION_MAJOR <span class="variable">$&#123;major_version&#125;</span> PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">set</span>(C3_VERSION_MINOR <span class="variable">$&#123;minor_version&#125;</span> PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">set</span>(C3_VERSION_PATCH <span class="variable">$&#123;patch_version&#125;</span> PARENT_SCOPE)</span><br><span class="line">    <span class="keyword">set</span>(C3_VERSION <span class="string">&quot;$&#123;major_version&#125;.$&#123;minor_version&#125;.$&#123;patch_version&#125;&quot;</span> PARENT_SCOPE)</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure><p>This function is quite long, and may fill up your main <code>CMakeLists.txt</code>. So, usually we will create a <code>cmake</code> directory and store such functions to <code>utils.cmake</code>. Then, we just need to include it before we use it. Note that if sub-directories will inherit the inclusion.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(cmake/utils.cmake)</span><br></pre></td></tr></table></figure><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Not all targets are needed when we build a project. For example, we may only build tests under development. Or, you may want to disable assertion for some builds. In this case, you can use <code>option()</code> command.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">option</span>(C3_BUILD_TEST <span class="string">&quot;Build unit tests&quot;</span> <span class="keyword">ON</span>)</span><br><span class="line"><span class="keyword">option</span>(C3_ENABLE_ASSERTION <span class="string">&quot;Enable assertion&quot;</span> <span class="keyword">OFF</span>)</span><br></pre></td></tr></table></figure><div class="note info flag flat"><p>To demonstrate assertion, I placed a 💣 in the source code. If you compile and run it with assertion enabled, you will see 💥.</p></div><p>We can override the choice in command line using <code>-D</code>.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -Bbuild -DC3_BUILD_TEST=<span class="keyword">OFF</span> -DC3_ENABLE_ASSERTION=<span class="keyword">ON</span></span><br></pre></td></tr></table></figure><p>Then, the options can be directly used in <code>if()</code> command.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(C3_ENABLE_ASSERTION)</span><br><span class="line">    <span class="keyword">target_compile_definitions</span>(<span class="variable">$&#123;TARGET_NAME&#125;</span> PUBLIC C3_ENABLE_ASSERT)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(WARNING <span class="string">&quot;Assertion disabled for $&#123;PROJECT_NAME&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(C3_BUILD_TEST)</span><br><span class="line">    <span class="keyword">enable_testing</span>()</span><br><span class="line">    <span class="keyword">add_subdirectory</span>(tests)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;Skipping $&#123;PROJECT_FULLNAME&#125; unit tests&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><h2 id="Compiler-Flags"><a href="#Compiler-Flags" class="headerlink" title="Compiler Flags"></a>Compiler Flags</h2><p>To force yourself a better programming habit, you can enable more warnings for your project. Likewise, you can also turn off annoying warnings from 3rd-party dependencies. To achieve this, you can write some utility functions.</p><p><code>target_compile_options()</code> will add compiler flags to the given target. It is always recommended to specify target to avoid unwanted pollution. Here I have to complain about MSVC, it has incompatible flags.☹️</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Turn on warnings on the given target</span></span><br><span class="line"><span class="keyword">function</span>(c3_enable_warnings target_name)</span><br><span class="line">    <span class="keyword">get_target_property</span>(type <span class="variable">$&#123;target_name&#125;</span> TYPE)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="variable">$&#123;type&#125;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;INTERFACE_LIBRARY&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(MSVC)</span><br><span class="line">            <span class="keyword">target_compile_options</span>(<span class="variable">$&#123;target_name&#125;</span> PRIVATE /W4)</span><br><span class="line">        <span class="keyword">else</span>()</span><br><span class="line">            <span class="keyword">target_compile_options</span>(<span class="variable">$&#123;target_name&#125;</span> PRIVATE -Wall -Wextra -Werror)</span><br><span class="line">        <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn off warnings on the given target </span></span><br><span class="line"><span class="keyword">function</span>(c3_disable_warnings target_name)</span><br><span class="line">    <span class="keyword">get_target_property</span>(type <span class="variable">$&#123;target_name&#125;</span> TYPE)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="variable">$&#123;type&#125;</span> <span class="keyword">STREQUAL</span> <span class="string">&quot;INTERFACE_LIBRARY&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(MSVC)</span><br><span class="line">            <span class="keyword">target_compile_options</span>(<span class="variable">$&#123;target_name&#125;</span> PRIVATE /W0)</span><br><span class="line">        <span class="keyword">else</span>()</span><br><span class="line">            <span class="keyword">target_compile_options</span>(<span class="variable">$&#123;target_name&#125;</span> PRIVATE -w)</span><br><span class="line">        <span class="keyword">endif</span>()</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endfunction</span>()</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Since header file will be compiled with the source files that include it, a header-only library will not invoke compilation. Therefore, we cannot set compile options for interface library.</p></div><h2 id="Final-Touch"><a href="#Final-Touch" class="headerlink" title="Final Touch"></a>Final Touch</h2><p>Now, your CMake project should look professional already.😁However, there is still some tips I’d like to share with you.</p><p><strong>C&#x2F;C++ standard</strong></p><p>You can specify desired language standard by setting the built-in variable.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>) <span class="comment"># for C++</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">17</span>)   <span class="comment"># for C</span></span><br></pre></td></tr></table></figure><p><strong>Am I the Master?</strong></p><p>When we develop a project, usually a library, we build it as the master project. That is to say, its <code>CMakeLists.txt</code> is at the top-level. However, after it is done, it will be referenced by another project, making it a sub-project. For this, we can write a simple function to detect whether it is built as a master project or not.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a helper variable to check if the project is built as a master project</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> <span class="keyword">DEFINED</span> C3_MASTER_PROJECT)</span><br><span class="line">    <span class="keyword">if</span>(CMAKE_CURRENT_SOURCE_DIR <span class="keyword">STREQUAL</span> CMAKE_SOURCE_DIR)</span><br><span class="line">        <span class="keyword">set</span>(C3_MASTER_PROJECT <span class="keyword">ON</span>)</span><br><span class="line">        <span class="keyword">message</span>(STATUS <span class="string">&quot;$&#123;PROJECT_NAME&#125; is built as the master project&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>()</span><br><span class="line">        <span class="keyword">set</span>(C3_MASTER_PROJECT <span class="keyword">OFF</span>)</span><br><span class="line">        <span class="keyword">message</span>(STATUS <span class="string">&quot;$&#123;PROJECT_NAME&#125; is built as a sub-project&quot;</span>)</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p>Then, we can optionally enable strict warnings when built as the master project.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable extra warnings if build as master project</span></span><br><span class="line"><span class="keyword">if</span>(C3_MASTER_PROJECT)</span><br><span class="line">    c3_enable_warnings(<span class="variable">$&#123;TARGET_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><p><strong>How’s it going?</strong></p><p>Can not help from wondering what CMake is doing? You can use <code>message()</code> command for logging.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Finally, it comes to an end, but there is still much to learn. For modern C++ projects, the most important part missing here is package management. CMake has <code>install()</code> and <code>find_package()</code> commands, and there are other tools like <a href="https://conan.io/">Conan</a> and <a href="https://vcpkg.io/">vcpkg</a> for this purpose.</p><p>Anyway, this article is only a beginning of your CMake journey. Good luck, and have fun! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Software Engineering </category>
          
          <category> Best Practices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> C/C++ </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Into the Atomic World of C++</title>
      <link href="/posts/Into-the-Atomic-World-of-C/"/>
      <url>/posts/Into-the-Atomic-World-of-C/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;Don't let the past steal your present.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Cherralea Morgen</i></p><blockquote><p>This article is inspired by many other wonderful blogs, thanks to the authors for sharing their knowledge.🥰</p><ul><li><a href="https://www.freecodecamp.org/news/atomics-and-concurrency-in-cpp/">Atomics and Concurrency in C++</a></li><li><a href="https://dev.to/kprotty/understanding-atomics-and-memory-ordering-2mom">Understanding Atomics and Memory Ordering</a></li></ul><p>And of course the official <a href="https://en.cppreference.com/">cppreference</a> documentation.</p><ul><li><a href="https://en.cppreference.com/w/cpp/atomic/atomic">std::atomic</a></li><li><a href="https://en.cppreference.com/w/cpp/atomic/memory_order">std::memory_order</a></li></ul></blockquote><div class="note info flat"><p>Some of the content is co-authored with <a href="https://github.com/features/copilot">GitHub Copilot</a>.🤖</p></div><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Recently, I work on a project with high concurrency requirements, where threading is heavily used. Besides the traditional mutex and lock, I found some lock-free solutions utilizing <strong>atomic operations</strong>. Although I knew it long ago, I haven’t got a chance to actually use them in my project. And this is the moment, to take the first step into the atomic world of C++.🗺️</p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Mutex-VS-Atomic"><a href="#Mutex-VS-Atomic" class="headerlink" title="Mutex VS Atomic"></a>Mutex VS Atomic</h2><p>Well, before we dive into the atomic world, let’s have a quick comparison between <strong>mutex</strong> and <strong>atomic</strong>.</p><p>First of all, both of them are to solve the <strong>concurrency</strong> problem, to ensure data consistency when multiple threads are accessing the shared data. However, they have different mechanisms to achieve this goal.</p><p>Mutex is used along with lock, which relies on the <strong>operating system</strong> to provide the synchronization mechanism. In this way, OS ensures the lock🔒 and unlock🔓 operations are <strong>atomic</strong>. Therefore, it is a <strong>heavyweight</strong> solution.</p><p>On the other hand, atomic operations rely on the <strong>memory model</strong> of the hardware. It ensures the data is accessed the way you want by carefully <strong>ordering memory instructions</strong>. Therefore, it is lock-free, and more performant than mutex.</p><h2 id="Instruction-Order"><a href="#Instruction-Order" class="headerlink" title="Instruction Order"></a>Instruction Order</h2><p>In case you are not familiar with this concept, I’ll give a brief introduction here.</p><p>We write programs using high level languages like C++, but eventually, they are compiled into machine code, which is a series of instructions executed by the CPU. Even the simplest statement like <code>a++</code> is translated into multiple instructions.</p><p>In order to optimize the performance, the CPU is able to execute multiple instructions at the same time. Therefore, reordering the instructions can better utilize this feature. For example, in the following code, CPU can execute <code>a = 1</code> and <code>b = 2</code> at the same time, or even execute <code>d = 3</code> ahead of <code>c = a + b</code>. But it won’t execute <code>c = a + b</code> in advance due to data dependency.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">c = a + b;</span><br><span class="line">d = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>So, how does CPU know what orders instructions can be executed? First, it follows the original order in the code, which is generated by the compiler. The compiler may adjust the order of instructions with optimization strategies. Second, CPU uses its <strong>memory model</strong> to adjust the order of instructions again. That is to say, both the compiler and CPU can reorder the instructions.</p><p>For local data, like the simple example above, it is easy to tell the dependencies between instructions. But things change for shared data. Given the example below, if we want <code>bar</code> to always print <code>100</code>, we need to ensure <code>a = 100</code> happens before <code>printf(&quot;%d&quot;, a)</code>. But how can we guarantee this order?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="comment">// thread 1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> <span class="comment">// thread 2</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(a == <span class="number">100</span>); <span class="comment">// always true?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Apparently, the compiler wouldn’t know the dependencies between these two threads. So, it relies on the runtime, but how?🤔</p><h2 id="Thread-Sanitizer"><a href="#Thread-Sanitizer" class="headerlink" title="Thread Sanitizer"></a>Thread Sanitizer</h2><div class="note success flat"><p>Not familiar with sanitizer? Check out <a href="/posts/Sanitize-your-C-C-Program-with-Sanitizers/">Sanitize Your C&#x2F;C++ Program With Sanitizers</a>.😉</p></div><p>For the example above, we can write this simple test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(data == <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(foo)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(bar)</span></span>;</span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I know, it is hard to reproduce concurrent problems. However, with the help of thread sanitizer, we can catch this tricky boy.🕵️Regarding to the documentation, you may use <code>-O1</code> to balance the performance degradation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -fsanitize=thread -o main main.c</span><br></pre></td></tr></table></figure><p>Now, you can always see the warning from thread sanitizer. It tells you which operations are causing data race, and the threads they belong to.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: ThreadSanitizer: data race ...</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>If you unluckily seeing the linker reports “missing <code>libtsan_preinit.o</code>“. Check <a href="https://stackoverflow.com/questions/77858687/tsan-usr-bin-ld-cant-find-libtsan-preinit-o">(TSAN) &#x2F;usr&#x2F;bin&#x2F;ld can’t find libtsan_preinit.o</a> for solutions.</p></div><hr><h1 id="Let’s-Get-Atomic"><a href="#Let’s-Get-Atomic" class="headerlink" title="Let’s Get Atomic!"></a>Let’s Get Atomic!</h1><div class="note primary flat"><p>The original example comes from <a href="https://www.freecodecamp.org/news/atomics-and-concurrency-in-cpp/">Atomics and Concurrency in C++</a>.</p></div><p>In this chapter, we will solve the problem above using atomic operations. It is considered harder to use atomic operations then mutex. So, good luck!🫡</p><div class="note warning flat"><p>When you read the examples in this section, assume the worst case of instruction re-ordering.💀</p></div><h2 id="Non-Atomic"><a href="#Non-Atomic" class="headerlink" title="Non-Atomic"></a>Non-Atomic</h2><p>To ensure <code>assert</code> executes after <code>data = 100</code>, we can add a flag indicating whether <code>data</code> is updated. So we make a little modification to our example. Since other parts remain the same, only <code>foo()</code> and <code>bar()</code> are given here. As you can see, now we wait until <code>updated</code> is set to true.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data = <span class="number">100</span>;</span><br><span class="line">    updated = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!updated)</span><br><span class="line">    &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(data == <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>You may ask, “why not <code>while(data != 100)</code>?”😅Well, in real projects, directly checking data might be expensive or unavailable.</p></blockquote><p>It seems fine. However, when you run it with TSan, the problem still exists. Why?😟Because the execution order of <code>data = 100</code> and <code>udpated = true</code> is not guaranteed. For either the compiler or CPU, these two instructions are independent, thus they can be reordered. Therefore, <code>updated</code> might be true before <code>data</code> is set, causing the assertion to fail.</p><h2 id="Using-std-atomic"><a href="#Using-std-atomic" class="headerlink" title="Using std::atomic"></a>Using <code>std::atomic</code></h2><p>Let’s see how atomic operation solves this problem. Luckily, we don’t need to write those obscure assembly code. Since C++ 11, we have <code>std::atomic</code> available. Now, let’s rewrite the example again. Still, only neccessary parts are given.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// Wow, we have a new toy!</span></span><br><span class="line">std::atomic&lt;<span class="type">bool</span>&gt; updated = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data = <span class="number">100</span>;</span><br><span class="line">    updated.<span class="built_in">store</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!updated.<span class="built_in">load</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(data == <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we run it again with TSan. Tada! The warning disappears!🎉</p><p>The most significant change is that the direct use of <code>=</code> is replaced by <code>load</code> and <code>store</code> provided by <code>std::atomic</code>. So, what does these two functions do?🤔</p><p>🗝️Essentially, each of them represents an atomic operation. <del>(duh, of course)</del> As we already know, one statement may be translated into multiple instructions, and the primary objective of <code>std::atomic</code> is to ensure that instructions from one statement won’t be separated or reordered, and other instructions won’t be inserted between them. In one word, <strong>atomic</strong>.</p><p>🗝️Beyond making instructions of one statement atomic, it can also ensures the <strong>memory access order</strong> with other statements. That is to say, it prevents the compiler and CPU from moving other statements that is originally after the atomic statement in the source code ahead of it, or the other way around.</p><blockquote><p>The instructions mentioned here only refer to memory related ones, like load and store. Other arithmetic instructions, as they depends on the data from memory, so their reordering won’t affect the correctness. Only the reordering of memory related instructions will cause some troubles. And when I say statement, it also means the instructions translated from it.</p></blockquote><p>So, are we getting it?😲I think it is easy to understand the first 🗝, just ensure the atomicity of one statement. However, even if we can ensure the atomicity, this statement can still be reordered as a whole, which indeed, is still atomic. The second 🗝 is a bit more tricky, so let’s break it down in the next chapter.</p><hr><h1 id="Memory-Order"><a href="#Memory-Order" class="headerlink" title="Memory Order"></a>Memory Order</h1><p>Memory order is the key to fully understand what atomic operation is all about. I think a good analogy is that, atomic operation is like placing fences around the instruction.</p><h2 id="The-Fence"><a href="#The-Fence" class="headerlink" title="The Fence"></a>The Fence</h2><p>Memory order is like an agreement among you, the compiler and the CPU. It explicitly defines the order of memory instructions so that they are not allowed to be reordered arbitrarily. To achieve this, it places <strong>“fences”</strong> around the atomic instruction.</p><p>Assume that we have the following memory access statements A, B and C. Each of them is translated in to two memory access instructions. All of them are independent from each other. Note that these three statements can exists in three threads, which makes this case more complicated.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  statements:  A   B   C</span><br><span class="line">instructions: a a b b c c</span><br></pre></td></tr></table></figure><p>Without atomic operation, these instructions can be executed in any order. Since the reordering is done in instruction level, and they may in different threads, we may get the following result.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a c b c a b</span><br></pre></td></tr></table></figure><p>What a mess!😨Now, if we want B to be atomic, we can add fence like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  statements:  A  &lt;[  B  ]&gt; C</span><br><span class="line">instructions: a a &lt;[ b b ]&gt; c c</span><br></pre></td></tr></table></figure><p>First, <code>[ ]</code> means other instructions cannot be reordered into it. That is to say, there will only be <code>[ b b ]</code> and no <code>[ b a b c]</code>. Then, <code>&lt;</code> prevents instructions before it to be moved afterwards, while <code>&gt;</code> prevents instructions after it to be moved before. Therefore, with fences like this, there will only be one execution order.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a a b b c c</span><br></pre></td></tr></table></figure><blockquote><p>There is one assumption that, the order of the instructions translated from one statement won’t change. That is to say, if <code>a1 a2</code> comes from <code>A</code>, then there won’t be <code>a2 a1</code>.</p></blockquote><h2 id="Is-It-Too-Strict"><a href="#Is-It-Too-Strict" class="headerlink" title="Is It Too Strict?"></a>Is It Too Strict?</h2><p>In our example above, the default <code>load</code> and <code>store</code> uses this strategy, adding fences at both sides of a statement. This is the most strict memory order, which is called <code>memory_order_seq_cst</code> (sequential consistency). It ensures the <strong>sequential consistency</strong> of the memory access. That is to say, the memory access order is the same as the order in the source code.</p><p>It is good to keep instructions in order, but it is not free. Too many restrictions will certainly impact the performance. So can we relax the order a little bit? Thankfully, the standard library provides several memory orders for us to choose.</p><p>Back to our <code>foo()</code>-<code>bar()</code> demo. In fact, we only require that <code>update</code> is written after <code>data</code> in <code>foo()</code>, and <code>update</code> is read before <code>data</code> in <code>bar()</code>. Don’t be fooled by the <code>while</code> loop. The loop has nothing to do with <code>data</code> except the logic dependency in our mind, so they can also be reordered. For this, we can relax the memory order a little bit.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data = <span class="number">100</span>;</span><br><span class="line">    updated.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_release);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!updated.<span class="built_in">load</span>(std::memory_order_acquire))</span><br><span class="line">    &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(data == <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we use <code>std::memory_order_release</code> in <code>foo()</code> and <code>std::memory_order_acquire</code> in <code>bar()</code>. As we expected, it also works. But, strange names, right?😵‍💫</p><p>First of all, all memory orders ensure the atomicity. That is to say, they all add <code>[ ]</code> around the statement. But they add <code>&lt;</code> and <code>&gt;</code> in different strategy. As we talked about earlier, the default <code>memory_order_seq_cst</code> adds both <code>&lt;</code> and <code>&gt;</code>. So, it is the most strict and secure, but also the slowest. The other two, however, only adds one, making them a little bit faster.</p><ul><li><code>std::memory_order_release</code> only adds <code>&lt;</code>, so it only ensures the instructions before won’t be moved afterwards.</li><li><code>std::memory_order_acquire</code> only adds <code>&gt;</code>, so it only ensures the instructions after won’t be moved before.</li></ul><p>Release and acquire may be confusing, so you can just remember their meaning.</p><div class="note success flat"><p>Note that such atomic operation also applies to other memory statements that doesn’t use <code>std::atomic</code>.</p></div><h2 id="Can-We-Be-More-Relaxed"><a href="#Can-We-Be-More-Relaxed" class="headerlink" title="Can We Be More Relaxed?"></a>Can We Be More Relaxed?</h2><p>As a meticulous reader, you may notice that, there is a missing combination of <code>&lt;</code> and <code>&gt;</code>, which is not using any of them. Yes, there is such a memory order, which is called <code>std::memory_order_relaxed</code>. It only ensures the atomicity of one statement. If you just want to keep one statement together, it is the best choice.</p><p>So, can we use <code>std::memory_order_relaxed</code> in our example?🤔</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    data = <span class="number">100</span>;</span><br><span class="line">    updated.<span class="built_in">store</span>(<span class="literal">true</span>, std::memory_order_relaxed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!updated.<span class="built_in">load</span>(std::memory_order_relaxed))</span><br><span class="line">    &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">yield</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(data == <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you already have a good understanding of atomic operations, you can tell that TSan will again give you the warning. That is because there is only <code>[ ]</code> and no <code>&lt;</code> or <code>&gt;</code>. So, the instructions can still be reordered.</p><p>So here comes another question. Now that just being atomic with <code>std::memory_order_relaxed</code> is not enough, why we still have this option? The answer is simple. Not all accesses to a <code>std::atomic</code> variable requires strict order, and these are the cases where <code>std::memory_order_relaxed</code> is preferred.</p><h2 id="Something-More"><a href="#Something-More" class="headerlink" title="Something More"></a>Something More</h2><p>In the sections above, we learnt how atomic operations work. Now, I’d like to talk about some missing parts.</p><p>First, in our analogy, <code>&lt;</code> and <code>[</code> are not bind together, so are <code>&gt;</code> and <code>]</code>. Therefore, we can have the following execution order.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before reorder: a a &lt; [ b b ] c c</span><br><span class="line"> after reorder: a a &lt; c c [ b b ]</span><br></pre></td></tr></table></figure><p>Then, it leads to another point. Similar to the critical section in lock, we can also create such sections by combining release and acquire. For example, we have <code>A B C D</code>, where <code>B</code> uses release and <code>C</code> uses acquire. In this case, the reorder can only happen between <code>B</code> and <code>C</code>, or instructions outside this fenced area. And because of the atomicity, <code>b</code> and <code>c</code> won’t mess with each other.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before reorder: a a &lt; [ b b ] [ c c ] &gt; d d</span><br><span class="line"> after reorder: a a &lt; [ c c ] [ b b ] &gt; d d</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Hurrah! now you’re welcomed into the atomic world of C++.🎊With atomic operations, you can implement lock-free solutions to concurrent problems for better performance. For example, <a href="https://www.1024cores.net/home/lock-free-algorithms/queues/">lock-free queue</a> in producer-consumer problem.</p><p>But now, take a break and reward yourself with a cup of coffee.☕️ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concurrency </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Sanitizer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tips on Nginx Configuration</title>
      <link href="/posts/Tips-on-Nginx-Configuration/"/>
      <url>/posts/Tips-on-Nginx-Configuration/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;Learn the rules like a pro,</i><br>    <i>so you can break them like an artist.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Pablo Picasso</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>When you use Nginx for static pages, e.g. personal blog, you might not be content with the basic configurations. For example, you may want more unified URL, or redirect URLs with the same resource to only one. Based on my experience on hosting this blog with Nginx, I’ll talk about some useful tips to better serving your static pages.😊</p><div class="note success flat"><p>If you are new to Nginx, you may want to see <a href="/posts/Basic-Serving-and-Proxying-in-Nginx/">Basic Serving and Proxying in Nginx</a> first.😉</p></div><hr><h1 id="Tips-To-Take"><a href="#Tips-To-Take" class="headerlink" title="Tips To Take"></a>Tips To Take</h1><h2 id="Error-Page"><a href="#Error-Page" class="headerlink" title="Error Page"></a>Error Page</h2><p>If Nginx could not find a resource, you’ll see its default error page. However, <del>and of course,</del> this can be configured using <code>error_page</code> option. Here, both 403 and 404 errors are redirected to <code>/404.html</code>.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">403</span> <span class="number">404</span> =<span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that, the URL in user’s browser will not change. Nginx just return <code>404.html</code> as the missing resource.</p><h2 id="Default-Page"><a href="#Default-Page" class="headerlink" title="Default Page"></a>Default Page</h2><p>Usually, the <code>index.html</code> is the default page for a directory. However, users have to explicitly type <code>index.html</code> at the end of the URL. If you want to make it easier for users, you can use <code>index</code> option to specify the default page. You can use <code>autoindex</code> to have Nginx handle this for you. Or you can use <code>index</code> to specify the index HTML file.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    server_name: xx.xx.xx.xx;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /home/wwwroot/;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> /pages/ &#123;</span><br><span class="line">        <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> /also/ &#123;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, you will get <code>/pages/tags/index.html</code> with URL <code>/pages/tags/</code>, and the URL in the browser will still be <code>/pages/tags/</code>.</p><div class="note warning flat"><p>Be warned, <code>autoindex</code> only works for URLs that end with <code>/</code>.</p></div><h2 id="URL-Rewrite"><a href="#URL-Rewrite" class="headerlink" title="URL Rewrite"></a>URL Rewrite</h2><p>It is good to have a default page for a directory. However, this introduce another problem. That is to say, user can access the same page with two different URLs. For example, <code>/some/page/</code> and <code>/some/page/index.html</code> will show the same page. It is bad for SEO, and it will cause the same page to show up as two entries in analytics tools.</p><p>Luckily, Nginx can rewrite the requested URL, so that we can merge them into one. In the following example, we identify trailing <code>index.html</code> and remove it.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$request_uri</span> <span class="regexp">~ &quot;/index.html&quot;</span> ) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/</span> /<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, when user visits <code>/some/page/index.html</code>, the URL will automatically change to <code>/some/page/</code>. All query parameters and anchors will be preserved.</p><div class="note warning flat"><p>Note that URL rewrite will change the URL in user’s browser.</p></div><h2 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h2><p>Suppose you have a domain, so people can visit your website with <code>www.tonys-studio.top</code>. However, some lazy people may just type <code>tonys-studio.top</code>, and find nothing. What’s more, if someone knows your IP, he can also visit your website with <code>xx.xx.xx.xx</code>! Three names for one website, what a mess!😨</p><p>To avoid this, you can redirect all these URLs to <code>www.tonys-studio.top</code>. To achieve this, you can simply declare another <code>server</code> in the same configuration file, and return a 301 redirect.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.tonys-studio.top;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># other configurations</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># redirect all other URLs</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  tonys-studio.top <span class="number">8.130.103.241</span>;</span><br><span class="line">    <span class="attribute">return</span>       <span class="number">301</span> http://www.tonys-studio.top<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will retain the request path and query parameters. However, the host name will be changed to <code>www.tonys-studio.top</code> on the client side.</p><p>The same goes with redirecting HTTP to HTTPS. In this case, we simply add a check for protocol, and redirect to HTTPS if it is HTTP.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.tonys-studio.top;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$http_x_forwarded_proto</span> = <span class="string">&quot;http&quot;</span>) &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># other configurations</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>TLS certificate is required for HTTPS and is quite expensive. However, <a href="https://www.cloudflare.com/">Cloudflare</a> can enable client-side HTTPS for free!😆</p></div><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>This post is mainly based on my experience, and I hope it can be useful for you, too. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Web Servers &amp; Deployment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lightsaber Effect in Photoshop</title>
      <link href="/posts/Lightsaber-Effect-in-Photoshop/"/>
      <url>/posts/Lightsaber-Effect-in-Photoshop/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;You don't know the power of the Dark Side.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Darth Vader</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>As a Star Wars fan, it will come inevitably that you want to have a real lightsaber or a photo of yourself wielding one. A true lightsaber is expensive, while making a picture is free. In this tutorial, I’ll show you how to create a lightsaber effect in Photoshop.</p><hr><h1 id="Making-a-Lightsaber"><a href="#Making-a-Lightsaber" class="headerlink" title="Making a Lightsaber"></a>Making a Lightsaber</h1><h2 id="1-Prepare-an-Image"><a href="#1-Prepare-an-Image" class="headerlink" title="1. Prepare an Image"></a>1. Prepare an Image</h2><p>Of course, the first step is to prepare an image of you or anything that you want to add a lightsaber to. Here we use a LEGO minifigure of Darth Vader.</p><img src="/posts/Lightsaber-Effect-in-Photoshop/image-20241117150051968.png" alt="image-20241117150051968" style="zoom:50%;"><h2 id="2-Mark-the-Lightsaber"><a href="#2-Mark-the-Lightsaber" class="headerlink" title="2. Mark the Lightsaber"></a>2. Mark the Lightsaber</h2><p>In the image, use any selection tool to mark the lightsaber. Usually a Polygonal Lasso Tool is used. Make sure the selection is as accurate as possible. Apply a 5-pixel (or any suitable value) feather to the selection, and create a solid color layer with the selection.</p><img src="/posts/Lightsaber-Effect-in-Photoshop/image-20241117150732468.png" alt="image-20241117150732468" style="zoom:50%;"><p>The color of the solid color layer is the center color of the lightsaber, so typically, it is white.</p><h2 id="3-Ignite-it"><a href="#3-Ignite-it" class="headerlink" title="3. Ignite it!"></a>3. Ignite it!</h2><p>Double-click on the layer, to open the Layer Style dialog. Apply Outer Glow with your favorite color. Adjust the parameters as you wish.</p><img src="/posts/Lightsaber-Effect-in-Photoshop/image-20241117151944924.png" alt="image-20241117151944924" style="zoom:50%;"><div class="note success flat"><p>A tip for you. If you want a smoother edge, you can apply a Gaussian Blur filter to the solid color layer.</p></div><p>And Tada! You have your lightsaber!🎉</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, isn’t it easy? Now use it in your next photo! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Design &amp; Multimedia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Photoshop </tag>
            
            <tag> Graphic Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sanitize Your C/C++ Program With Sanitizers</title>
      <link href="/posts/Sanitize-your-C-C-Program-with-Sanitizers/"/>
      <url>/posts/Sanitize-your-C-C-Program-with-Sanitizers/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;There is no truth. There is only perception.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Gustave Flaubert</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Illegal memory access and memory leaks are the most common bugs in C&#x2F;C++ programming. However, C&#x2F;C++ does not detect such errors by themselves, and these bugs can occur quite randomly and are difficult to reproduce.</p><p>Recently, I was working on a program repair project where I had to fix bugs in C&#x2F;C++ code. I found that sanitizers are very useful in detecting certain types of bugs, such as memory related ones. In this article, I will show you how to use sanitizers to find hidden bugs in your C&#x2F;C++ code.</p><div class="note info flat"><p>The demonstration is done on Ubuntu 20.04 LTS in my WSL2 environment, but it should work everywhere as long as you have the compiler and the necessary tools installed.</p></div><div class="note success flat"><p>Quite a lot of the content in this article is generated by Copilot.😉</p></div><hr><h1 id="Basic-Knowledge"><a href="#Basic-Knowledge" class="headerlink" title="Basic Knowledge"></a>Basic Knowledge</h1><h2 id="What-are-Sanitizers"><a href="#What-are-Sanitizers" class="headerlink" title="What are Sanitizers?"></a>What are Sanitizers?</h2><p>Sanitizers are a set of tools that help you find bugs in your code. They are built into the compiler to enable runtime checks that help you find bugs that are difficult to catch with static analysis tools. The most common sanitizers are:</p><ul><li>AddressSanitizer (ASan): Detects memory errors such as buffer overflows, use-after-free, and other memory corruption bugs.</li><li>UndefinedBehaviorSanitizer (UBSan): Detects undefined behavior in your code.</li><li>MemorySanitizer (MSan): Detects uninitialized memory reads.</li><li>LeakSanitizer (LSan): Detects memory leaks. It already comes with AddressSanitizer.</li><li>ThreadSanitizer (TSan): Detects data race in concurrent programs.</li></ul><p>There are also more specialized sanitizers, such as divide-by-zero sanitizer, etc.</p><h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h2><p>Sanitizers work by instrumenting your code with additional checks. For example, AddressSanitizer adds a redzone around each memory allocation and checks if the program accesses memory outside the allocated region. If it does, the program is terminated and a report is generated.</p><h2 id="How-to-install"><a href="#How-to-install" class="headerlink" title="How to install?"></a>How to install?</h2><p>As mentioned earlier, sanitizers are built into the compiler, so you don’t need to install anything extra. You just need to pass the appropriate flags to the compiler to enable them.</p><hr><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>Let’s start by writing some buggy C programs and then use sanitizers to unveil the bugs. ASAN and UBSAN are the most commonly used sanitizers, so we will focus on them. You can try other sanitizers on your own.</p><p>Here is a list of the most common compiler flags to enable sanitizers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-fsanitize=address   : Enable AddressSanitizer</span><br><span class="line">-fsanitize=undefined : Enable UndefinedBehaviorSanitizer</span><br><span class="line">-fsanitize=memory    : Enable MemorySanitizer</span><br><span class="line">-fsanitize=thread    : Enable ThreadSanitizer</span><br></pre></td></tr></table></figure><p>You can enable multiple sanitizers at once by separating them with a comma. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-fsanitize=address,undefined</span><br></pre></td></tr></table></figure><p>Notice that some sanitizers are not compatible with each other, so you may need to enable them separately. Don’t know which are incompatible? Just try it out.😉</p><h2 id="AddressSanitizer"><a href="#AddressSanitizer" class="headerlink" title="AddressSanitizer"></a>AddressSanitizer</h2><p>AddressSanitizer is the most commonly used sanitizer, which detects the general memory errors in your code. Let’s start with a simple example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">10</span>] = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The 11th character is: %c\n&quot;</span>, buffer[<span class="number">10</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, compile the program without any sanitizers:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o <span class="built_in">test</span> test.c &amp;&amp; ./test</span><br></pre></td></tr></table></figure><p>You will see that the program runs without any error or warning, and that’s how the bug goes unnoticed. Now, let’s compile the program with AddressSanitizer enabled:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fsanitize=address -o <span class="built_in">test</span> test.c &amp;&amp; ./test</span><br></pre></td></tr></table></figure><p>Ka-boom!💥Well, the bug is obvious, AddressSanitizer gives a quite comprehensive report. And notably, it comes with colors.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">=================================================================</span><br><span class="line">==8595==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffca6b4ee6a at pc 0x55e6bbf67380 bp 0x7ffca6b4ee30 sp 0x7ffca6b4ee20</span><br><span class="line">READ of size 1 at 0x7ffca6b4ee6a thread T0</span><br><span class="line">    #0 0x55e6bbf6737f in main (/home/tonix/buaa/repair/omega/gdbtest/test+0x137f)</span><br><span class="line">    #1 0x7fc1a6679082 in __libc_start_main ../csu/libc-start.c:308</span><br><span class="line">    #2 0x55e6bbf6718d in _start (/home/tonix/buaa/repair/omega/gdbtest/test+0x118d)</span><br><span class="line"></span><br><span class="line">Address 0x7ffca6b4ee6a is located in stack of thread T0 at offset 42 in frame</span><br><span class="line">    #0 0x55e6bbf67258 in main (/home/tonix/buaa/repair/omega/gdbtest/test+0x1258)</span><br><span class="line"></span><br><span class="line">  This frame has 1 object(s):</span><br><span class="line">    [32, 42) &#x27;buffer&#x27; (line 5) &lt;== Memory access at offset 42 overflows this variable</span><br><span class="line">HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class="line">      (longjmp and C++ exceptions *are* supported)</span><br><span class="line">SUMMARY: AddressSanitizer: stack-buffer-overflow (/home/tonix/buaa/repair/omega/gdbtest/test+0x137f) in main</span><br><span class="line">Shadow bytes around the buggy address:</span><br><span class="line">  0x100014d61d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61d80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61d90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61da0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61db0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">=&gt;0x100014d61dc0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00[02]f3 f3</span><br><span class="line">  0x100014d61dd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61de0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61df0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61e00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">  0x100014d61e10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class="line">  Addressable:           00</span><br><span class="line">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class="line">  Heap left redzone:       fa</span><br><span class="line">  Freed heap region:       fd</span><br><span class="line">  Stack left redzone:      f1</span><br><span class="line">  Stack mid redzone:       f2</span><br><span class="line">  Stack right redzone:     f3</span><br><span class="line">  Stack after return:      f5</span><br><span class="line">  Stack use after scope:   f8</span><br><span class="line">  Global redzone:          f9</span><br><span class="line">  Global init order:       f6</span><br><span class="line">  Poisoned by user:        f7</span><br><span class="line">  Container overflow:      fc</span><br><span class="line">  Array cookie:            ac</span><br><span class="line">  Intra object redzone:    bb</span><br><span class="line">  ASan internal:           fe</span><br><span class="line">  Left alloca redzone:     ca</span><br><span class="line">  Right alloca redzone:    cb</span><br><span class="line">  Shadow gap:              cc</span><br><span class="line">==8595==ABORTING</span><br></pre></td></tr></table></figure><p>The report is quite detailed and tells you exactly what went wrong. You can see that the program tried to access the 11th character of the buffer, which is outside the allocated region. This is a classic buffer overflow bug, and AddressSanitizer caught it.</p><p>Besides buffer overflow, AddressSanitizer can also detect use-after-free bugs, double-free bugs, and other memory corruption bugs. It is a very powerful tool for finding memory-related bugs in your code.</p><h2 id="UndefinedBehaviorSanitizer"><a href="#UndefinedBehaviorSanitizer" class="headerlink" title="UndefinedBehaviorSanitizer"></a>UndefinedBehaviorSanitizer</h2><p>UndefinedBehaviorSanitizer detects undefined behavior in your code. You may ask, what is undefined behavior? Undefined behavior is when the program does something that the C standard does not define. For example, dividing by zero, dereferencing a null pointer, etc.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = a / b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The result is: %d\n&quot;</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Without sanitizers, the program may simply crash with a floating point exception, which is not very informative. However, if you compile the program with UndefinedBehaviorSanitizer enabled, you will get a more detailed report.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -fsanitize=undefined -o <span class="built_in">test</span> test.c &amp;&amp; ./test</span><br><span class="line">test.c:7:15: runtime error: division by zero</span><br><span class="line">Floating point exception (core dumped)</span><br></pre></td></tr></table></figure><p>Now we know exactly what went wrong, and we can fix the bug.</p><hr><h1 id="More-Options"><a href="#More-Options" class="headerlink" title="More Options"></a>More Options</h1><p>There are some more options you can use with sanitizers to get more detailed reports or to suppress certain warnings.</p><p>By default, sanitizers may not abort the program immediately when an error is detected. Instead, they may continue running the program and report the error at the end. This is useful if you want to see all the errors at once. However, if you want the program to abort immediately after an error is detected, you can set the environment variable ASAN_OPTIONS.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ASAN_OPTIONS=abort_on_error=1</span><br></pre></td></tr></table></figure><p>If you want to see more logs from the sanitizer, set another environment for this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LSAN_OPTIONS=verbosity=1:log_threads=1</span><br></pre></td></tr></table></figure><p>At last, if the program you run requires dynamic libraries, you may encounter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ASAN_OPTIONS=verify_asan_link_order=0</span><br></pre></td></tr></table></figure><p>When you want to specify multiple options, separate them with <code>,</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ASAN_OPTIONS=abort_on_error=1,verify_asan_link_order=0</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Sanitizer is really useful to uncover those hidden 🐞 in your program. Use it to save your life. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Programming Languages </category>
          
          <category> Analysis Tools </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Sanitizer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Document Scan Effect in Photoshop</title>
      <link href="/posts/Document-Scan-Effect-in-Photoshop/"/>
      <url>/posts/Document-Scan-Effect-in-Photoshop/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;It isn't that they can't see the solution.</i><br><i>It is that they can't see the problem.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Gilbert Chesterton</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>When a copy of your document is required, but there is no printer available, what to do? Well, there are plenty of software you can use to apply a document filter so that it looks exactly like what comes out of a printer.</p><p>While there are mobile apps that is capable of doing this, I still prefer a solution on PC partly due to my personal affection. Currently, I’m doing this with Adobe Photoshop. And in the last part, I’ll talk about how to automate this process for batch editing.</p><div class="note info flat"><p>By the time of this post, I’m using Adobe Photoshop 2023.</p></div><hr><h1 id="“Scan”-the-Photo"><a href="#“Scan”-the-Photo" class="headerlink" title="“Scan” the Photo"></a>“Scan” the Photo</h1><h2 id="1-The-original-image"><a href="#1-The-original-image" class="headerlink" title="1. The original image"></a>1. The original image</h2><p>Now, let’s see how to create scan effect in Photoshop. First, prepare our “victim”. 🤯 Here I choose a draft when I was designing my game <a href="/posts/Dungeon/">Dungeon</a>. Open it in Photoshop, and you should get this.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008215423564.png" alt="image-20241008215423564" style="zoom:50%;"><h2 id="2-Basic-scan-effect"><a href="#2-Basic-scan-effect" class="headerlink" title="2. Basic scan effect"></a>2. Basic scan effect</h2><p>In “Layers” dialog, duplicate “Layer 1”, so we could have a mask layer (I’ll call this layer mask later). You can select the layer and press “Ctrl + J” to duplicate it. Or right click on it, and choose “Duplicate layer” in the pop up menu. Then, choose “Divide” for the mask.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008215526852.png" alt="image-20241008215526852" style="zoom:50%;"><p>Now, it’s time to make it look like a scan copy. Select the mask, and apply Gaussian Blur filter to it.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008215811233.png" alt="image-20241008215811233" style="zoom:50%;"><p>In the “Gaussian Blur” dialog, adjust blur radius until you’re satisfied with the result. It may not be perfect, but we can fine-tuning it later.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008220131830.png" alt="image-20241008220131830" style="zoom:50%;"><h2 id="3-Fine-tuning-the-effect"><a href="#3-Fine-tuning-the-effect" class="headerlink" title="3. Fine-tuning the effect"></a>3. Fine-tuning the effect</h2><p>We’ve got a not-bad effect in the last step, and now we’re going to make it better. First, select the mask and add “Curves” to it.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008220416429.png" alt="image-20241008220416429" style="zoom:50%;"><p>You’ll see the curve dialog in the “Properties” tab above layers. Adjust the curves to fine-tune the color and contrast.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008220905529.png" alt="image-20241008220905529" style="zoom:50%;"><p>Finally, save and export. Tada!🎉You get a scan copy of your image!</p><hr><h1 id="Automated-Scanner"><a href="#Automated-Scanner" class="headerlink" title="Automated Scanner"></a>Automated Scanner</h1><div class="note warning flat"><p>The action I created here only works for <code>.jpg</code> files. You can record your own action to support <code>.png</code>.🤔</p></div><p>Now we have another problem. In apps, we can do this with one-click, but here in PS, we have so many steps, and tedious adjustments. So in this chapter, I’ll show you how to automate editing in Photoshop with batch action.</p><h2 id="1-Create-new-action"><a href="#1-Create-new-action" class="headerlink" title="1. Create new action"></a>1. Create new action</h2><p>In the menu, select “Window &gt; Actions” or simply press “Alt + F9”. You’ll see there is already a “Default Actions” set. For clarity, we create a new set called “Scan”.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008222003161.png" alt="image-20241008222003161" style="zoom:50%;"><p>Then, we can add our automated actions in the new set.</p><h2 id="2-Prepare-workspace"><a href="#2-Prepare-workspace" class="headerlink" title="2. Prepare workspace"></a>2. Prepare workspace</h2><p>Before we start recording, some preparation is needed. The purpose of this is to simulate the input for the action. The input is simple, just open any image to edit.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008224155602.png" alt="image-20241008224155602" style="zoom:50%;"><div class="note info flat"><p>This preparation is not necessary and you can record “Open” action later. I’ll talk about this difference later in the <a href="#Open-Image">next step</a>.</p></div><h2 id="3-Record-action"><a href="#3-Record-action" class="headerlink" title="3. Record action"></a>3. Record action</h2><h3 id="3-1-Start-recording"><a href="#3-1-Start-recording" class="headerlink" title="3.1 Start recording"></a>3.1 Start recording</h3><p>On the bottom of the panel, click “New Action”. I already have “Default Scan” action created, so here I’ll create another called “Style 2” since the parameters may differ slightly.</p><p>The following image is starting recording without preparation. Otherwise, start recording with that opened image window focused.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008222233506.png" alt="image-20241008222233506" style="zoom: 33%;"><p>After you click “Record”, the action panel will go online.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008222403677.png" alt="image-20241008222403677" style="zoom:50%;"><h3 id="3-2-Open-image"><a href="#3-2-Open-image" class="headerlink" title="3.2 Open image"></a>3.2 Open image</h3><p>If you’ve done the preparation, just switch to that opened image. If not, just open it. The difference is that, the latter will have an explicit open action.</p><p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008225308220.png" alt="image-20241008225308220"></p><h3 id="3-3-Record-actions"><a href="#3-3-Record-actions" class="headerlink" title="3.3 Record actions"></a>3.3 Record actions</h3><p>Now, do what you did in the <a href="#Scan-the-Photo">last chapter</a>. Don’t tell me you’ve already forgot it.🥹</p><div class="note info flat"><p>If you take wrong steps, you can stop recording and delete the bad steps. And of course, you need to undo till the last correct step.</p></div><h3 id="3-4-Save-image"><a href="#3-4-Save-image" class="headerlink" title="3.4 Save image"></a>3.4 Save image</h3><p>There is one thing I missed though. For batch processing, we may not want to save a <code>.psd</code> for each image. So we just “Save a copy” and export it as <code>.jpg</code>.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008223256999.png" alt="image-20241008223256999" style="zoom:50%;"><p>After saving, the action is done, and you can stop recording.</p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008224700804.png" alt="image-20241008224700804" style="zoom:50%;"><p>See, not that difficult, huh?😉</p><h2 id="4-Use-action"><a href="#4-Use-action" class="headerlink" title="4. Use action"></a>4. Use action</h2><p>Now that we have the action, how to use it?</p><p>Go to “File &gt; Automate &gt; Batch…”, and you’ll get the Batch dialog. Choose the action we recorded just now. Additionally, you can choose source and destination and many more.</p><p><img src="/posts/Document-Scan-Effect-in-Photoshop/image-20241008231627526.png" alt="image-20241008231627526"></p><p>If you included “Open” in your action, then you need to check “Override Action ‘Open’ Commands”. And similarly, “Save as” command is also overridden. Click OK, and see Photoshop working by itself!😁</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>It’s a small trick, but I want to save it in case I forget it sometime in the future. Anyway, enjoy! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Design &amp; Multimedia </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Photoshop </tag>
            
            <tag> Graphic Design </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Object Lifecycle</title>
      <link href="/posts/C-Object-Lifecycle/"/>
      <url>/posts/C-Object-Lifecycle/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;I need to see,</i><br>    <i>the truth other men cannot see,</i><br>    <i>to be things that others can't be!</i><br>    <i>Give me courage to go where no angel will go!</i><br>    <i>And I will go!</i><br>    <i>I need to know!&rdquo;</i></p><p style="text-align: right"><i>&mdash; Jekyll &amp; Hyde</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>As a C++ developer, or have some experience in C++, did you ever stop coding, staring at the monitor, deciding which parameter to use. To be specific, is pass by value, const reference or r-value.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(<span class="type">const</span> Object&amp; obj)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(Object&amp;&amp; obj)</span></span>;</span><br></pre></td></tr></table></figure><p>I know why you stop at this, because you worries about the constructor overhead. That’s good, but don’t waste time on this every time. </p><p>So in this article, I’ll break down the constructor&#x2F;destructor call for each of these types of parameters, thus you can confidently choose the best combination for your code.</p><hr><h1 id="Instrument-Utilities"><a href="#Instrument-Utilities" class="headerlink" title="Instrument Utilities"></a>Instrument Utilities</h1><h2 id="Subject-class"><a href="#Subject-class" class="headerlink" title="Subject class"></a>Subject class</h2><p>Before we start, we have to think of a way to visualize the object’s lifecycle. This is simple, just put an output statement in each of these functions. So here is our <code>Object</code> class.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Object</span>() : _data(<span class="number">0</span>) &#123; cout &lt;&lt; <span class="string">&quot;Default constructor       (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>(<span class="type">int</span> data) : _data(data)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parameterized constructor (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>(<span class="type">const</span> Object&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Copy constructor          (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        _data = other._data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>(Object&amp;&amp; other) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Move constructor          (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        _data = other._data;</span><br><span class="line">        other._data = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Object&amp; other)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Copy assignment operator  (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other)</span><br><span class="line">        &#123;</span><br><span class="line">            _data = other._data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object&amp; <span class="keyword">operator</span>=(Object&amp;&amp; other) <span class="keyword">noexcept</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Move assignment operator  (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other)</span><br><span class="line">        &#123;</span><br><span class="line">            _data = other._data;</span><br><span class="line">            other._data = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Object</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_data != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Destructor                (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Destructor (moved)        (&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> <span class="type">const</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Data: &quot;</span> &lt;&lt; _data &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>We also add a <code>_data</code> field for parameterized constructor. And to mimic real move constructor and operator, we use <code>-1</code> to represent a “moved” object, which shouldn’t be used anymore.</p><h2 id="Scope-indicator"><a href="#Scope-indicator" class="headerlink" title="Scope indicator"></a>Scope indicator</h2><p>The basic knowledge you should know is that in C++, object lives in the current scope, and is guaranteed to be destroyed reaches the end of the scope. So we can use this as a trick to display the span of a scope.</p><div class="note info flat"><p>I first learnt this trick from Scott Mayer’s <em>Effective C++</em>, where he mentioned a way to measure the execution time of a scope.</p></div><p>So here it is, I call it <code>Fence</code>. To tell scope and function call apart, I used a <code>scope</code> flag, thus it may look a little bit verbose.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fence</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Fence</span>(<span class="type">bool</span> scope, <span class="type">const</span> <span class="type">char</span>* message) : _scope(scope)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_scope)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;========== &quot;</span> &lt;&lt; message &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&gt;&gt;&gt;&gt;&gt; &quot;</span> &lt;&lt; message &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Fence</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_scope)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;----------&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">bool</span> _scope;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then, to simplify the use of this class, we can use macro to wrap this. To indicate scope, we can use the following macro.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BEGIN_SCOPE(message) do &#123; Fence __scope_fence(true, message)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> END_SCOPE()          &#125; while (0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">    <span class="built_in">END_SCOPE</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="comment">// some other code</span></span><br><span class="line">    <span class="built_in">END_SCOPE</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// other code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To indicate function, we could also use a compiler macro to avoid writing function name twice. And since we record the complete function, so we don’t need to introduce a nested scope.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _BEGIN_CALL(func)    Fence __call_fence(false, func)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEGIN_CALL()         _BEGIN_CALL(__func__)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(<span class="comment">/* some parameters */</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beside, here is another macro to add blank line to the output.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> BR()                 std::cout &lt;&lt; std::endl</span></span><br></pre></td></tr></table></figure><hr><h1 id="Lifecycle-Breakdown"><a href="#Lifecycle-Breakdown" class="headerlink" title="Lifecycle Breakdown"></a>Lifecycle Breakdown</h1><div class="note info flat"><p>I write no comment in code, so that you can think about the result first. 🤔 And all experiments are done with MSVC in Visual Studio 2022. Both Debug and Release profiles output the same.</p></div><h2 id="Object-creation"><a href="#Object-creation" class="headerlink" title="Object creation"></a>Object creation</h2><p>First, let’s see how C++ handle object creation. We create these objects to see all possible constructor and operators.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Create&quot;</span>);</span><br><span class="line">    <span class="function">Object <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    Object obj2 = <span class="built_in">Object</span>(<span class="number">15</span>);</span><br><span class="line">    <span class="function">Object <span class="title">obj3</span><span class="params">(obj2)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">obj4</span><span class="params">(std::move(obj3))</span></span>;</span><br><span class="line">    obj = obj2;</span><br><span class="line">    obj = <span class="built_in">Object</span>(<span class="number">25</span>);</span><br><span class="line">    obj = std::<span class="built_in">move</span>(obj2);</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>Running this, we’ll have the following output.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">========== Create</span><br><span class="line">Parameterized constructor (0000009D83FDF004)</span><br><span class="line">Parameterized constructor (0000009D83FDF024)</span><br><span class="line">Copy constructor          (0000009D83FDF044)</span><br><span class="line">Move constructor          (0000009D83FDF064)</span><br><span class="line">Copy assignment operator  (0000009D83FDF004)</span><br><span class="line">Parameterized constructor (0000009D83FDF4E4)</span><br><span class="line">Move assignment operator  (0000009D83FDF004)</span><br><span class="line">Destructor (moved)        (0000009D83FDF4E4)</span><br><span class="line">Move assignment operator  (0000009D83FDF004)</span><br><span class="line">Destructor                (0000009D83FDF064)</span><br><span class="line">Destructor (moved)        (0000009D83FDF044)</span><br><span class="line">Destructor (moved)        (0000009D83FDF024)</span><br><span class="line">Destructor                (0000009D83FDF004)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>It’s a bit long, so I’ll break it down one by one.</p><p>First, no doubt that <code>Object obj(10);</code> calls the parameterized constructor. Then, for <code>Object obj2 = Object(15);</code>,  <code>=</code> will also invoke the constructor instead of the operator because it is considered to be variable definition. Following <code>Object obj3(obj2);</code> and <code>Object obj4(std::move(obj3));</code> obviously calls copy and move constructor.</p><div class="note warning success flat"><p>Constructor can be taken as a special function call, and soon I’ll talk about parameter passing in functions.</p></div><p>Then, for regular assignment statement, we’ll call the corresponding operator. And here comes the overhead. If you assign a temporary value to a variable, e.g. <code>obj = Object(25)</code>, an extra object will be created with move operator invoked. At last, variable or moved one to variable only invokes copy and move operator as we expected.</p><p>So for this part, we can conclude that, only a temporary value assignment will cause a little overhead. Although temporary value in initialization can be optimized, compiler doesn’t seem to care about that in assignment. I think that’s what temporary value meant to be. However, it invokes the move assignment, so it has little impact if you have a good “move”.</p><h2 id="Return-Value-Optimization"><a href="#Return-Value-Optimization" class="headerlink" title="Return Value Optimization"></a>Return Value Optimization</h2><p>There is a special case in object creation, which is called return value optimization (RVO). It eliminates the redundant copy for named or temporary objects when it plays as the return value. And that means, it will create the object directly at the caller’s scope. For example, we have the following function that returns an object.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">CreateA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();      <span class="comment">// equivalent to </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>(<span class="number">10</span>); <span class="comment">// return &#123; 10 &#125;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Object <span class="title">CreateB</span><span class="params">(<span class="type">int</span> option)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    <span class="function">Object <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">obj2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (option == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> obj2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And we can write the test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Return Value Optimization&quot;</span>);</span><br><span class="line">    Object obj = <span class="built_in">CreateA</span>();</span><br><span class="line">    obj = <span class="built_in">CreateA</span>();</span><br><span class="line">    Object obj2 = <span class="built_in">CreateB</span>(<span class="number">1</span>);</span><br><span class="line">    obj = <span class="built_in">CreateB</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CreateA</span>();</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>The output is as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">========== Return Value Optimization</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; CreateA</span><br><span class="line">Parameterized constructor (000000781551F284)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; CreateA</span><br><span class="line">Parameterized constructor (000000781551F704)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Move assignment operator  (000000781551F284)</span><br><span class="line">Destructor (moved)        (000000781551F704)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; CreateB</span><br><span class="line">Parameterized constructor (000000781551F064)</span><br><span class="line">Parameterized constructor (000000781551F084)</span><br><span class="line">Move constructor          (000000781551F2A4)</span><br><span class="line">Destructor (moved)        (000000781551F084)</span><br><span class="line">Destructor                (000000781551F064)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; CreateB</span><br><span class="line">Parameterized constructor (000000781551F064)</span><br><span class="line">Parameterized constructor (000000781551F084)</span><br><span class="line">Move constructor          (000000781551F724)</span><br><span class="line">Destructor                (000000781551F084)</span><br><span class="line">Destructor (moved)        (000000781551F064)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Move assignment operator  (000000781551F284)</span><br><span class="line">Destructor (moved)        (000000781551F724)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; CreateA</span><br><span class="line">Parameterized constructor (000000781551F744)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (000000781551F744)</span><br><span class="line">Destructor                (000000781551F2A4)</span><br><span class="line">Destructor                (000000781551F284)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>The best situation for RVO is when the returned object is unique, which is our <code>CreateA</code> here. We can see that there is literally no extra constructor invoked for <code>Object obj = CreateA();</code>, and <code>obj = CreateA();</code> only calls the move operator. This is what we wish for.</p><p>However, our program may get more complex. For <code>CreateB</code>, there are two choices for return, so we cannot perfectly apply RVO, but we can still optimize it to use a move constructor only to initialize it in the caller. However, we can make it better by placing <code>obj</code> and <code>obj2</code> in their corresponding <code>if</code>-<code>else</code> scope, so that perfect RVO can be applied.</p><p>One thing to notice is that, when RVO applied, the object is constructed in callee, and destructed in caller.</p><div class="note info flat"><p>The condition for perfect RVO is that (I guess), the declaration of each return value does not <strong>dominate</strong> return statements that return other value. So that there will be no conflict in deciding their location in caller’s scope.</p><p>What is <strong>dominate</strong> then? To put it simple, if A dominates B, then every execution path to B must pass A first.</p></div><p>If a meticulous reader, you are, then you may ask, why use this verbose <code>if</code>-<code>else</code> instead of a ternary operator? Good question. We can test that.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">CreateB</span><span class="params">(<span class="type">int</span> option)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    <span class="function">Object <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">obj2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> option ? obj : obj2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Surprisingly (or not if you just know that), it results in a copy constructor instead of move!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt; CreateB</span><br><span class="line">Parameterized constructor (00000036E174F364)</span><br><span class="line">Parameterized constructor (00000036E174F384)</span><br><span class="line">Copy constructor          (00000036E174F5C4)</span><br><span class="line">Destructor                (00000036E174F384)</span><br><span class="line">Destructor                (00000036E174F364)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure><p>Why? Because compiler is not that aggressive. RVO only applies for one return value, but ternary operator makes it an expression (to be more specific, a l-value). So even if they are semantically equivalent, compiler will take the conservative choice to use copy instead of move.</p><h2 id="Parameter-passing"><a href="#Parameter-passing" class="headerlink" title="Parameter passing"></a>Parameter passing</h2><p>Then, let’s see how C++ prepare the function parameters. To better understand this, you may need a quick look at the stack frame in C&#x2F;C++.</p><p><img src="/posts/C-Object-Lifecycle/Stackframe.svg" alt="Stackframe"></p><p>The arguments are placed on top of caller’s stack, so that callee can find it without knowing caller’s stack layout. And all that that implies, when passing arguments, we are initializing them in the <em>out going args</em> segment. So the arguments are actually in caller’s scope.</p><h3 id="Pass-by-value"><a href="#Pass-by-value" class="headerlink" title="Pass by value"></a>Pass by value</h3><p>To see it in action, let’s define a simple function with a value parameter and test it.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pass</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    object.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Pass by value&quot;</span>);</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="built_in">Pass</span>(obj);</span><br><span class="line">    <span class="built_in">Pass</span>(std::<span class="built_in">move</span>(obj));</span><br><span class="line">    <span class="built_in">Pass</span>(<span class="built_in">Object</span>(<span class="number">20</span>));</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>The output will be as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">========== Pass by value</span><br><span class="line">Default constructor       (0000006B984FF868)</span><br><span class="line">Copy constructor          (0000006B984FF870)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; Pass</span><br><span class="line">Data: 0</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (0000006B984FF870)</span><br><span class="line">Move constructor          (0000006B984FF870)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; Pass</span><br><span class="line">Data: 0</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (0000006B984FF870)</span><br><span class="line">Parameterized constructor (0000006B984FF870)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; Pass</span><br><span class="line">Data: 20</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (0000006B984FF870)</span><br><span class="line">Destructor (moved)        (0000006B984FF868)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>First <code>Object obj;</code> will call default constructor to initialize the object in <em>local variable</em> segment. When calling <code>Pass(obj)</code>, it will first copy the object to the <em>out going args</em> segment which invokes copy constructor. Similarly, we can use <code>std::move</code> to invoke move constructor instead. And finally, we can pass a temporary object, which will construct the argument on site, with no extra copy or move.</p><div class="note success flat"><p>Are we getting it? It is the same as what we talked about the object initialization in <a href="#Object-creation">Object creation</a>.</p></div><p>So we can conclude that, pass by value may not be a good choice if we pass large objects often, and that’s why modern IDE suggests you use const reference instead.</p><h3 id="Pass-by-const-reference"><a href="#Pass-by-const-reference" class="headerlink" title="Pass by (const) reference"></a>Pass by (const) reference</h3><p>As we know, reference is a grammar sugar for pointers. Passing a reference is actually passing a pointer, so there is literally no overhead. Which is why we like it.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PassCopy</span><span class="params">(<span class="type">const</span> Object&amp; object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    object.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Pass Copy&quot;</span>);</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="built_in">PassCopy</span>(obj);</span><br><span class="line">    <span class="built_in">PassCopy</span>(<span class="built_in">Object</span>(<span class="number">20</span>));</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>The output is as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">========== Pass Copy</span><br><span class="line">Default constructor       (0000009D4A8FF878)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; PassCopy</span><br><span class="line">Data: 0</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Parameterized constructor (0000009D4A8FF874)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; PassCopy</span><br><span class="line">Data: 20</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (0000009D4A8FF874)</span><br><span class="line">Destructor                (0000009D4A8FF878)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>We can see that, when using reference, no extra copy or move is needed, only the reference is passed. Which is why we prefer to use reference for large objects. In order not to accidentally modify the argument, we can add <code>const</code> to it.</p><div class="note warning flat"><p>Not that, simply using reference cannot accept constant parameter or temporary value. But const reference can bind everything.</p></div><h3 id="Pass-by-R-value-reference"><a href="#Pass-by-R-value-reference" class="headerlink" title="Pass by R-value reference"></a>Pass by R-value reference</h3><p>It is rare, but let’s not omit it. Passing by R-value requires that the argument is a R-value. <del>Duh</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PassMove</span><span class="params">(Object&amp;&amp; object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    object.<span class="built_in">Print</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Pass Move&quot;</span>);</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="built_in">PassMove</span>(<span class="built_in">Object</span>(<span class="number">30</span>));</span><br><span class="line">    <span class="comment">// ConsumeMove(obj);    // compile error</span></span><br><span class="line">    <span class="built_in">PassMove</span>(std::<span class="built_in">move</span>(obj));</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>Notice that, R-value parameter does not accept L-value, so we must explicitly move our L-value to match the type.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">========== Pass Move</span><br><span class="line">Default constructor       (0000009D4A8FF878)</span><br><span class="line">Parameterized constructor (0000009D4A8FF874)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; PassMove</span><br><span class="line">Data: 30</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (0000009D4A8FF874)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; PassMove</span><br><span class="line">Data: 0</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (0000009D4A8FF878)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>Since <code>std::move</code> works as a type cast, and not actual assignment happens, our <code>obj</code> is not really moved.</p><h2 id="Parameter-consuming"><a href="#Parameter-consuming" class="headerlink" title="Parameter consuming"></a>Parameter consuming</h2><p>Sometimes, especially in constructor, we need to copy the argument to initialize the certain members. In this case, which type of argument has lower overhead? Instead of calling <code>Print</code> only, we may have an initialization or assignment.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Consume</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    <span class="keyword">auto</span> o = object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The argument part is clear as we’ve talked about just now, the only thing different is that we now have a new copy or move constructor. Of course passing by value is a terrible choice, so which one should we use? L-value reference or R-value reference?</p><p>But we cannot use R-value reference as it cannot bind L-value, so does it mean that L-value reference is our only choice? The answer is no. If you use <a href="https://www.jetbrains.com/resharper/">ReSharper</a>, you might have seen such a suggestion.</p><p><img src="/posts/C-Object-Lifecycle/image-20241001160546356.png" alt="image-20241001160546356"></p><p>This problem can be demonstrated by the following function. Pass by reference, by value then move it.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConsumeCopy</span><span class="params">(<span class="type">const</span> Object&amp; object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    <span class="keyword">auto</span> o = object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ConsumeValueMove</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BEGIN_CALL</span>();</span><br><span class="line">    <span class="keyword">auto</span> o = std::<span class="built_in">move</span>(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To tell which one is better, we can have a little test. There are but two types of arguments, L-value and R-value. So we call each once to see the overhead.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Pass by Reference&quot;</span>);</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="built_in">ConsumeCopy</span>(obj);</span><br><span class="line">    <span class="built_in">ConsumeCopy</span>(<span class="built_in">Object</span>(<span class="number">66</span>));</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Modernize Pass by Value&quot;</span>);</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="built_in">ConsumeValueMove</span>(obj);</span><br><span class="line">    <span class="built_in">ConsumeValueMove</span>(<span class="built_in">Object</span>(<span class="number">99</span>));</span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>The result is not that surprising, pass by reference has fewer output, thus seems to be a better choice.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">========== Reference</span><br><span class="line">Default constructor       (000000E46D4FF788)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; ConsumeCopy</span><br><span class="line">Copy constructor          (000000E46D4FF790)</span><br><span class="line">Destructor                (000000E46D4FF790)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Parameterized constructor (000000E46D4FF784)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; ConsumeCopy</span><br><span class="line">Copy constructor          (000000E46D4FF744)</span><br><span class="line">Destructor                (000000E46D4FF744)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor                (000000E46D4FF784)</span><br><span class="line">Destructor                (000000E46D4FF788)</span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">========== Modernize Pass by Value</span><br><span class="line">Default constructor       (000000E46D4FF784)</span><br><span class="line">Copy constructor          (000000E46D4FF790)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; ConsumeValueMove</span><br><span class="line">Move constructor          (000000E46D4FF738)</span><br><span class="line">Destructor                (000000E46D4FF738)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor (moved)        (000000E46D4FF790)</span><br><span class="line">Parameterized constructor (000000E46D4FF790)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; ConsumeValueMove</span><br><span class="line">Move constructor          (000000E46D4FF738)</span><br><span class="line">Destructor                (000000E46D4FF738)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">Destructor (moved)        (000000E46D4FF790)</span><br><span class="line">Destructor                (000000E46D4FF784)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>It may be a little long, so let’s summarize it, except <code>Object obj;</code>, we have the following statistics. Since a moved object’s destructor will also do fewer recycling, I count it individually.</p><table><thead><tr><th align="center"></th><th align="center">Pass by reference</th><th align="center">Pass by value then move</th><th align="center">Difference</th></tr></thead><tbody><tr><td align="center">(Parameterized) Constructor</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">Copy Constructor</td><td align="center">2</td><td align="center">1</td><td align="center">-1</td></tr><tr><td align="center">Move Constructor</td><td align="center">0</td><td align="center">2</td><td align="center">+2</td></tr><tr><td align="center">Destructor</td><td align="center">3</td><td align="center">2</td><td align="center">-1</td></tr><tr><td align="center">Destructor (moved)</td><td align="center">0</td><td align="center">2</td><td align="center">+2</td></tr></tbody></table><p>If both types of the arguments are passed with a roughly equal possibility, the overhead is related to the efficiency of copy and move. If the cost of copy and move are the same, then apparently pass by reference is better. You may choose the other only if move is much more efficient than copy.</p><p>However, if the argument is always (or most of the time) a temporary value, you may need to reconsider your choice. For example, if you use a string as the name of an object, then this string will most likely come from a temporary value. </p><table><thead><tr><th align="center"></th><th align="center">Pass by reference</th><th align="center">Pass by value then move</th><th align="center">Difference</th></tr></thead><tbody><tr><td align="center">(Parameterized) Constructor</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">Copy Constructor</td><td align="center">1</td><td align="center">0</td><td align="center">-1</td></tr><tr><td align="center">Move Constructor</td><td align="center">0</td><td align="center">1</td><td align="center">+1</td></tr><tr><td align="center">Destructor</td><td align="center">2</td><td align="center">1</td><td align="center">-1</td></tr><tr><td align="center">Destructor (moved)</td><td align="center">0</td><td align="center">1</td><td align="center">+1</td></tr></tbody></table><p>In this case, pass by value then move it can be a better choice.</p><h2 id="Objects-in-Array"><a href="#Objects-in-Array" class="headerlink" title="Objects in Array"></a>Objects in Array</h2><p>There is one thing we missed, that is array. What about the objects in array? For this, we can also write a simple test.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BEGIN_SCOPE</span>(<span class="string">&quot;Array&quot;</span>);</span><br><span class="line">    Object obj[<span class="number">2</span>] &#123; <span class="number">1</span> &#125;;</span><br><span class="line">    Object* pObj = <span class="keyword">new</span> Object[<span class="number">2</span>] &#123; <span class="number">1</span> &#125;;</span><br><span class="line">    obj[<span class="number">1</span>] = <span class="built_in">Object</span>(<span class="number">33</span>);</span><br><span class="line">    <span class="keyword">delete</span>[] pObj;  <span class="comment">// remember this</span></span><br><span class="line">    pObj = <span class="built_in">static_cast</span>&lt;Object*&gt;(<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Object) * <span class="number">2</span>));</span><br><span class="line">    pObj[<span class="number">0</span>].<span class="built_in">Print</span>();</span><br><span class="line">    <span class="built_in">free</span>(pObj);     <span class="comment">// don&#x27;t forget this also</span></span><br><span class="line"><span class="built_in">END_SCOPE</span>();</span><br></pre></td></tr></table></figure><p>By running it, we’ll have the following output.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">========== Array</span><br><span class="line">Parameterized constructor (000000C30472FEB8)</span><br><span class="line">Default constructor       (000000C30472FEBC)</span><br><span class="line">Parameterized constructor (00000299414B7028)</span><br><span class="line">Default constructor       (00000299414B702C)</span><br><span class="line">Parameterized constructor (000000C30472FEA0)</span><br><span class="line">Move assignment operator  (000000C30472FEBC)</span><br><span class="line">Destructor (moved)        (000000C30472FEA0)</span><br><span class="line">Destructor                (00000299414B702C)</span><br><span class="line">Destructor                (00000299414B7028)</span><br><span class="line">Data: 997392451</span><br><span class="line">Destructor                (000000C30472FEBC)</span><br><span class="line">Destructor                (000000C30472FEB8)</span><br><span class="line">----------</span><br></pre></td></tr></table></figure><p>We can see that, array will call the default constructor on each element, so will the <code>new</code> operator. Correspondingly, their destructor will also be called. So it introduces a problem that you have to provide a default constructor or explicitly initialize every element on creation. Of course there is a work around, that is using <code>malloc</code> and <code>free</code>. But in this case you will also lose the destructor.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>I have wished to take a deep look at how C++ handle objects for long, and now this is the day, <del>when I send all my doubts and daemons on their way, …</del></p><p>Anyway, it helps me to understand the object lifecycle in C++, and hope this post can also help you. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cheat Sheet</title>
      <link href="/posts/Git-Cheat-Sheet/"/>
      <url>/posts/Git-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;It's what you do in the present that will redeem the past and thereby change the future.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Paulo Coelho</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>This is a collection of useful Git commands that is helpful but in rare cases.</p><div class="note info flat"><p>This article will be updated from time to time.</p></div><blockquote><p>You may also like: <a href="/posts/Linux-Cheat-Sheet/">Linux Cheat Sheet</a><br>You may also like: <a href="/posts/Docker-Cheat-Sheet/">Docker Cheat Sheet</a></p></blockquote><hr><h1 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h1><p><strong>Remove committed files after updating <code>.gitignore</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached . <span class="comment"># Remove the files from the index</span></span><br><span class="line">git add .            <span class="comment"># Commit again</span></span><br><span class="line">git commit -m <span class="string">&quot;update: re-ignore files&quot;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Development Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Voice Chat Using TeamSpeak</title>
      <link href="/posts/Setup-Voice-Chat-Using-TeamSpeak/"/>
      <url>/posts/Setup-Voice-Chat-Using-TeamSpeak/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;I watched your face from the shadows,</i><br><i>distant through all the applause.</i><br><i>I hear you voice in the darkness,</i><br><i>yet the words aren't yours.&rdquo;</i></p><p style="text-align: right; font-family: var(--font-phantom)">&mdash; THE PHANTOM OF THE OPERA</p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Do you play PVP in your favorite game? If so, do you talk with your friends? And again, is the built-in voice chat satisfying? I’m afraid not. Games only provide the basic voice function, which is not optimal. Therefore, you may need a dedicated voice chat software.</p><p>Here, I’d like to introduce to you &mdash; <a href="https://www.teamspeak.com/">TeamSpeak</a>. Below is its bio.</p><blockquote><p>&ldquo;Use crystal clear sound to communicate with your team mates cross-platform with military-grade security, lag-free performance &amp; unparalleled reliability and uptime.&rdquo;</p></blockquote><p>You can directly use the public servers, but in case you’re not able to connect, or having a high ping, I’ll show you how to setup your own server.</p><div class="note success flat"><p>TeamSpeak is totally free for small team no more than 32 members, so don’t worry about your money.💸</p></div><hr><h1 id="Client-Setup"><a href="#Client-Setup" class="headerlink" title="Client Setup"></a>Client Setup</h1><p>Go to its <a href="https://www.teamspeak.com/en/downloads/#ts5client">download page</a> for the latest TS5 Client. After account registration, you are off to go! 😀</p><div class="note warning flat"><p>You may find the verification link in the junk email.😥</p></div><p>In the dashboard, you can find all the public servers around the world. Pick one and test your voice. If it fails to initialize connection, don’t worry, you can set up your own in the following chapter.</p><img src="/posts/Setup-Voice-Chat-Using-TeamSpeak/image-20240829230242565.png" alt="image-20240829230242565" style="zoom:50%;"><p>There are more features for you to explore, have fun!</p><hr><h1 id="Server-Setup"><a href="#Server-Setup" class="headerlink" title="Server Setup"></a>Server Setup</h1><div class="note warning flat"><p>Well apparently, you need a server to continue. 🥺</p></div><h2 id="Initialize-Server"><a href="#Initialize-Server" class="headerlink" title="Initialize Server"></a>Initialize Server</h2><div class="note info flat"><p>You should allow UDP at port 9987 on your server, which is the default port used by TeamSpeak.</p></div><p>Go to the <a href="https://www.teamspeak.com/en/downloads/#server">server download</a> next to the client, and you’ll get a <code>tar.bz2</code> archive. I recommend you create a new directory to store the server, and untar it. Choose 32bit or 64bit depending on your server. Below is the 64bit version.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvjf teamspeak3-server_linux_amd64-3.13.7.tar.bz2</span><br></pre></td></tr></table></figure><p>Then, go to the directory, and run the start script.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> teamspeak3-server_linux_amd64-3.13.7</span><br><span class="line">./ts3server_startscript.sh start</span><br></pre></td></tr></table></figure><p>On the first launch, you’ll be prompted with the privilege key with the following text. It makes you the Administrator of your server, so make sure you have it copied.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServerAdmin privilege key created, please use it to gain </span><br><span class="line">serveradmin rights for your virtualserver. Please also</span><br><span class="line">check the doc/privilegekey_guide.txt for details.</span><br><span class="line"></span><br><span class="line">token=gOu.............................E9</span><br></pre></td></tr></table></figure><p>Then, go to TeamSpeak client, enter your server’s IP, and connect. On your first connection, you’ll be prompt to enter the privilege key in the last step. After that, you are the master of your server!</p><img src="/posts/Setup-Voice-Chat-Using-TeamSpeak/image-20240829233305111.png" alt="image-20240829233305111" style="zoom:50%;"><p>After connection, you can see the active server on the left panel. By default, everyone is in the Default Channel. By clicking the server on the left, you can open the chat panel. By the way, see how fast it is with your private server? Extremely low ping.</p><img src="/posts/Setup-Voice-Chat-Using-TeamSpeak/image-20240829233657638.png" alt="image-20240829233657638" style="zoom:50%;"><p>Additionally, you can change the server settings, such as adding a password and many more.</p><img src="/posts/Setup-Voice-Chat-Using-TeamSpeak/image-20240829234029528.png" alt="image-20240829234029528" style="zoom:50%;"><p>Great, now go invite your friend to have a chat!🎉</p><h2 id="Utility-Scripts"><a href="#Utility-Scripts" class="headerlink" title="Utility Scripts"></a>Utility Scripts</h2><p>However, you may notice something annoying. The server runs in the foreground, which means it shuts down if you close the SSH session with your server. To solve this, we can put it background.</p><p>To make it simple, I renamed the long name <code>teamspeak3-server_linux_amd64-3.13.7</code> to <code>server</code>. Then, create a <code>start.sh</code> and <code>stop.sh</code> next to it, so your workspace will look like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">teamspeak</span><br><span class="line">|-- server</span><br><span class="line">|-- start.sh</span><br><span class="line">\-- stop.sh</span><br></pre></td></tr></table></figure><p>In <code>start.sh</code>, you need to set an environment variable to indicate that you agree the License. It is optional for you to save the PID in a file. But notice that, the TeamSpeak server also uses <code>ts3server.pid</code>, so don’t mess them up, or the server won’t be started or stopped correctly.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TS3SERVER_LICENSE=accept</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> server</span><br><span class="line">./ts3server_startscript.sh start &amp;</span><br><span class="line"><span class="built_in">echo</span> $! &gt; ../ts3server.pid</span><br></pre></td></tr></table></figure><p>Then, in <code>stop.sh</code>, just stop it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TS3SERVER_LICENSE=accept</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> server</span><br><span class="line">./ts3server_startscript.sh stop</span><br></pre></td></tr></table></figure><p>Now, you can simply start&#x2F;stop your TeamSpeak server in the background!🎊</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Let the professional handle this. And TeamSpeak is the solution to voice chat in game. And perhaps, more than game? ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Voice Chat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kane&#39;s Wrath Launch Error Troubleshoot</title>
      <link href="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/"/>
      <url>/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;In the name of Kane!&rdquo;</i></p><p style="text-align: right"><i>&mdash; Command &amp; Conquer</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><div class="note primary flat"><p>I’m being sentimental here, you can jump to the <a href="#Ka-Boom-%F0%9F%92%A5">next section</a>. 😖</p></div><p>“Welcome back, Commander”</p><p>About three years ago, I bought the <a href="https://www.ea.com/games/command-and-conquer">Command &amp; Conquer&trade; Ultimate Collection</a>. Although I’ve played <a href="https://cnc-comm.com/red-alert-2">Red Alert 2</a> since I was little, it is the first time I purchased a legal copy of the game. At first, I just want to have Red Alert 2, and of course its expansion <a href="https://cnc-comm.com/red-alert-2/yuris-revenge">Yuri’s Revenge</a>, but why not try something new?</p><p>So I tried <a href="https://www.ea.com/games/command-and-conquer/command-and-conquer-red-alert-3">Red Alert 3</a>, which is not what I expected. It does have fancy effects in game, but it lost it essence as a sequel to Red Alert 2.</p><p>Then, it comes to <a href="https://cnc-comm.com/tiberian-sun/downloads/the-game/installer">Tiberian Sun</a>. Old game, truly made by Westwood Studios. Despite the in-convenient control, it really surprised me. It has subterrain units, trains, and even tunnels!</p><p>After that, I’m intrigued by the story of Command &amp; Conquer, so I continued with <a href="https://cnc.community/renegade">Renegade</a>. Well, FPS is not my type. Besides, the image quality is really low and I got a little dizzy.</p><p>Finally, it comes to <a href="https://kaneswrath.com/">Command &amp; Conquer 3</a>. At first sight I see the GDI barrack, the polygon geometry, I thought, “this is cheap.” Then the rifleman squad, I thought, “units in squad?” But give it a try, don’t waste the money. When I start the campaign, I say, “Hey, that’s what I’m talking about!” This is truly what Command &amp; Conquer series should be: the realistic artistic style, distinguishable units, the exciting voices (especially Nod faction’s). Yeah, awesome!</p><p>However, some terrible things happened recently.</p><hr><h1 id="Ka-Boom-💥"><a href="#Ka-Boom-💥" class="headerlink" title="Ka-Boom!💥"></a>Ka-Boom!💥</h1><p>One day, when I started Kane’s Wrath, the game crashed after the EA logo splash, which says Direct3D error.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240824134821330.png" alt="image-20240824134821330" style="zoom:50%;"><p>I use Windows 11 Pro, and I haven’t expected any Direct3D related error now and before. And if so, it should prompt long ago. I tried to re-install Direct3D, but it doesn’t work.</p><p>Then, I repaired the game in EA Desktop App, and another ridiculous error occurred. What the?</p><div class="note warning flat"><p>I neglected one step between repairing and launching with EA, guess what? 😥</p></div><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240824135041477.png" alt="image-20240824135041477" style="zoom:50%;"><p>And again, answers from EA staff on the forum helped not.</p><p>In this post, I’m going to lead you through these two errors, and talk about the best setup to play Command &amp; Conquer 3: Kane’s Wrath.</p><hr><h1 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h1><h2 id="Direct3D-error"><a href="#Direct3D-error" class="headerlink" title="Direct3D error"></a>Direct3D error</h2><div class="note info flat"><p>It seems only Kane’s Wrath has this problem, Tiberium Wars doesn’t suffer from this.</p></div><p>To put it short, it is caused by improper anti-aliasing configuration in game.</p><blockquote><p>The symptom is that, you can launch the game, see the EA logo, then BOOM, game crashed with that dialogue (background music continues though). When you re-install the game, or repair the game, then launch again in EA, it may lost its configuration and start up with resolution 800 &times; 600 with video quality set to Low. Surprisingly, the error disappears! From this, we can determine it is some quality configuration caused the error.</p></blockquote><p>The solution is simple enough, turn off anti-aliasing in game. Other configuration are not affected, so as high as you can.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240825103059125.png" alt="image-20240825103059125" style="zoom: 50%;"><div class="note info flat"><p>Interestingly, Tiberium Wars has four-level anti-aliasing while Kane’s Wrath only have one.</p></div><p>But you may ask, my game can’t even launch, how to reach the options menu? Here is the solution.</p><p>If you only use EA to launch the game, the profile is located under:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&#123;Username&#125;\AppData\Roaming\Command &amp; Conquer 3 Kane&#x27;s Wrath\Profiles</span><br></pre></td></tr></table></figure><p>If you use <a href="https://github.com/Medstar117/CNC-Ultimate-Collection-Fixed-Launchers">The Ultimate Collection Fixed Launchers</a> made by <a href="https://github.com/Medstar117">Medstar</a>, then there will be two folders, and the actual profile is located under:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&#123;Username&#125;\AppData\Roaming\Command and Conquer 3 Kanes Wrath\Profiles</span><br></pre></td></tr></table></figure><p>Based on your situation, go to one of the directory and you’ll find a folder with your name in game, which contains <code>Options.ini</code>. This file contains configurations you see in the game options settings, open and edit it.</p><p>Find <code>AntiAliasingLOD</code> entry and change it to <code>0</code>. LOD stands for Level Of Detail.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">AntiAliasingLOD</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>If you once use “Graphics Presets” in game, which is set to “Ultra High”, then you’ll probably not seeing a explicit <code>AntiAliasingLOD</code> entry. This case, find <code>StaticGameLOD</code> entry, and change it to <code>VeryLow</code>, which is the default value of <code>IdealStaticGameLOD</code>. This will set all details to <code>VeryLow</code>, and you can manually set them to <code>UltraHigh</code> later in game.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">StaticGameLOD</span> = VeryLow</span><br></pre></td></tr></table></figure><p>Tada!🎉Now launch game again and enjoy! I was using Ultra High presets all the time, only have this problem recently.🤔</p><h2 id="This-game-hasn’t-released-yet"><a href="#This-game-hasn’t-released-yet" class="headerlink" title="This game hasn’t released yet"></a>This game hasn’t released yet</h2><p>Well, this is really hilarious. Also, put it simple, it is because you are using <a href="https://github.com/Medstar117/CNC-Ultimate-Collection-Fixed-Launchers">The Ultimate Collection Fixed Launchers</a>. Not a big deal. I guess it modifies the executable, so if you use that, then don’t launch it with EA.</p><hr><h1 id="Play-Kane’s-Wrath-in-2024"><a href="#Play-Kane’s-Wrath-in-2024" class="headerlink" title="Play Kane’s Wrath in 2024"></a>Play Kane’s Wrath in 2024</h1><p>By the way, I’d like to mention the perfect combo of utilities to play Kane’s Wrath in 2024, and the years to come.</p><h2 id="The-Ultimate-Collection"><a href="#The-Ultimate-Collection" class="headerlink" title="The Ultimate Collection"></a>The Ultimate Collection</h2><p>First, you should have a legal copy of the game, which should better be the Ultimate Collection from EA. I’m not sure if whether the Steam version works or not. After that, download and install <a href="https://github.com/Medstar117/CNC-Ultimate-Collection-Fixed-Launchers">The Ultimate Collection Fixed Launchers</a> made by <a href="https://github.com/Medstar117">Medstar</a>. This applies to all games in the Ultimate Collection, so make sure you tick C&amp;C 3.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240825110623298.png" alt="image-20240825110623298" style="zoom:50%;"><div class="note success flat"><p>Here I’d like to express my sincere gratitude to Medstar, thank you for making this wonderful tool!😀</p></div><p>The fixed launcher modifies the game, so if you want to uninstall it, use EA application or Steam to repair the game. And also, if you re-install or repair the game for other reasons, you should re-install the fixed launcher.</p><div class="note danger flat"><p>You might need to launch the game once before installation to let the game initialize some register entries.</p></div><p>However, the fixed launcher may still not work after installation. You need to use the Troubleshooter Tool in Command Post to fix this. See the next section.</p><h2 id="Command-Post"><a href="#Command-Post" class="headerlink" title="Command Post"></a>Command Post</h2><div class="note warning flat"><p>This requires you to have VPN or proxy. If not, you can manually download and install patches in <a href="https://kaneswrath.com/">Kane’s Wrath</a></p></div><p>Command Post is a helpful manager for Kane’s Wrath, you can download it at <a href="https://cgf-uploads.net/">KW-UPLOADS</a>. It can help you:</p><ul><li>manage map packs</li><li>easily switch between patches</li><li>manage your replays</li><li>troubleshoot your game</li><li>and many more…</li></ul><p>All you need is to register an account. For example, you can easily install the most popular 1.02+ patch and map pack with it. Also, it is recommended to install the 4K mod to further improve the graphics quality.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240825111603451.png" alt="image-20240825111603451" style="zoom:50%;"><p>To fix errors in game, you can go “Help &gt; Troubleshooter tool” to launch the KW Troubleshooter. For the fixed launcher, you need to apply “Fix Game Launch Errors”. This fix with the fixed launchers allows you to launch Kane’s Wrath without EA.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240825115010992.png" alt="image-20240825115010992" style="zoom:50%;"><h2 id="C-C-Online"><a href="#C-C-Online" class="headerlink" title="C&amp;C: Online"></a>C&amp;C: Online</h2><div class="note danger flat"><p>This requires you to have a VPN server, or using port forward, which is hard to configure. But don’t worry, there is an alternative that I’ll introduce later.</p></div><p>The official server for multi-player online has been shut down, but you can still play with your friends on <a href="https://cnc-online.net/">C&amp;C: Online</a>. Download it from the official page and follow the <a href="https://cnc-online.net/en/setup/">setup</a> to create your account. For the first time, open C&amp;C: Online and hook Kane’s Wrath, so that it will automatically launch when the game starts. All you need to do is to click Kane’s Wrath on the left panel to continue.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240825112045140.png" alt="image-20240825112045140" style="zoom:50%;"><h2 id="GameRanger"><a href="#GameRanger" class="headerlink" title="GameRanger"></a>GameRanger</h2><p>If you can’t use C&amp;C: Online to play online, don’t give up. You can still use <a href="https://www.gameranger.com/">GameRanger</a> to play in network. Although the network mode means LAN (Local Area Network), Game Ranger will create a VLAN (Virtual LAN) so that you can still play with your friends anywhere in the world.</p><img src="/posts/Kane-s-Wrath-Launch-Error-Troubleshoot/image-20240825115521238.png" alt="image-20240825115521238" style="zoom:50%;"><p>To use GameRanger, all you need is to register an account. For detailed information, you can watch one of my videos: <a href="https://www.bilibili.com/video/BV1Kp421X7So/">GameRanger + C&amp;C 3: Kane’s Wrath</a>.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>In a word, to play the very best of Kane’s Wrath, you should follow these steps:</p><ul><li>Download and install the Ultimate Collection version of Command &amp; Conquer 3</li><li>Install the Ultimate Collection Fixed Launchers</li><li>Install Command Post and run KW Troubleshooter</li><li>Install the most popular 1.02+ patch and map packs</li><li>Install C&amp;C: Online or GameRanger or both to play with your friends</li></ul><p>That’s it, all you need to play Kane’s Wrath in 2024!🎊So commander, good luck, have fun! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command &amp; Conquer </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deployment Practice With Kubernetes</title>
      <link href="/posts/Deployment-Practice-with-Kubernetes/"/>
      <url>/posts/Deployment-Practice-with-Kubernetes/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;It takes a minute to have a crush on someone,</i><br><i>an hour to like someone,</i><br><i>and a day to love someone...</i><br><i>but it takes a lifetime to forget someone.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Kahlil Gibran</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Suppose that you, my friend, are developing a software, how would you publish it? If it’s a client application, you may manually build it, upload the artifact, and that’s it. If it is a backend server… Think about it, you have to stop the current service and re-deploy it (or them?). Such tedious work.🥴</p><p>For long people are trying to automate the development process. The deployment, usually involving only some script execution, can be automated relatively easier. By automatically build and deploy our product, we are practicing the idea of <a href="https://www.geeksforgeeks.org/what-is-ci-cd/"><strong>Continuous Integration&#x2F;Continuous Delivery</strong></a>, a.k.a. CI&#x2F;CD. Generally speaking, it is the process of automatically build, test and eventually publish our product.</p><p>Recently, I got some work on a Web application, and with what I learned in school, I decided to use CI&#x2F;CD to automatically deploy it on my server. It ROCKS!😍Therefore, I’m writing this article to record this excellent practice.</p><p>In this post, you’ll learn:</p><ul><li>“Dockerize” a Spring Boot application.</li><li>Manage deployment with Kubernetes. (k3s to be specific.)</li><li>Deployment script practice.</li><li>Integration with GitHub CI&#x2F;CD.</li><li>Some tips and troubleshoots.</li></ul><p>So, good luck, have fun!🫡</p><div class="note info flat"><p>All code for this post can be found at <a href="https://github.com/Lord-Turmoil/DeploymentDemo">GitHub</a>.</p></div><hr><h1 id="Dockerizing-Spring-Boot-Application"><a href="#Dockerizing-Spring-Boot-Application" class="headerlink" title="Dockerizing Spring Boot Application"></a>Dockerizing Spring Boot Application</h1><p>In this part, I’ll talk about the very basic of deploying your application with Docker. And it will be the foundation for more advanced deployment with Kubernetes.</p><h2 id="Install-Docker"><a href="#Install-Docker" class="headerlink" title="Install Docker"></a>Install Docker</h2><p>Well, although Docker is important in this post, it is not the point to go further into its installation. But it can be a problem now since, … some access restriction to the official Docker website. So you may use mirror when installing it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># without mirror</span></span><br><span class="line">curl -fsSL https://test.docker.com -o test-docker.sh &amp;&amp; bash test-docker.sh</span><br><span class="line"><span class="comment"># with mirror</span></span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; bash get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><div class="note info flat"><p>For more information on Docker, you can refer to <a href="/posts/Getting-Started-with-Docker">Getting Started with Docker</a>.</p></div><p>There maybe some network issues when pulling images, you can refer to <a href="#Network-issues">Network Issues</a> for more information.</p><h2 id="Build-with-Dockerfile"><a href="#Build-with-Dockerfile" class="headerlink" title="Build with Dockerfile"></a>Build with <code>Dockerfile</code></h2><p>Assume that you already have a Spring Boot application ready for deployment, the first thing is to use <code>maven install</code> to pack it into a <code>.jar</code> executable file as shown below. In case ignored, you can change the version in the <code>pom.xml</code>.</p><img src="/posts/Deployment-Practice-with-Kubernetes/image-20240802205612336.png" alt="image-20240802205612336" style="zoom: 50%;"><p>Then, we need a <code>Dockerfile</code> to create an image from our <code>.jar</code>. The image runs our application only, so the <code>Dockerfile</code> is quite simple, copy our <code>.jar</code> into it, and run it on start. And don’t forget to expose our port.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-jdk-slim</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/Deployment-0.0.1.jar /app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>It is always a good practice to use a smaller base image, so here we use JDK slim from OpenJDK. Actually a JRE base image is better, but I didn’t find a suitable one.</p></div><p>And of course, you can add more arguments based on your use case.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-Duser.timezone=Asia/Shanghai&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>, <span class="string">&quot;--spring.profiles.active=dev&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>Then, we can build the Docker image with the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build -t deployment:0.0.1 .</span><br></pre></td></tr></table></figure><p>Finally, you can test run it with <code>docker run</code> (not in background), and test it with <code>curl</code> in a new terminal session.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 8088:8088 deployment:0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># new session</span></span><br><span class="line">curl localhost:8088/api/ping</span><br><span class="line">pong</span><br></pre></td></tr></table></figure><h2 id="More-Flexible-Dockerfile"><a href="#More-Flexible-Dockerfile" class="headerlink" title="More Flexible Dockerfile"></a>More Flexible <code>Dockerfile</code></h2><p>Although we have the application running with Docker, but we have to modify the <code>Dockerfile</code> for every version update. To tackle this problem, we can use <code>ARG</code> option in the <code>Dockerfile</code>. This <code>ARG</code> is required when building the image, you can also add a default value by using <code>ARG VERSION=0.0.1</code>.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-jdk-slim</span><br><span class="line"><span class="keyword">ARG</span> VERSION</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/Deployment-<span class="variable">$&#123;VERSION&#125;</span>.jar /app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>So now, we can build the image with the following command. The rest is the same as before.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t deployment:0.0.1 --build-arg VERSION=0.0.1 .</span><br></pre></td></tr></table></figure><p>I think it is enough for our deployment purpose here. :)</p><hr><h1 id="Manage-Deployment-with-Kubernetes"><a href="#Manage-Deployment-with-Kubernetes" class="headerlink" title="Manage Deployment with Kubernetes"></a>Manage Deployment with Kubernetes</h1><p>Now, its time to introduce our big ⭐ today &mdash; <a href="https://kubernetes.io/">Kubernetes</a>! It is most famous for the ability to automatically deploy containerized application with high scalability. It is powerful yet extremely complex, so many consider it impossible to master Kubernetes. (I love this meme. 🤣)</p><p><img src="/posts/Deployment-Practice-with-Kubernetes/meme-1.png" alt="meme-1"></p><p>Kubernetes is, however, too powerful for small applications, so we usually use a lightweight distribution &mdash; <a href="https://k3s.io/">K3s</a>. In the following sections, we’ll use k3s as demonstration. The ideas are the same, so I’ll just use Kubernetes when talking about concepts.</p><h2 id="Install-K3s"><a href="#Install-K3s" class="headerlink" title="Install K3s"></a>Install K3s</h2><p>By default, K3s uses containered as the default container service. However, as the container layer is decoupled, we can also use Docker. To install K3s on your server, run the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># official script</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># with mirror</span></span><br><span class="line">curl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -s - --docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># set environment variable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export KUBECONFIG=/etc/rancher/k3s/k3s.yaml&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># test if K3s works</span></span><br><span class="line">sudo k3s kubectl get node</span><br></pre></td></tr></table></figure><p>Well, this is it. Next, we’re going to explore the basic concepts in Kubernetes.</p><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><p>In Kubernetes, the main resources and their relations are shown in the following figure, and they can all be represented by a YAML file.</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    graph LR;A[Service]--expose--&gt;BB[Deployment]--manage--&gt;CC[Pod]--manage--&gt;DD[Container]E[ConfigMap]--config--&gt;B  </pre></div><p>Pod provides a direct control over containers. It works like, a wrapper in Kubernetes. A pod may contain multiple containers to ensure additional features. You can get all running pods with the following command. And as container is not actually part of Kubernetes, you can get them with Docker commands.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl get pods</span><br><span class="line">sudo docker ps</span><br></pre></td></tr></table></figure><p>Deployment, as its name indicates, is important in deployment. It is the key for scalability as it can seamlessly scale pods up or down. I’ll show you how to create a deployment in the next section.</p><p>Finally, the Service expose the deployment, so that it can be accessed by the outside world. It ensures the deployment is consistent. For small scale deployment, however, I don’t think Service is that important, as Nginx could do the job. So I’m not going to talk about it now.</p><h2 id="Create-a-Deployment"><a href="#Create-a-Deployment" class="headerlink" title="Create a Deployment"></a>Create a Deployment</h2><p>Let’s get serious. Now, you have the Docker image, how to make the best of K3s to automatically deploy it? Well, talk is cheap, I just show the YAML file.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deployment-demo</span>  <span class="comment"># name of the deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span>  <span class="comment"># how many instances behind the deployment</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">demo</span>  <span class="comment"># indicates what pods to manage</span></span><br><span class="line">  <span class="attr">template:</span>  <span class="comment"># template for the pods in this deployment</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">demo</span>  <span class="comment"># pod label</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span>  <span class="comment"># whether share network from host</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deployment</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">deployment:0.0.1</span>  <span class="comment"># the image to deploy</span></span><br><span class="line">          <span class="attr">envFrom:</span>  <span class="comment"># set container environments</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">configMapRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">deployment-config</span></span><br><span class="line">          <span class="attr">volumeMounts:</span>  <span class="comment"># set volumes to mount</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/tonix/docker/deploy/data</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br></pre></td></tr></table></figure><p>Some thing to explain. K3s manages containers in its own way, so we have to convert Docker configurations into K3s equivalent. The most common use is <code>-e</code> and <code>-v</code> to set environment variables and mounted volumes respectively.</p><p>To set environment variables for containers, you need to use config map. Here we import environments from <code>deployment-config</code>, so let’s see its definition. All environments are defined in <code>data</code> section.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">deployment-config</span>  <span class="comment"># name of the config map</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">PROFILE:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>The reason we use such an environment is to allow different active profile for our Spring Boot application.</p></div><p>To mount volumes, you just define it in the <code>deployment.yaml</code>.</p><p>One more thing, pay attention to <code>hostNetwork</code>. If your application need to access database or whatever needs network connection, you should set it true.</p><p>Finally, you can deploy your application by applying these two YAML files. To delete the deployment, just replace <code>apply</code> with <code>delete</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl apply -f env.yaml</span><br><span class="line">sudo kubectl apply -f deployment.yaml</span><br><span class="line"></span><br><span class="line">sudo kubectl get deployments  <span class="comment"># view all deployments</span></span><br><span class="line">NAME              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment-demo   1/1     1            1           2m9s</span><br></pre></td></tr></table></figure><p>And you can again test it with <code>curl localhost:8088/api/ping</code>.</p><div class="note info flat"><p>If you updated your YAML files, there is no need to delete them before applying. K3s will automatically update it for you. However, if you updated your image (without changing the label), you have to delete the deployment first. Because K3s only update when the YAML file changes.</p></div><hr><h1 id="Deployment-Script-Breakdown"><a href="#Deployment-Script-Breakdown" class="headerlink" title="Deployment Script Breakdown"></a>Deployment Script Breakdown</h1><p>Now that you are familiar with every part of the deployment, let’s make a script to do it automatically.</p><h2 id="Script-Overview"><a href="#Script-Overview" class="headerlink" title="Script Overview"></a>Script Overview</h2><p>In the script, we are going to cover these steps.</p><ol><li>Automatically discover latest version and artifact.</li><li>Build Docker image.</li><li>Apply new deployment.</li></ol><p>The first step is a little tricky, as it automatically choose the latest version of your application.</p><p>At the same time, we want to log our deployment into a file.</p><h2 id="Version-Discovery"><a href="#Version-Discovery" class="headerlink" title="Version Discovery"></a>Version Discovery</h2><p>We use regular expression to find version in our published artifact, and choose the latest version to deploy.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># iterate all files under `target&#x27; to find the latest version</span></span><br><span class="line">files=`<span class="built_in">ls</span> target/`</span><br><span class="line">max_version=0</span><br><span class="line">max_file=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$files</span>; <span class="keyword">do</span></span><br><span class="line">    version=`<span class="built_in">echo</span> <span class="variable">$file</span> | grep -oE <span class="string">&quot;[0-9]+\.[0-9]+\.[0-9]+&quot;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$version</span>&quot;</span> \&gt; <span class="string">&quot;<span class="variable">$max_version</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        max_version=<span class="variable">$version</span></span><br><span class="line">        max_file=<span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$max_file</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] No file to deploy&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Deploying <span class="variable">$max_file</span>&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br></pre></td></tr></table></figure><p><code>tee</code> is a useful command when you want the output to be displayed on the terminal and wrote into a file.</p><h2 id="Build-Docker-Image"><a href="#Build-Docker-Image" class="headerlink" title="Build Docker Image"></a>Build Docker Image</h2><p>In this step, we use the <code>$max_version</code> as the argument to build our docker image.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ ! -f Dockerfile ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Dockerfile not found&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Building docker&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">sudo docker build -t deployment:<span class="variable">$max_version</span> --build-arg VERSION=<span class="variable">$max_version</span> .</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Docker build failed&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="Update-Deployment"><a href="#Update-Deployment" class="headerlink" title="Update Deployment"></a>Update Deployment</h2><p>Since we may change the version of our Docker image, so we’d better not hard code it in the YAML file. However, K3s doesn’t support argument when apply a new deployment, so we have to resolve it manually.</p><p>To address this problem, we rename our YAML file to <code>deployment.template.yaml</code>, and replace the image version with a safe placeholder <code>&#123;VERSION&#125;</code>. Then every time we create new deployment, we generate a new YAML file with the correct version. And since our Docker image changes on deployment, we should delete the previous deployment so that K3s can apply the latest deployment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># constructing new deployment.yaml by replacing &#123;VERSION&#125; with $max_version</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Constructing new deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"><span class="built_in">touch</span> deployment.yaml</span><br><span class="line"><span class="built_in">mv</span> deployment.yaml deployment.yaml.old</span><br><span class="line"><span class="built_in">cat</span> deployment.template.yaml | sed <span class="string">&quot;s/&#123;VERSION&#125;/<span class="variable">$max_version</span>/g&quot;</span> &gt; deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># reload if deployment.yaml is different from deployment.yaml.old</span></span><br><span class="line"><span class="keyword">if</span> cmp -s deployment.yaml deployment.yaml.old; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[INFO] No change in deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[WARNING] Deleting previous deployment&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sudo kubectl delete -f deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    sudo kubectl delete -f deployment.yaml</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">rm</span> deployment.yaml.old</span><br></pre></td></tr></table></figure><p>At last, we can apply the new <code>deployment.yaml</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Applying deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"><span class="built_in">echo</span> sudo kubectl apply -f env.yaml | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"><span class="built_in">echo</span> sudo kubectl apply -f deployment.yaml | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">sudo kubectl apply -f deployment.yaml</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Failed to apply deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>What? You want a complete deployment script? Well, here it is.😉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===== `date`&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;stop&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[WARNING] Stopping the deployment&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    sudo kubectl delete -f deployment.yaml</span><br><span class="line">    sudo kubectl delete -f env.yaml</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iterate all files under `target&#x27; to find the latest version</span></span><br><span class="line">files=`<span class="built_in">ls</span> target/`</span><br><span class="line">max_version=0</span><br><span class="line">max_file=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$files</span>; <span class="keyword">do</span></span><br><span class="line">    version=`<span class="built_in">echo</span> <span class="variable">$file</span> | grep -oE <span class="string">&quot;[0-9]+\.[0-9]+\.[0-9]+&quot;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$version</span>&quot;</span> \&gt; <span class="string">&quot;<span class="variable">$max_version</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        max_version=<span class="variable">$version</span></span><br><span class="line">        max_file=<span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$max_file</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] No file to deploy&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Deploying <span class="variable">$max_file</span>&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># build docker image</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f Dockerfile ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Dockerfile not found&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Building docker&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">sudo docker build -t deployment:<span class="variable">$max_version</span> --build-arg VERSION=<span class="variable">$max_version</span> .</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Docker build failed&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># constructing new deployment.yaml by replacing &#123;VERSION&#125; with $max_version</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Constructing new deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"><span class="built_in">touch</span> deployment.yaml</span><br><span class="line"><span class="built_in">mv</span> deployment.yaml deployment.yaml.old</span><br><span class="line"><span class="built_in">cat</span> deployment.template.yaml | sed <span class="string">&quot;s/&#123;VERSION&#125;/<span class="variable">$max_version</span>/g&quot;</span> &gt; deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># reload if deployment.yaml is different from deployment.yaml.old</span></span><br><span class="line"><span class="keyword">if</span> cmp -s deployment.yaml deployment.yaml.old; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[INFO] No change in deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[WARNING] Deleting previous deployment&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;sudo kubectl delete -f deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    sudo kubectl delete -f deployment.yaml</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">rm</span> deployment.yaml.old</span><br><span class="line"></span><br><span class="line"><span class="comment"># apply new deployment.yaml</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Applying deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">sudo kubectl apply -f env.yaml</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Failed to apply env.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sudo kubectl apply -f deployment.yaml</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ERROR] Failed to apply deployment.yaml&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[INFO] Completed deployment of <span class="variable">$max_version</span>&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> | <span class="built_in">tee</span> -a deploy.log</span><br></pre></td></tr></table></figure><p>Now, you are able to deploy your application with a single command!🎊</p><hr><h1 id="GitHub-CI-CD"><a href="#GitHub-CI-CD" class="headerlink" title="GitHub CI&#x2F;CD"></a>GitHub CI&#x2F;CD</h1><p>Although you can deploy with a script, you still have to manually build the artifact, upload it to the server and execute the script. How can the whole bunch of these errands be completely automated? The answer is &mdash; CI&#x2F;CD pipeline. In this section, I’ll show you how to use GitHub CI&#x2F;CD to enable automatic deployment.</p><h2 id="GitHub-Workflow"><a href="#GitHub-Workflow" class="headerlink" title="GitHub Workflow"></a>GitHub Workflow</h2><p>The first thing is to add a GitHub workflow file to your repository to enable GitHub Action. This example shows the minimum steps to build and publish a Spring Boot application. It says build and publish our product on every push to the <code>release</code> branch.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">17</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;adopt&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span> <span class="string">-DskipTests</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">to</span> <span class="string">server</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/scp-action@v0.1.7</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">          <span class="attr">source:</span> <span class="string">&quot;target/*.jar,Dockerfile,deployment.template.yaml,env.yaml&quot;</span></span><br><span class="line">          <span class="attr">target:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DEPLOY_PATH</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">deploy</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@v1.0.3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            cd $&#123;&#123; secrets.DEPLOY_PATH &#125;&#125;</span></span><br><span class="line"><span class="string">            bash ./deploy.sh</span></span><br></pre></td></tr></table></figure><p>In the step “Build with Maven”, we add <code>-DskipTests</code> because it makes no sense to test a program on deployment. And tests may fail if it involves database connection or environment sensitive operations. So just skip them, test before publishing.</p><p>When build is complete, we upload the artifact to the server, and run the <code>deploy.sh</code> we wrote in the last chapter. Here, it involves four GitHub action secrets. <code>HOST</code>, <code>USERNAME</code>, and <code>SSH_PRIVATE_KEY</code> are used to establish connection with the server while <code>DEPLOY_PATH</code> indicates where you want your application be deployed.</p><h2 id="SSH-Configuration"><a href="#SSH-Configuration" class="headerlink" title="SSH Configuration"></a>SSH Configuration</h2><p>I think there is no need to explain <code>HOST</code> and <code>USERNAME</code>. If you want use a normal user instead of root, refer to <a href="/posts/Create-sudo-enabled-User-on-Linux/">Create Sudo-Enabled User on Linux</a>. If you currently have a user, you may need to disable the password prompt, see <a href="/posts/Create-sudo-enabled-User-on-Linux/#Step-4-sudo-without-password-optional">Step 4. sudo without password</a>.</p><p>Then, the most important part comes to the <code>SSH_PRIVATE_KEY</code>. This allows GitHub action to be authenticated to access your server.</p><p>First, generate a SSH key pair on your PC (not the server). This is because we want to simulate a user login for GitHub action. And ed25519 algorithm is recommended. (You can choose RSA anyway.)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> ed25519</span><br></pre></td></tr></table></figure><p>It will generate <code>id_ed25519</code> and <code>id_ed25519.pub</code> under <code>~/.ssh</code> (Windows is <code>%USERPROFILE%/.ssh</code>) directory. The content of <code>id_ed25519</code> is the <code>SSH_PRIVATE_KEY</code>. Then, we need to copy the public key to the server so that our private key will be authenticated.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id username@host</span><br></pre></td></tr></table></figure><p>For Windows users, there is an equivalent command combo to achieve this.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_ed25519.pub | ssh username@host <span class="string">&quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>In Windows, the EOL maybe CRLF, which will appear as <code>^M</code> in Linux. You can edit <code>authorized_keys</code> manually after copy.</p></div><h2 id="GitHub-Action-Secrets"><a href="#GitHub-Action-Secrets" class="headerlink" title="GitHub Action Secrets"></a>GitHub Action Secrets</h2><p>Open your repository, and add <code>HOST</code>, <code>USERNAME</code>, <code>SSH_PRIVATE_KEY</code> and <code>DEPLOY_PATH</code> to your repository secrets.</p><p><img src="/posts/Deployment-Practice-with-Kubernetes/image-20240804161440636.png" alt="image-20240804161440636"></p><div class="note warning flat"><p>I suggest keep no new line at the end of secrets.</p></div><h2 id="Trigger-the-Action"><a href="#Trigger-the-Action" class="headerlink" title="Trigger the Action"></a>Trigger the Action</h2><p>Everything is set, punch it! Push to the release branch and the action will run automatically.</p><img src="/posts/Deployment-Practice-with-Kubernetes/image-20240804170720367.png" alt="image-20240804170720367" style="zoom:50%;"><p>And on our server, we can check the <code>deploy.log</code>.</p><img src="/posts/Deployment-Practice-with-Kubernetes/image-20240804170758874.png" alt="image-20240804170758874" style="zoom:50%;"><div class="note success flat"><p>By using <code>.log</code> suffix, we can get a quite colorful highlighting in Visual Studio Code.😋</p></div><p>Tada!🎉Now your application can be deployed automatically, and you can get rid of the distractions to your development process.😆</p><hr><h1 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h1><h2 id="Network-issues"><a href="#Network-issues" class="headerlink" title="Network issues"></a>Network issues</h2><p>Unfortunately, docker is blocked by some “unknown” forces, so you may need some mirror. I suggest you go search for them in the GitHub, or use the container acceleration service by Aliyun.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://dockerproxy.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>After changing the mirror, restart docker service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Unable-to-access-port-80"><a href="#Unable-to-access-port-80" class="headerlink" title="Unable to access port 80"></a>Unable to access port 80</h2><p>After you solved the network issue, you may soon encounter another weird problem accessing port 80. Whatever your Nginx configuration is, it will always respond with <code>404 page not found</code> in <strong>plain text</strong> (not the Nginx 404 page)! Even if you use <code>curl localhost:80</code> on the server. What the?🤬How is this possible?</p><p>Put it simple, k3s uses <strong>traefik</strong> by default which alters <code>iptables</code> to dispatch requests. It has a higher priority so requests won’t make it to Nginx. It is not a mandatory service so everything works fine when we don’t have the mirror, because k3s won’t be able to pull the image.</p><details class="toggle"><summary class="toggle-button" style>Details</summary><div class="toggle-content"><p>I tried to stop Nginx, <del>though apparently not the cause,</del> but the response remains. It means there is another service online. Then I tried <code>lsof -i:80</code>, but found nothing. I’m afraid there’s some sort of attack on me, so I checked all running processes. Well, I did find this: <strong>traefik</strong>. What a suspicious name, traffic, huh? Hijacked my requests?</p><p>Fortunately, it is not any virus. k3s will use traefik as the default router, which alters the system <code>iptables</code>. And since it uses <code>iptables</code>, we cannot find it via <code>lsof</code>. It will take over port 80 and 443 so any other services listening on these two ports will no longer work.🥲</p><p>But, why we don’t have such problem before? Because of the network issue, we’re unable to pull the traefix image without a mirror. Since it is not mandatory (unlike pause), so k3s will silently ignore it, therefore everything works fine. Now, with a mirror, k3s is able to pull all these images, and as a result,💥, 404 not found.</p><p>How ironic, the solution, is also, the poison. By the way, it seems only the <strong>pause</strong> service is required,</p><p>Below are two articles that inspired me, much thanks.🙏</p><ul><li><a href="https://cloud.tencent.com/developer/article/2330235">被坑惨了， 安装了 k3s 本地 80 端口不能用了？</a></li><li><a href="https://blog.51cto.com/u_16065421/6539867">解决安装了k3s以后80和443端口被占用的问题</a></li><li><a href="https://docs.rancher.cn/docs/k3s/faq/_index/#%E4%BD%BF%E7%94%A8-netstat-%E6%97%A0%E6%B3%95%E6%9F%A5%E5%88%B0-80-%E5%92%8C-443-%E7%AB%AF%E5%8F%A3">使用 netstat 无法查到 80 和 443 端口?</a></li><li><a href="https://docs.rancher.cn/docs/k3s/faq/_index/#%E5%A6%82%E4%BD%95%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84-ingress-%E4%BB%A3%E6%9B%BF-traefik%EF%BC%9F">如何用自己的 Ingress 代替 Traefik？</a></li></ul></div></details><p>To disable traefik, one should follow these steps.</p><p><strong>Stop k3s</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo kubectl -n kube-system delete helmcharts.helm.cattle.io traefik</span><br><span class="line">sudo service k3s stop</span><br></pre></td></tr></table></figure><p><strong>Disable traefik in service configuration</strong></p><p>Edit the k3s service at <code>/etc/systemd/system/k3s.service</code>, scroll to the bottom and add <code>--disable=traefik</code> option.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/local/bin/k3s \</span></span><br><span class="line"><span class="string">    server \</span></span><br><span class="line"><span class="string">        &#x27;--docker&#x27; \</span></span><br><span class="line"><span class="string">        &#x27;--disable=traefik&#x27; \</span></span><br></pre></td></tr></table></figure><p>Then, reload services.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>It is optional to remove the traefik configuration file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /var/lib/rancher/k3s/server/manifests/traefik.yaml</span><br></pre></td></tr></table></figure><p><strong>Restart k3s service</strong></p><p>Finally, start k3s and you won’t have the traefik service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service k3s start</span><br></pre></td></tr></table></figure><p>Now, you’ll again have control over port 80 and 443.</p><p>By the way, K3s enables many components which may not be required, so you can just disable them all. See the official document <a href="https://docs.rancher.cn/docs/k3s/installation/install-options/server-config/_index/#kubernetes-%E7%BB%84%E4%BB%B6">here</a>.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ExecStart</span>=<span class="string">/usr/local/bin/k3s \</span></span><br><span class="line"><span class="string">    server \</span></span><br><span class="line"><span class="string">        &#x27;--docker&#x27; \</span></span><br><span class="line"><span class="string">        &#x27;--disable=traefik&#x27; \</span></span><br><span class="line"><span class="string">        &#x27;--disable=local-storage&#x27; \</span></span><br><span class="line"><span class="string">        &#x27;--disable=coredns&#x27; \</span></span><br><span class="line"><span class="string">        &#x27;--disable=metrics-server&#x27; \</span></span><br><span class="line"><span class="string">        &#x27;--disable=servicelb&#x27; \</span></span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>I think it is one of the longest post I have? This is the most comprehensive summary of my deployment experience so far, and I hope it could be useful for me, and of course for you.😆Before, I was a little bit dismissive of Docker, but now, I am impressed by its portability and ease of use. It’s really convenient for scalable deployment.</p><div class="note danger flat"><p>But I am still <strong>NOT</strong> going to install Docker Desktop on my Windows PC!😠</p></div><p>Well, I guess this is it? See you around. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> Docker </tag>
            
            <tag> Deployment </tag>
            
            <tag> Linux </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Cheat Sheet</title>
      <link href="/posts/Docker-Cheat-Sheet/"/>
      <url>/posts/Docker-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;The ability to observe without evaluating is the highest form of intelligence.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Jiddu Krishnamurti</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>This is a collection of useful Docker commands that is used but not remembered. 😎</p><div class="note info flat"><p>This article will be updated from time to time.</p></div><blockquote><p>You may also like: <a href="/posts/Linux-Cheat-Sheet/">Linux Cheat Sheet</a><br>You may also like: <a href="/posts/Git-Cheat-Sheet/">Git Cheat Sheet</a></p></blockquote><hr><h1 id="Basic-Use"><a href="#Basic-Use" class="headerlink" title="Basic Use"></a>Basic Use</h1><p><strong>Build a container</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;image_name&gt; .</span><br></pre></td></tr></table></figure><p>Note that the <code>.</code> here is the build context, it means the build process can only access files under this directory. If you want to copy files from other directory, you may want to specify a common parent directory.</p><p><strong>Run a container</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> -d --name &lt;container_name&gt;  \</span><br><span class="line">  -e ENV=value                                  \</span><br><span class="line">  -v /host/path:/container/path                 \</span><br><span class="line">  --gpus all                                    \</span><br><span class="line">  &lt;image_name&gt;</span><br></pre></td></tr></table></figure><p>There are many options available for the <code>docker run</code> command. You can customize the container’s behavior by using various flags and parameters. </p><ul><li><code>-it</code>: run interactively with a terminal</li><li><code>--rm</code>: automatically remove the container when it exits</li><li><code>-d</code>: run the container in detached mode (in the background)</li><li><code>--name &lt;container_name&gt;</code>: assign a name to the container</li><li><code>-e ENV=value</code>: set environment variables, you can set multiple variables</li><li><code>-v /host/path:/container/path</code>: mount a host directory as a data volume, can mount multiple volumes</li><li><code>--gpus all</code>: use all available GPUs</li></ul><p>Here, a name is recommended for easier management, so that you won’t bother searching for container IDs.</p><p><strong>Attach to a running container</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name_or_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><p><strong>Copy files</strong></p><p>Copy from container to host.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> &lt;container_name_or_id&gt;:/path/to/file /host/path</span><br></pre></td></tr></table></figure><p>Copy from host to container.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /host/path &lt;container_name_or_id&gt;:/path/to/file</span><br></pre></td></tr></table></figure><hr><h1 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h1><p><strong>Remove all &lt;none&gt; images</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(sudo docker images -f <span class="string">&quot;dangling=true&quot;</span> -q)</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Click-to-Run JAR Executable</title>
      <link href="/posts/Create-Click-to-Run-JAR-Executable/"/>
      <url>/posts/Create-Click-to-Run-JAR-Executable/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;When your intuition is strong, follow it.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Lolly Daskal</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>When you have a JAR file, you can run it with <code>java -jar JarFile.jar</code>. However, you may notice that some JAR files are able to run with double-click!😲How is this be done?</p><p>In this article, I’m going to talk about how to make your JAR archive that can run with double-click. And perhaps a solution to the most common problem.</p><hr><h1 id="Run-JAR-with-Double-click"><a href="#Run-JAR-with-Double-click" class="headerlink" title="Run JAR with Double-click"></a>Run JAR with Double-click</h1><h2 id="Creating-Executable-JAR"><a href="#Creating-Executable-JAR" class="headerlink" title="Creating Executable JAR"></a>Creating Executable JAR</h2><p>To run a JAR, we need to create a JAR first. <del>Duh.</del> Usually, only GUI application may have the need to run with double-click. So here, we write a simplest Swing frame.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JLabel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(title);</span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;Greetings from inside JAR!&quot;</span>, JLabel.CENTER);</span><br><span class="line">        add(label);</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>(<span class="string">&quot;Run JAR with Double-click&quot;</span>);</span><br><span class="line">        frame.setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now this is it. You can use <code>java Main.java</code> to test it. Then, let’s make a JAR from it.</p><p>First, let’s create a manifest file. Name it anything you like, but <code>manifest.txt</code> may be a practical choice. It is essential for click-to-run JAR because it tells JVM which class to run.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Main-Class: Main</span><br><span class="line">Class-Path: .</span><br></pre></td></tr></table></figure><p>Then, use <code>jar</code> command to create a JAR with manifest. You can add <code>--verbose</code> or <code>-v</code> to see the creation process.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar <span class="literal">--create</span> <span class="literal">--file</span>=Main.jar <span class="literal">--manifest</span>=manifest.txt Main.class</span><br></pre></td></tr></table></figure><p>To make it short, you can use the combo <code>cfm</code>. Notice that the precedence of <code>f</code> and <code>m</code> indicates the order of <code>.jar</code> target and manifest file. If you switch them by using <code>cmf</code>, you should also swap the following <code>.jar</code> and manifest file.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cfm Main.jar manifest.txt Main.class</span><br></pre></td></tr></table></figure><p>To add all classes in a folder, you can just use the folder name, or <code>*.class</code> for top level <code>.class</code> files.</p><p>Now, you’ve created a click-to-run JAR file!🍾</p><h2 id="Default-Open-Action"><a href="#Default-Open-Action" class="headerlink" title="Default Open Action"></a>Default Open Action</h2><p>If it runs as expected, then congratulations!🎊However, things may not go in the right direction.🥲</p><p>For the first time, Windows may prompt you to choose the default program to open it. Choose the <code>javaw.exe</code> of your current environment. Make sure it is of the same version as your <code>javac</code>. This should work just fine.</p><div class="note success flat"><p><code>javaw</code> is the same as <code>java</code>, but will run application without console. So it is usually used to run GUI programs. It is OK to have <code>javaw</code> from a higher version, but not vice versa.</p></div><p>If it is not the first time, and you’ve configured it some point in the past, things may get a little tricky. Perhaps because of outdated <code>javaw</code> version, nothing will happen when you double-click a JAR file. Actually, some thing did happen, which is an exception. In this case, you may need to reach out for the registry.</p><p>Use <code>Win + R</code> to open Run dialog, and type <code>regedit</code> to open Registry Editor. Then, find the following key.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Computer\HKEY_CLASSES_ROOT\jarfile\shell\open\command</span><br></pre></td></tr></table></figure><p>It should look like this. Ensure that the data points to the right <code>javaw</code>.</p><img src="/posts/Create-Click-to-Run-JAR-Executable/image-20240721215218708.png" alt="image-20240721215218708" style="zoom:50%;"><p>Tada!🎉Now double-click on your JAR file and enjoy!</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I guess it is a little trick? It puzzles me for long, and now it’s clear. See you around. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP in Spring Boot</title>
      <link href="/posts/AOP-in-Spring-Boot/"/>
      <url>/posts/AOP-in-Spring-Boot/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;The dark side of the Force is a pathway to many abilities,</i><br><i>some consider to be unnatural.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Darth Sidious</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>If you have programming experience before, <del>of course, you have,</del> you probably heard of Procedure-oriented and Object-oriented programming. OOP couples related functions and data which allows us to focus on abstraction instead of concrete implementation.</p><p>However, as business logics grow, objects in the OOP paradigm may become extremely large and verbose, filled with irrelevant code such as parameter validation and logging. To this end, Aspect-oriented programming comes to the rescue. AOP aims to increase modularity by separating concerns into different layers. To be more specific, it enhances existing methods with external <strong>advice</strong> without actual modification to it.</p><p>Well, in case you are a curious reader, I present you with some extra sources to learn AOP a step further.</p><ul><li><a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-oriented programming - Wikipedia</a></li><li><a href="https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/">Aspect Oriented Programming and AOP in Spring Framework - GeeksforGeeks</a></li><li><a href="https://dev.to/pmgysel/learn-aspect-oriented-programming-by-example-m8o">Learn Aspect Oriented Programming by Example - DEV Community</a></li><li><a href="https://docs.spring.io/spring-framework/reference/core/aop.html">Aspect Oriented Programming with Spring :: Spring Framework</a></li></ul><p>Although I named this article <em>AOP in Spring Boot</em>, it is mainly about AOP itself, just using Spring Boot as a demo.</p><div class="note info flat"><p>Keep in mind that AOP is not a replacement for OOP. OOP helps the vertical scalability while AOP aims for the horizontal.</p></div><hr><h1 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h1><p>I think a brief introduction to the main concepts in AOP may help in understanding.</p><h2 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h2><p>First of all, what is <strong>aspect</strong>? In OOP, we focus on abstraction which ultimately turns logic into objects. Similarly, in AOP, we focus on specific operations across different objects. For example, in a Web application, our controller may look like this.</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    graph TB;OA[Controller A]--&gt;AA1--&gt;LA--&gt;AA2OB[Controller B]--&gt;AB1--&gt;LB--&gt;AB2AA1[Parameter validation]AB1[Parameter validation]LA[Business logic A]LB[Business logic B]AA2[Logging]AB2[Logging]  </pre></div><p>Each controller has its business logic, but to ensure robustness, validation and logging are also required. As a result, our controllers become larger and filled with duplicated code. Thinking in OOP, you may start to add a utility class to perform these extra logics. So it will become like this.</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    graph TB;OA[Controller A]--&gt;A1--&gt;LA--&gt;A2OB[Controller B]--&gt;A1--&gt;LB--&gt;A2A1[Parameter validation]LA[Business logic A]LB[Business logic B]A2[Logging]  </pre></div><p>However, this way, our controller is still infested with irrelevant code. The attempt is plausible, and we just need to replace this “utility class” with an <strong>aspect</strong>. So aspect of AOP is such specific logic that to be injected at different places.</p><h2 id="Joinpoint"><a href="#Joinpoint" class="headerlink" title="Joinpoint"></a>Joinpoint</h2><p>Joinpoint is the place where our aspect can be injected. For instance, in the previous controller example, before and after the execution of the business logic are two joinpoints we can insert the aspect.</p><p>It’s not feasible to insert aspects everywhere. You cannot just insert an aspect before an arithmetic expression or assignment. But, there is one exception &mdash; function call, especially for OOP languages that have reflection ability. So by intercepting function calls, we can add extra code before or after its execution without any modifications to the original logic.</p><h2 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h2><p>Pointcuts are used joinpoints. There will be countless joinpoints as our code is full of function calls, but only a few could be useful. It’s just a term to indicate the joinpoints into which we insert aspects.</p><h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><div class="note primary flat"><p>Advice, advice? Why advice? Interesting naming.</p></div><p>Speaking of advice, first, we need to reiterate the aspect. Simply put, the aspect is the abstraction of what we want to do, and advice is its implementation. With joinpoint, there are five types of advice.</p><ul><li>Before: Before the execution of the target method.</li><li>After returning: After a successful return, which means no exception is thrown.</li><li>After throwing: Only after an exception is thrown.</li><li>After: Both successful and exception returns.</li><li>Around: Before and after.</li></ul><h2 id="Weaving"><a href="#Weaving" class="headerlink" title="Weaving"></a>Weaving</h2><p>Weaving is the process of linking advice to the pointcut. For Java, this can be done in compile, class load, and runtime. To achieve this, a proxy is used to wrap the original method.</p><hr><h1 id="Aspect-in-Action"><a href="#Aspect-in-Action" class="headerlink" title="Aspect in Action"></a>Aspect in Action</h1><p>Well, with the AOP paradigm in mind, let’s write a demo as practice. Here we use Spring Boot as an example. As for the AOP implementation, I use <a href="https://eclipse.dev/aspectj/">AspectJ</a>, which is currently the most popular.</p><div class="note info flat"><p>You can find the complete code of this part at <a href="https://github.com/Lord-Turmoil/AopDemo">AopDemo</a>.</p></div><h2 id="Project-Initialization"><a href="#Project-Initialization" class="headerlink" title="Project Initialization"></a>Project Initialization</h2><p>First, create a simple Spring Boot application.</p><img src="/posts/AOP-in-Spring-Boot/image-20240711153245584.png" alt="image-20240711153245584" style="zoom:50%;"><p>After creation, add AspectJ dependency. You can find the latest version at <a href="https://mvnrepository.com/artifact/org.aspectj/aspectjweaver">Maven Center</a>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then, enable AspectJ proxy in the Spring Boot application by adding <code>@EnableAspectJAutoProxy</code> annotation to the main class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopDemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(AopDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Add-Demo-Endpoints"><a href="#Add-Demo-Endpoints" class="headerlink" title="Add Demo Endpoints"></a>Add Demo Endpoints</h2><p>Here we add some example endpoints as our joinpoints.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring AOP!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/validation/&#123;number&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">validation</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">66</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Execute order 66&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Validation AOP&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/modification/&#123;number&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ModifyParameter</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">modification</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Number is always &quot;</span> + number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we use an annotation to decorate one of the methods. It is used to demonstrate another approach to define a pointcut. The annotation is defined below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ModifyParameter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Your-First-Aspect"><a href="#Your-First-Aspect" class="headerlink" title="Your First Aspect"></a>Your First Aspect</h2><h3 id="Aspect-definition"><a href="#Aspect-definition" class="headerlink" title="Aspect definition"></a>Aspect definition</h3><p>The definition of an Aspect should be annotated with <code>@Aspect</code>, and should also be annotated with <code>@Component</code> to let Spring Boot discover it. Here we add a logger, which we’ll use later.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TheAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pointcut-definition"><a href="#Pointcut-definition" class="headerlink" title="Pointcut definition"></a>Pointcut definition</h3><p>You can define the pointcut using <code>@Pointcut</code>. If the same pointcut is used by many advices, this way can reduce duplicated definitions at each advice. This pointcut includes all the methods in our controller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* top.tony.spring.aop.demo.Controller.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Before-advice"><a href="#Before-advice" class="headerlink" title="Before advice"></a>Before advice</h3><h4 id="Logging-only"><a href="#Logging-only" class="headerlink" title="Logging only"></a>Logging only</h4><p>Now that we have the pointcut, we can add advice to it. Here, we insert a log before each call.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint point)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Method &#x27;&#123;&#125;&#x27; is called.&quot;</span>, point.getSignature().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/AOP-in-Spring-Boot/image-20240711162941247.png" alt="image-20240711162941247" style="zoom: 50%;"><h4 id="Parameter-validation"><a href="#Parameter-validation" class="headerlink" title="Parameter validation"></a>Parameter validation</h4><p>Above we did nothing in the advice. However, the true potential of the advice is that it can interfere with the execution of the target method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* top.tony.spring.aop.demo.Controller.validation(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validation</span><span class="params">(JoinPoint point)</span> &#123;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) point.getSignature()).getMethod();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; method.getParameterCount(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getParameters()[i].getName().equals(<span class="string">&quot;number&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> (<span class="type">int</span>) point.getArgs()[i];</span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Number is too large&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this advice, we get the target method and check the parameter with the name <code>number</code> to see if it is larger than 100. This way, we can separate the parameter validation from the business logic.</p><img src="/posts/AOP-in-Spring-Boot/image-20240711165042935.png" alt="image-20240711165042935" style="zoom:50%;"><h3 id="After-advice"><a href="#After-advice" class="headerlink" title="After advice"></a>After advice</h3><h4 id="After-returning"><a href="#After-returning" class="headerlink" title="After returning"></a>After returning</h4><p>By adding <code>@AfterReturning</code> annotation, we are able to access the return value of a method. This only works when the method successfully returns without exception.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;pointcut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint point, Object result)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Method &#x27;&#123;&#125;&#x27; returns &#x27;&#123;&#125;&#x27;.&quot;</span>, point.getSignature().getName(), result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want to include the returning value, you have to explicitly set <code>returning</code> value in the annotation, which injects the return value with a specific name.</p><img src="/posts/AOP-in-Spring-Boot/image-20240712105600852.png" alt="image-20240712105600852" style="zoom:50%;"><h4 id="After-throwing"><a href="#After-throwing" class="headerlink" title="After throwing"></a>After throwing</h4><p>Similar to <code>@AfterReturning</code>, <code>@AfterThrowing</code> only works when the method throws an exception.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;pointcut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">(JoinPoint point, Exception e)</span> &#123;</span><br><span class="line">    log.error(<span class="string">&quot;Method &#x27;&#123;&#125;&#x27; throws exception: &#123;&#125;&quot;</span>, point.getSignature().getName(), e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we send 66 to the endpoint, it will pass our parameter validation but still raise an exception. This case, it can be intercepted by <code>@AfterThrowing</code>.</p><img src="/posts/AOP-in-Spring-Boot/image-20240712110422206.png" alt="image-20240712110422206" style="zoom:50%;"><h3 id="Around-Advice"><a href="#Around-Advice" class="headerlink" title="Around Advice"></a>Around Advice</h3><p>Finally, it’s the most powerful <code>@Around</code> advice, which will fully take control of the target execution. It is capable of adding logic before and after a pointcut, and what’s more, modifying the incoming arguments or outgoing returns.</p><p>Here, we use our annotation as the pointcut definition and force the parameter with the name “number” to be 66. Notice that <code>ProceedingJoinPoint</code> is required as we now can decide whether to execute the method or not. If there is return value, you should also return it.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;@annotation(top.tony.spring.aop.demo.ModifyParameter)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">modification</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    Object[] args = point.getArgs();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) point.getSignature()).getMethod();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; method.getParameterCount(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getParameters()[i].getName().equals(<span class="string">&quot;number&quot;</span>)) &#123;</span><br><span class="line">            args[i] = <span class="number">66</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> point.proceed(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, when we call the endpoint, it will always be 66.</p><img src="/posts/AOP-in-Spring-Boot/image-20240712111157118.png" alt="image-20240712111157118" style="zoom:50%;"><p>By the way, if we can modify a parameter, it means we can also set a parameter using <code>@Around</code>! This is useful when you want to add user authentication information or some properties in the request (like cookies value) into your controller methods without explicit getters.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Tada!🎉How do you feel? Excited? Hope you enjoy it, and most importantly, use it in your next project. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Java </tag>
            
            <tag> AOP </tag>
            
            <tag> Tutorial </tag>
            
            <tag> Repo Available </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using RabbitMQ in Spring Boot Application</title>
      <link href="/posts/Using-RabbitMQ-in-Spring-Boot-Application/"/>
      <url>/posts/Using-RabbitMQ-in-Spring-Boot-Application/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;Don't let the noise of others' opinions drown out your own inner voice.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Steve Jobs</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>As we learned about RabbitMQ in the <a href="/posts/Setting-up-RabbitMQ/">previous article</a>, we can now use it in our application. Here, I’m going to demonstrate it in a Spring Boot application as I recently came into one.</p><div class="note info flat"><p>You might need IntelliJ Ultimate to proceed.</p></div><hr><h1 id="A-Demo-Project"><a href="#A-Demo-Project" class="headerlink" title="A Demo Project"></a>A Demo Project</h1><div class="note info flat"><p>You can find the complete code at <a href="https://github.com/Lord-Turmoil/RabbitMqDemo">RabbitMqDemo</a>. 😉</p></div><p>To better demonstrate AMQP, I decided to use two separated projects. However, in order not to mess up, we can set up a mono repo solution. Unlike <a href="https://visualstudio.microsoft.com/">Visual Studio</a>, who naturally supports multi-project solution, JetBrains IDE can only achieve this by open a folder.</p><p>To set up a mono repo project, simply open a folder, and create projects inside of it.</p><h2 id="Initializing-the-Project"><a href="#Initializing-the-Project" class="headerlink" title="Initializing the Project"></a>Initializing the Project</h2><p>Well, first of all, let’s create our project from scratch. Here I use IntelliJ IDEA Ultimate, you can choose your favorite IDE or Spring Initializer. Let’s use Spring 3 and the following dependencies. These should be more than sufficient for our demo.</p><ul><li>Spring Boot DevTools</li><li>Lombok</li><li>Spring Web</li><li>Spring for RabbitMQ</li></ul><p>Your workspace may look like this after creating two projects inside the folder, but IDEA does not recognize them.</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240630214633391.png" alt="image-20240630214633391" style="zoom:50%;"><p>What you should do is to add them as modules by adding the corresponding <code>pom.xml</code>.</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240630214835893.png" alt="image-20240630214835893" style="zoom:50%;"><p>After that, you’ll get a nice workspace.</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240630215357270.png" alt="image-20240630215357270" style="zoom: 33%;"><p>The Spring Initializer provides you with a <code>HELP.md</code> with tutorial links, but some links may be expired. So here are some valid links that can be of help.</p><ul><li><a href="https://spring.io/guides/gs/messaging-rabbitmq">https://spring.io/guides/gs/messaging-rabbitmq</a></li></ul><h2 id="The-Producer"><a href="#The-Producer" class="headerlink" title="The Producer"></a>The Producer</h2><h3 id="Project-setup"><a href="#Project-setup" class="headerlink" title="Project setup"></a>Project setup</h3><p>Let’s implement producer first. Here, the <code>application.yaml</code> may look like this. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Producer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;RABBITMQ_HOST&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;RABBITMQ_USERNAME&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;RABBITMQ_PASSWORD&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>By the way, here is a tip to protect sensitive data from leaking. You can use environment variables in your configuration file and set them in IDEA Run Configuration.</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240630222340232.png" alt="image-20240630222340232" style="zoom:50%;"><h3 id="RabbitMQ-configuration"><a href="#RabbitMQ-configuration" class="headerlink" title="RabbitMQ configuration"></a>RabbitMQ configuration</h3><p>Then, let’s create the RabbitMQ configuration. We can add queue and exchange in code so we won’t bother accessing the management dashboard. For demonstration purposes, I use both exchange and queue, in which an extra binding must be declared. Otherwise, you can simply use a bare queue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;e.demo.exchange&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;key&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE</span> <span class="operator">=</span> <span class="string">&quot;q.demo.queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">getBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(getQueue()).to(getExchange()).with(ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">getExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Note that these classes are imported from package <code>org.springframework.amqp.core</code>, not RabbitMQ.</p></div><blockquote><p>Here I’d like to explain some parameters. The signatures of <code>Exchange</code> and <code>Queue</code> are given below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractExchange</span><span class="params">(String name, <span class="type">boolean</span> durable, <span class="type">boolean</span> autoDelete)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Queue</span><span class="params">(String name, <span class="type">boolean</span> durable, <span class="type">boolean</span> exclusive, <span class="type">boolean</span> autoDelete)</span></span><br></pre></td></tr></table></figure><p><code>durable</code> means that the exchange or queue will survive a broker restart. That is to say, they won’t be deleted if the broker somehow shutdown and restart.</p><p><code>autoDelete</code> indicates that the resource will be deleted automatically if not used. For exchange, it will be deleted if it is no longer bound to any queue. And for queue, it will be deleted when the last consumer unsubscribes from it.</p><p><code>exclusive</code> means that the queue can only be used by the connection that declares it, a private queue.</p></blockquote><p>Besides, we also need to configure the message template to send messages. Here we use <code>@RequiredArgsConstructor</code> to eliminate the long and verbose injection. Also, we use a JSON serializer to support complex message payload.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CachingConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">getRabbitTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">        template.setMessageConverter(getConverter());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Jackson2JsonMessageConverter <span class="title function_">getConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Send-the-message"><a href="#Send-the-message" class="headerlink" title="Send the message"></a>Send the message</h3><p>Now, it’s time to actually send our message to the queue. First, let’s declare the message to send.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Then, create a simple RESTful controller with <code>RabbitTemplate</code> injected.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">send</span><span class="params">(<span class="meta">@RequestBody</span> String text)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        message.setTimestamp(LocalDateTime.now());</span><br><span class="line">        message.setMessage(text);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE, RabbitMqConfig.ROUTING_KEY, message);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The basic way to send a message is via <code>convertAndSend(String exchange, String routingKey, Object object)</code>. If you use a bare queue, then the exchange should be an empty string <code>&quot;&quot;</code>, and the <code>routingKey</code> will be the name of the queue, because RabbitMQ has a built-in exchange for direct access to queues.</p><p>After finishing the controller, run the application, and switch to the Endpoints tab to send the request. And we can see the endpoint returned OK.</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240630231524341.png" alt="image-20240630231524341" style="zoom:50%;"><div class="note success flat"><p>I think it’s a fancy feature to allow API testing just in the IDE. 😍</p></div><p>Then go to the RabbitMQ dashboard to check if the message is sent or not. And of course, it does. 😋</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240630231213166.png" alt="image-20240630231213166" style="zoom:50%;"><p>Well done, my friend!🍻Next is to consume the messages we produced.</p><h2 id="The-Consumer"><a href="#The-Consumer" class="headerlink" title="The Consumer"></a>The Consumer</h2><h3 id="Project-setup-1"><a href="#Project-setup-1" class="headerlink" title="Project setup"></a>Project setup</h3><p>The project configuration is identical to that of the producer. But to demonstrate the multiple consumer scenario, the port is set to <code>0</code> means random to avoid conflict. After all, the port matters not as we communicate through message queue.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Consumer</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;RABBITMQ_HOST&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;RABBITMQ_USERNAME&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;RABBITMQ_PASSWORD&#125;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Then, the RabbitMQ configuration is also identical to what we defined just now. Just copy them here. What’s more, you may need to copy the message payload class, too.</p><div class="note info flat"><p>Copy and paste?🤨Really? Yeah, that’s the case when you use separated applications. You just need to define everything multiple times. But it indeed provides cross language ability.</p></div><h3 id="Receive-the-message"><a href="#Receive-the-message" class="headerlink" title="Receive the message"></a>Receive the message</h3><p>As we mentioned just now, we have to define duplicated classes cross sender and receiver. However, it doesn’t mean the two classes are identical, as long as serialization works. So, in this case, we can define a slightly different message to have a custom <code>toString</code> method using Lombok.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime timestamp;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To receive the message, we need a listener on the queue, which is a special service.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitMqConfig.QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Received message: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this case, we define a listener on the queue we declared. And that’s it, simple, huh?</p><p>Lunch a producer and two consumers, trigger the endpoint to send messages. We can see that the messages are evenly consuming them.</p><img src="/posts/Using-RabbitMQ-in-Spring-Boot-Application/image-20240701210829603.png" alt="image-20240701210829603" style="zoom:50%;"><p>If you start more consumers, you may find that it is round-robin. Consumers consume the message one after another.</p><p>Tada, you made it! 🎉</p><hr><h1 id="More-About-RabbitMQ"><a href="#More-About-RabbitMQ" class="headerlink" title="More About RabbitMQ"></a>More About RabbitMQ</h1><p>There are many ways for exchange to deliver message to the queue. Here we use “direct”, which means the message will be sent to the queue bind with the routing key.</p><p>There are three types of delivery.</p><ul><li>“fanout” (<code>FanoutExchange</code>): messages will be delivered to all queues bind to the exchange with no condition.</li><li>“direct” (<code>DirectExchange</code>): messages will be delivered to queues bind with the same routing key. Will be discarded if no match.</li><li>“topic” (<code>TopicExchage</code>): same as “direct”, but will match by <code>.</code> separated pattern. For the pattern, <code>*</code> matches exactly one word, and <code>#</code> matches zero or more words.</li></ul><p>These three, plus bare use of a queue, are sufficient for common scenarios. RabbitMQ also supports more advanced <a href="https://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a> call, but I guess it’s not the point today.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p><em>“Use it or lose it.”</em> Now you’ve “mastered” RabbitMQ, use it in your next project! Good luck! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Tutorial </tag>
            
            <tag> Repo Available </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setting Up RabbitMQ</title>
      <link href="/posts/Setting-up-RabbitMQ/"/>
      <url>/posts/Setting-up-RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;You may delay, but time will not.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Benjamin Franklin</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Sometimes you may want to send a message to someone, but don’t want to do it yourself. How to achieve this? Find someone else to send it! Then, if there are too many messages and you don’t want to receive them at once? Stash them somewhere else, and take them at your own pace!</p><p>So this is the basic idea of <a href="https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol">AMQP (Advanced Message Queue Protocol)</a>, a message-oriented middleware. It allows you to publish messages to a queue and consume them in various methods. One of the most famous implementations is <a href="https://www.rabbitmq.com/">RabbitMQ</a>. In this article, I will talk about the installation of it and the basic use of its client.</p><p>I’ll only talk about the Linux installation, specifically Ubuntu 20.04.</p><div class="note success flat"><p>You can refer to the official <a href="https://www.rabbitmq.com/tutorials">Tutorial</a> for basic concepts.</p></div><hr><h1 id="1-Installation"><a href="#1-Installation" class="headerlink" title="1. Installation"></a>1. Installation</h1><blockquote><p>It is highly recommended to use Docker to deploy RabbitMQ on your server. Manual installation is error prone.</p></blockquote><h2 id="1-1-Install-with-Docker"><a href="#1-1-Install-with-Docker" class="headerlink" title="1.1 Install with Docker"></a>1.1 Install with Docker</h2><div class="note info flat"><p>If you do not yet have docker, you can see this post: <a href="/posts/Getting-Started-with-Docker/">Getting Started With Docker</a>.</p></div><p>First, pull the official RabbitMQ image with management plugin.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure><p>Then, run it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management</span><br></pre></td></tr></table></figure><p>Boom!💥You’re all set! If you want to change RabbitMQ configuration, you can mount it directly, or change it inside the container later.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 -v sudo /path/to/your/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf rabbitmq:3-management</span><br></pre></td></tr></table></figure><h2 id="1-2-Manual-Installation"><a href="#1-2-Manual-Installation" class="headerlink" title="1.2 Manual Installation"></a>1.2 Manual Installation</h2><h3 id="1-2-1-Erlang"><a href="#1-2-1-Erlang" class="headerlink" title="1.2.1 Erlang"></a>1.2.1 Erlang</h3><p>As we know, RabbitMQ is written in Erlang, so we need to install it first as the dependency. But be warned, not all Erlang versions are supported, so choose carefully. Check <a href="https://www.rabbitmq.com/docs/which-erlang">Erlang Version Requirements</a> for more information. In my case, the latest version of RabbitMQ is 3.13.3, having support for Erlang 26. You can visit <a href="https://www.erlang.org/">Erlang official page</a> for source code download.</p><p>For example, we use Erlang 26.2.5, and extract the <code>tar.gz</code> with <code>tar -xvf</code>. You may need <code>ncurses-dev</code> installed.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ncurses-dev</span><br></pre></td></tr></table></figure><p>Then, just create installation directory and build Erlang.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/erlang</span><br><span class="line">./configure --prefix=/opt/erlang</span><br><span class="line">make -j</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>Finally, add Erlang to the system <code>PATH</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ERLANG_HOME=/opt/erlang</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$ERLANG_HOME</span>/bin&quot;</span></span><br></pre></td></tr></table></figure><p>You should have Erlang installed now. You can use <code>erl</code> to start Erlang console.</p><h3 id="1-2-2-RabbitMQ"><a href="#1-2-2-RabbitMQ" class="headerlink" title="1.2.2 RabbitMQ"></a>1.2.2 RabbitMQ</h3><p>First, let’s get the latest RabbitMQ release from <a href="https://github.com/rabbitmq/rabbitmq-server/releases">GitHub</a>, for me it’s 3.13.3. Then use <code>tar -xvf</code> to extract it and copy it to <code>/opt/rabbitmq_server-3.13.3</code>. Then in <code>.bashrc</code>, add it to the <code>PATH</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RABBITMQ_HOME=/opt/rabbitmq_server-3.13.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$RABBITMQ_HOME</span>/sbin</span><br></pre></td></tr></table></figure><p>Finally, you can enable RabbitMQ management plugin.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><hr><h1 id="2-Basic-Use-of-RabbitMQ"><a href="#2-Basic-Use-of-RabbitMQ" class="headerlink" title="2. Basic Use of RabbitMQ"></a>2. Basic Use of RabbitMQ</h1><p>If you run RabbitMQ with Docker, you should first enter the container with the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq bash</span><br></pre></td></tr></table></figure><div class="note success flat"><p>If you have Docker extension for Visual Studio Code, you can simply do this by attaching shell to a running container.</p></div><h2 id="2-1-Commands"><a href="#2-1-Commands" class="headerlink" title="2.1 Commands"></a>2.1 Commands</h2><p>Below are some common commands to start or stop RabbitMQ server.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-server           <span class="comment"># run in the foreground</span></span><br><span class="line">rabbitmq-server -detached <span class="comment"># run in the background</span></span><br><span class="line">rabbitmqctl status        <span class="comment"># check service status</span></span><br><span class="line">rabbitmqctl stop          <span class="comment"># stop service</span></span><br></pre></td></tr></table></figure><h2 id="2-2-User-management"><a href="#2-2-User-management" class="headerlink" title="2.2 User management"></a>2.2 User management</h2><div class="note info flat"><p>You should have RabbitMQ server started to proceed any operations.</p></div><p>To access RabbitMQ management dashboard remotely, a new user must be created. Here we create a user and set it as  Administrator.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user &lt;username&gt; &lt;password&gt;</span><br><span class="line">rabbitmqctl set_user_tags &lt;username&gt; administrator</span><br><span class="line">rabbitmqctl set_permissions -p <span class="string">&quot;/&quot;</span> &lt;username&gt; <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure><p>We can check permissions of a user by this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br><span class="line">rabbitmqctl list_user_permissions &lt;username&gt;</span><br><span class="line">rabbitmqctl list_permissions -p /</span><br></pre></td></tr></table></figure><p>You can change a user’s password like this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl change_password &lt;usrname&gt; &lt;new password&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-RabbitMQ-dashboard"><a href="#2-3-RabbitMQ-dashboard" class="headerlink" title="2.3 RabbitMQ dashboard"></a>2.3 RabbitMQ dashboard</h2><p>After adding an administrator, open port 15672 of your server and check the RabbitMQ dashboard! If you have it installed on your local machine, just visit it on <code>localhost</code>, which doesn’t require administrator privileges.</p><p><img src="/posts/Setting-up-RabbitMQ/image-20240629203128295.png" alt="image-20240629203128295"></p><p>Once you have access to the dashboard, there’s no need for the CLI.</p><h3 id="Adding-exchanges-and-queues"><a href="#Adding-exchanges-and-queues" class="headerlink" title="Adding exchanges and queues"></a>Adding exchanges and queues</h3><p>Go to “Exchange” tab, and expand the section “Add a new exchange”. After submit, a new exchange will appear in the table above.</p><img src="/posts/Setting-up-RabbitMQ/image-20240629205338739.png" alt="image-20240629205338739" style="zoom:50%;"><p>Then, go to “Queues and Streams” tab for the same thing.</p><img src="/posts/Setting-up-RabbitMQ/image-20240629205259717.png" alt="image-20240629205259717" style="zoom:50%;"><p>When you have both exchange and queue, you can bind then bind them. Click the exchange to go to the detailed page, and add a binding.</p><img src="/posts/Setting-up-RabbitMQ/image-20240629210221668.png" alt="image-20240629210221668" style="zoom: 50%;"><h3 id="Sending-your-first-message"><a href="#Sending-your-first-message" class="headerlink" title="Sending your first message"></a>Sending your first message</h3><p>Below you can see the “Publish message” section where you can test message production.</p><img src="/posts/Setting-up-RabbitMQ/image-20240629210506113.png" alt="image-20240629210506113" style="zoom:50%;"><p>You can see the message statistics in the overview tab or the details tab of specific queues.</p><img src="/posts/Setting-up-RabbitMQ/image-20240629211316548.png" alt="image-20240629211316548" style="zoom:50%;"><img src="/posts/Setting-up-RabbitMQ/image-20240629211350627.png" alt="image-20240629211350627" style="zoom: 50%;"><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Tada!🎊You have RabbitMQ up and running! In the following article, I’ll demonstrate how to integrate RabbitMQ into Spring Boot application. Coming soon.🙂</p><p>By the way, there’s some other stuff I want to talk about. First is the installation. I tried to use package management to install RabbitMQ, but it turned out to be a mess. The official setup script is long and will add many configurations to your system. And the installed server won’t start up due to unknown reasons.😖The best solution is indeed using a docker, but it’s not available on my machine, so I didn’t show that.</p><p>There are other AMQP implementations like <a href="https://kafka.apache.org/">Apache Kafka</a> and <a href="https://rocketmq.apache.org/">RocketMQ</a>, but RabbitMQ seems to be more popular? Anyway, you have RabbitMQ, enjoy. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Web Servers &amp; Deployment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started With CUDA</title>
      <link href="/posts/Getting-Started-with-CUDA/"/>
      <url>/posts/Getting-Started-with-CUDA/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;You cannot always control what goes on outside.<br><i>But you can always control what goes on inside.&rdquo;</i></i></p><p style="text-align: right"><i>&mdash; Wayne Dyer</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><blockquote><p>&ldquo;<a href="https://developer.nvidia.com/cuda-zone">CUDA&reg;</a> is a parallel computing platform and programming model developed by <a href="https://www.nvidia.com/en-us/">NVIDIA</a> for general computing on graphical processing units (GPUs). With CUDA, developers are able to dramatically speed up computing applications by harnessing the power of GPUs.&rdquo;</p><p style="text-align:right">&mdash; CUDA Zone</p></blockquote><p>Nowadays, GPU is no longer exclusive to video games. Parallel computing, Artificial Intelligence, and many other areas also embrace GPU to improve performance. To harness such power, one must have a general-purpose GPU (GPGPU) with CUDA.</p><div class="note info flat"><p>CUDA is short for Compute Unified Device Architecture.</p></div><p>In this article, I’ll talk about the installation of CUDA, and give a demo of a CUDA program with <a href="https://visualstudio.microsoft.com/">Visual Studio</a> and optionally <a href="https://cmake.org/">CMake</a>.</p><hr><h1 id="1-Setting-up-CUDA-reg"><a href="#1-Setting-up-CUDA-reg" class="headerlink" title="1. Setting up CUDA&reg;"></a>1. Setting up CUDA&reg;</h1><h2 id="1-1-Checking-for-Compatibility"><a href="#1-1-Checking-for-Compatibility" class="headerlink" title="1.1 Checking for Compatibility"></a>1.1 Checking for Compatibility</h2><p>Hold your horse! Before everything, you must ensure that your computer is compatible with CUDA. So how do you check it?</p><p>First, check if you have an NVIDIA GPU. If not, unfortunately, you are shunned by CUDA.</p><p>Then, check if your GPU supports CUDA or not. You can open Device Manager to check your NVIDIA version, then go to  <a href="https://developer.nvidia.com/cuda-gpus">NVIDIA Developer</a> to see the compute compatibility. You should check the “CUDA-Enabled GeForce and TITAN Products” section for common laptops. I think all GeForce series GPUs are compatible.</p><p><img src="/posts/Getting-Started-with-CUDA/image-20240603202415329.png" alt="image-20240603202415329"></p><div class="note success flat"><p>You can use <code>Win + R</code> to open Run, and use <code>devmgmt.msc</code> to open Device Manager.</p></div><h2 id="1-2-Getting-Ready-with-Visual-Studio"><a href="#1-2-Getting-Ready-with-Visual-Studio" class="headerlink" title="1.2 Getting Ready with Visual Studio"></a>1.2 Getting Ready with Visual Studio</h2><p>One more thing. Before you install the CUDA Toolkit, you should have Visual Studio ready, because it will add configuration for it. Just install the community version from the <a href="https://visualstudio.microsoft.com/downloads/">official page</a>. You should at least select “Desktop development with C++” with individual components of Clang and CMake.</p><p><img src="/posts/Getting-Started-with-CUDA/image-20240603224710856.png" alt="image-20240603224710856"></p><p>CUDA seems to depend on Clang, so we’ll see it again real soon.</p><h2 id="1-3-Installing-CUDA-Toolkit"><a href="#1-3-Installing-CUDA-Toolkit" class="headerlink" title="1.3 Installing CUDA Toolkit"></a>1.3 Installing CUDA Toolkit</h2><p>Like any other tool, you need the runtime to write a CUDA-enabled program. For this, you can download <a href="https://developer.nvidia.com/cuda-toolkit">NVIDIA&reg; CUDA&reg; Toolkit</a>. On the page, click download, and select the configuration based on your PC. Here, a network installer is recommended if you don’t need every component.</p><img src="/posts/Getting-Started-with-CUDA/image-20240603230024392.png" alt="image-20240603230024392" style="zoom: 33%;"><p>During the installation, there’s something for you to notice. First, if you worry about your system drive (e.g. <code>C:\</code>), or don’t want a full installation, select <strong>Custom</strong> so that you can choose what and where to install.</p><img src="/posts/Getting-Started-with-CUDA/image-20240603231359784.png" alt="image-20240603231359784" style="zoom:50%;"><p>Then, for installation options, make sure you check CUDA. For the other three, if you previously have GeForce Experience, you may already have installed the latest PhysX and drivers. Anyway, you can take this chance to upgrade them though.</p><img src="/posts/Getting-Started-with-CUDA/image-20240603231636239.png" alt="image-20240603231636239" style="zoom:50%;"><p>After this, just wait for the installation to complete. There shouldn’t be any problems.</p><h2 id="1-4-Installation-Verification"><a href="#1-4-Installation-Verification" class="headerlink" title="1.4 Installation Verification"></a>1.4 Installation Verification</h2><p>After installation, you can just open the Command Prompt or PowerShell to check your CUDA environment.</p><p>You can use <code>nvidia-smi</code> or <code>nvidia-smi.exe</code> to view your GPU information.</p><img src="/posts/Getting-Started-with-CUDA/image-20240603232517063.png" alt="image-20240603232517063" style="zoom: 50%;"><p>Then, you can use <code>nvcc --version</code> to see if the compiler for CUDA is ready to go.</p><img src="/posts/Getting-Started-with-CUDA/image-20240603232639456.png" alt="image-20240603232639456" style="zoom:50%;"><div class="note warning flat"><p>There is a potential problem here, for which <code>nvcc</code> won’t be able to compile the source code. I will discuss this later when we write the first CUDA program.</p></div><h2 id="Setting-up-CUDA-on-Linux"><a href="#Setting-up-CUDA-on-Linux" class="headerlink" title="Setting up CUDA on Linux"></a>Setting up CUDA on Linux</h2><p>For Linux, it is just a matter of a command. Here I use WSL with Ubuntu 20.04.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-cuda-toolkit</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>It could be extremely slow to download the CUDA Toolkit on Linux using the package manager. So choose your proxy wisely. 🤔</p></div><hr><h1 id="2-Your-First-CUDA-Program"><a href="#2-Your-First-CUDA-Program" class="headerlink" title="2. Your First CUDA Program"></a>2. Your First CUDA Program</h1><div class="note info flat"><p>It’s of no difference for the use of CUDA on Windows or Linux, so here I only give the example for Windows using Visual Studio.</p></div><h2 id="2-1-CUDA-Source-File"><a href="#2-1-CUDA-Source-File" class="headerlink" title="2.1 CUDA Source File"></a>2.1 CUDA Source File</h2><p>CUDA is essentially a wrapper for C&#x2F;C++. So the program you write is no different from regular C&#x2F;C++, only a few new functions. Corresponding to <code>.h</code> and <code>.c</code>&#x2F;<code>.cpp</code>, the CUDA-enabled source files have extensions of <code>.cuh</code> and <code>.cu</code>.</p><p>Below is a simple demonstration of a CUDA program. You can see we include a new header file, a strange <code>__global__</code> macro, and a weird <code>&lt;&lt;&lt; &gt;&gt;&gt;</code> syntax. Oh, and there seem to be some variables from nowhere.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuda_runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">kernel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello from block %u, thread %u\n&quot;</span>, blockIdx.x, threadIdx.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    kernel&lt;&lt;&lt;<span class="number">8</span>, <span class="number">16</span>&gt;&gt;&gt;();</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line">    <span class="built_in">cudaDeviceReset</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, let’s break them down one by one.</p><ul><li><code>cuda_runtime.h</code>: The runtime library header file for CUDA, including all you need.</li><li><code>__global__</code>: I think it’s some sort of annotation for CUDA to identify a function that is invoked on the CPU but runs on the GPU.</li><li><code>&lt;&lt;&lt; &gt;&gt;&gt;</code>: Angle triplet, to specify execution configuration for a GPU call. It includes the number of blocks and the number of threads in each block.</li></ul><div class="note info flat"><p>For more information on execution configuration, please refer to <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#execution-configuration">Execution Configuration</a>.</p></div><p>There’s much to learn about CUDA programming, but it’s not the point for now. 😶</p><h2 id="2-2-Run"><a href="#2-2-Run" class="headerlink" title="2.2 Run!"></a>2.2 Run!</h2><p>Now, it’s the most exciting moment! We’re going to compile and run our first CUDA program. So first, make sure you have the <code>.cu</code> program saved to your disk, assume it is called <code>demo.cu</code>. <code>nvcc</code> has similar options as <code>gcc</code>, so run the following command, and see the GPU magic! 🪄</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span>:&gt; nvcc.exe .\demo.cu <span class="literal">-o</span> demo.exe</span><br><span class="line">demo.cu</span><br><span class="line">tmpxft_00000e38_00000000<span class="literal">-10_demo</span>.cudafe1.cpp</span><br><span class="line">Creating library demo.lib and object demo.exp</span><br><span class="line"><span class="built_in">PS</span>:&gt; .\demo.exe</span><br><span class="line">Hello from block <span class="number">2</span>, thread <span class="number">0</span></span><br><span class="line">Hello from block <span class="number">2</span>, thread <span class="number">1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Tada! 🎉 It works!</p><p>Wait a second, I run into an error about <code>cl.exe</code>. 😭 In this case, you can refer to <a href="#Missing-cl-exe">Missing <code>cl.exe</code></a> in Troubleshoot.</p><hr><h1 id="3-CUDA-with-Visual-Studio"><a href="#3-CUDA-with-Visual-Studio" class="headerlink" title="3. CUDA with Visual Studio"></a>3. CUDA with Visual Studio</h1><h2 id="3-1-MS-Solution"><a href="#3-1-MS-Solution" class="headerlink" title="3.1 MS Solution"></a>3.1 MS Solution</h2><p>After you install the CUDA Toolkit, there will be new templates for Visual Studio. You can create a new CUDA project by selecting <code>CUDA</code> under <code>C++</code> in the <code>New Project</code> dialog. After that, you’ll have a default CUDA program, hit <code>Ctrl + F5</code> to run it.</p><img src="/posts/Getting-Started-with-CUDA/image-20240604133953860.png" alt="image-20240604133953860" style="zoom:50%;"><p>I don’t know why, but it can’t work for me. There seems to be some problem with the build command. Attempts to run the command in the integrated Developer PowerShell also failed. For the solution, you can refer to <a href="#Access-Violation">Access Violation</a> in the Troubleshoot section.</p><img src="/posts/Getting-Started-with-CUDA/image-20240604134037556.png" alt="image-20240604134037556" style="zoom:50%;"><p>If you too encounter this error, I suggest you use CMake instead.</p><div class="note danger flat"><p>I use Visual Studio 2022 Preview, so I suppose it’s a BUG or incompatibility?</p></div><h2 id="3-2-CMake"><a href="#3-2-CMake" class="headerlink" title="3.2 CMake"></a>3.2 CMake</h2><div class="note info flat"><p>Well, for CMake, it’s not necessary to use Visual Studio. You can use any IDE or editor you like, even the command line. Here I just use Visual Studio as an example.</p></div><div class="note success flat"><p>The source code for this CMake project can be found on GitHub at <a href="https://github.com/Lord-Turmoil/CudaCMakeDemo">CudaCMakeDemo</a>.</p></div><p>To build CUDA programs with CMake, create a new CMake project first. Well, in this case, you won’t get a default CUDA program, so you may use the one we’ve got in the previous section.</p><img src="/posts/Getting-Started-with-CUDA/image-20240604131024935.png" alt="image-20240604131024935" style="zoom:50%;"><p>For a simple CMake project, you don’t need the nested folder, so you can delete it and reorganize the files. Here, suppose we put all source files in the <code>src</code> folder. For demonstration, I try to use as many kinds of extensions as possible. It’s ok to only have one <code>.cu</code> file.</p><img src="/posts/Getting-Started-with-CUDA/image-20240604132508434.png" alt="image-20240604132508434" style="zoom:67%;"><p>Then, you can copy the following code to overwrite your <code>CMakeLists.txt</code> file.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">3.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span> (<span class="string">&quot;CudaCMake&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">enable_language</span>(CUDA)</span><br><span class="line"><span class="keyword">find_package</span>(CUDAToolkit REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB cpu_source_files <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/*.cpp&quot;</span> <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/*.h&quot;</span>)</span><br><span class="line"><span class="keyword">file</span>(GLOB gpu_source_files <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/*.cu&quot;</span> <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/src/*.cuh&quot;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;cpu_source_files&#125;</span> <span class="variable">$&#123;gpu_source_files&#125;</span>)</span><br></pre></td></tr></table></figure><p>One thing to notice is that, although <code>.cu</code> or <code>.cuh</code> files are C&#x2F;C++ in essence, you can’t just use <code>.c</code>&#x2F;<code>.cpp</code> extensions. On the one hand, IntelliSense won’t recognize syntax like <code>&lt;&lt;&lt; &gt;&gt;&gt;</code>, on the other hand, <code>nvcc</code> won’t do pre-processing for <code>.c</code>&#x2F;<code>.cpp</code> files so the compilation will fail. So, you have to use <code>.cu</code> or <code>.cuh</code> for source files that contain CUDA code. However, CUDA types and functions can be used in <code>.c</code>&#x2F;<code>.cpp</code> files.</p><p>Now, save the CMakeLists.txt and Visual Studio will generate the CMake cache for you. After that, hit <code>Ctrl + F5</code> to compile and run the program! 🎉</p><hr><h1 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h1><h2 id="Missing-cl-exe"><a href="#Missing-cl-exe" class="headerlink" title="Missing cl.exe"></a>Missing <code>cl.exe</code></h2><p>If you directly run <code>nvcc</code> in the command line, you may encounter an error saying <code>cl.exe</code> is not present in <code>PATH</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc fatal   : Cannot find compiler &#x27;cl.exe&#x27; in PATH</span><br></pre></td></tr></table></figure><p>This is because <code>nvcc</code> relies on Clang for compilation. All you need is to add it to your system path. Well, in <a href="#1-2-Getting-Ready-with-Visual-Studio">1.2</a>, you’ve installed Clang with Visual Studio, but it’s private to VS and other programs won’t be able to see it. So you have to add it to the system Path.</p><p>The location for Clang is as follows, somewhere under your Visual Studio installation path. The version number (14.41.33901) may vary for different versions of Visual Studio.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;VS Installation Path&gt;\VC\Tools\MSVC\14.41.33901\bin\Hostx64\x64\</span><br></pre></td></tr></table></figure><p>Then, add the full path to the system path. You can create a new variable or directly add it to Path, both are OK.</p><img src="/posts/Getting-Started-with-CUDA/image-20240604003408632.png" alt="image-20240604003408632" style="zoom:50%;"><p>After you set the environment variable, restart your terminal, and try again. This time everything should work as expected.</p><div class="note success flat"><p>You can use <code>Ctrl + R</code> to open Run and use <code>sysdm.cpl</code> to quickly launch the System Properties dialog.</p></div><p>If you don’t want to add such a path variable, you can also refer to the solution for the next problem just below.</p><h2 id="Access-Violation"><a href="#Access-Violation" class="headerlink" title="Access Violation"></a>Access Violation</h2><p>Another common problem is that <code>nvcc</code> reports an <code>ACCESS_VIOLATION</code> error of <code>cudafe++</code>. This may happen if you use the Developer PowerShell or Developer Command Prompt in Visual Studio.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc error   : &#x27;cudafe++&#x27; died with status 0xC0000005 (ACCESS_VIOLATION)</span><br></pre></td></tr></table></figure><p>This is tricky, for there’s no plain information telling us what is going on, and just no one on the Internet mentioned Visual Studio for this problem. Though there are some hints.</p><p>The reason for this is that you’re trying to run x64 <code>nvcc</code> with a x86 <code>cl.exe</code>. What the? Well, let’s check it out. Here we use our lovely <code>where.exe</code> to locate the <code>cl.exe</code>.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span>:&gt; where.exe cl</span><br><span class="line">E:\IDE\Microsoft Visual Studio\<span class="number">2022</span>\VC\Tools\MSVC\<span class="number">14.41</span>.<span class="number">33901</span>\bin\Hostx86\x86\cl.exe</span><br><span class="line">E:\IDE\Microsoft Visual Studio\<span class="number">2022</span>\VC\Tools\MSVC\<span class="number">14.41</span>.<span class="number">33901</span>\bin\Hostx64\x64\cl.exe</span><br></pre></td></tr></table></figure><p>Gotcha, the x86 version is ahead of x64, which caused <code>nvcc</code> to call that one instead. The solution is simple, but not elegant, which is manually adding <code>-ccbin</code> flag for <code>nvcc</code>.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc .\demo.cu <span class="literal">-ccbin</span> <span class="string">&quot;E:\IDE\Microsoft Visual Studio\2022\VC\Tools\MSVC\14.41.33901\bin\Hostx64\x64\cl.exe&quot;</span></span><br></pre></td></tr></table></figure><p>Yeah, an obvious solution, although a little verbose. So, you can make it a batch script.</p><p>This is a handy job, so I just recommend using VS project or CMake to manage your CUDA project.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>What takes you so long, adventurer? Isn’t it great to get started with CUDA? Now you can unleash the power of your GPU!😆ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Repo Available </tag>
            
            <tag> Visual Studio </tag>
            
            <tag> CUDA </tag>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using WebSocket in Spring Boot</title>
      <link href="/posts/Using-WebSocket-in-Spring-Boot/"/>
      <url>/posts/Using-WebSocket-in-Spring-Boot/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;Down once more to the dungeon of my black despair!<br><i>Down we plunge to the prison of my mind!</i><br><i>Down that path into darkness deep as hell!&rdquo;</i></i></p><p style="text-align: right; font-family: var(--font-phantom)">&mdash; THE PHANTOM OF THE OPERA</p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>WebSocket can be extremely useful for real-time interaction and messaging. Recently, I ran into Spring Boot, but few articles can give a demonstration I want, so that’s why I’m writing this.</p><p>Unlike regular <a href="https://restfulapi.net/">RESTful API</a>, WebSocket can be a little more tricky to use, especially when you want to send message actively from the server. That is to say, the server need to know its clients, instead of making replies when receives new message.</p><p>In this post, I’m going to show you the basic use of WebSocket by implementing a simple messaging API. When user triggers a RESTful API, we will then send a message via WebSocket. It may seem to be a little strange, but the point is to show how WebSocket can be integrated into other services.</p><div class="note success flat"><p>We’ll working with <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> Ultimate and <a href="https://spring.io/">Spring Boot 3.2.5</a>.</p></div><hr><div class="note info flat"><p>All source code can be found at <a href="https://github.com/Lord-Turmoil/WebSocketDemo">WebSocketDemo</a></p></div><h1 id="1-Basic-WebSocket-in-Spring-Boot"><a href="#1-Basic-WebSocket-in-Spring-Boot" class="headerlink" title="1. Basic WebSocket in Spring Boot"></a>1. Basic WebSocket in Spring Boot</h1><div class="note info flat"><p>Code for this part can be found at <code>basic</code> branch.</p></div><h2 id="1-1-Create-a-new-project"><a href="#1-1-Create-a-new-project" class="headerlink" title="1.1 Create a new project"></a>1.1 Create a new project</h2><p>So first, open IDEA and create a new Spring Boot project.</p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420111135345.png" alt="image-20240420111135345.png" style="zoom: 33%;"><p>As we’ll only talk about WebSocket, we can select minimum dependencies.</p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420112947518.png" alt="image-20240420112947518" style="zoom: 33%;"><h2 id="1-2-Configure-WebSocket"><a href="#1-2-Configure-WebSocket" class="headerlink" title="1.2 Configure WebSocket"></a>1.2 Configure WebSocket</h2><p>Spring Boot provides us a simple way to configure WebSocket using <code>WebSocketConfigurer</code>. For a WebSocket, we need an endpoint and a handler. Here, we map our WebSocket to <code>/ws/&#123;username&#125;</code>, so the complete URL would be <code>ws://localhost/ws/&#123;username&#125;</code>. <code>&#123;&#125;</code> means that it is a variable. And you may want to allow all origins to bypass the origin check, or you can specify few origins to restrict the access.</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebSocketHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebSocketConfig</span><span class="params">(WebSocketHandler handler)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addHandler(handler, <span class="string">&quot;/ws/&#123;username&#125;&quot;</span>)</span><br><span class="line">                .setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>WebSocketHandler</code> is our custom handler, it will be invoked on all WebSocket events. There are two types of handlers, <code>TextWebSocketHandler</code> and <code>BinaryWebSocketHandler</code>. Usually, we just need to send JSON message using <code>TextWebSocketHandler</code>.</p><h2 id="1-3-WebSocket-Message-Design"><a href="#1-3-WebSocket-Message-Design" class="headerlink" title="1.3 WebSocket Message Design"></a>1.3 WebSocket Message Design</h2><p>Different from RESTful API, WebSocket need some more configurations, so it would be a good choice to send all messages to one WebSocket connection. In this case, you have to assign different types to different messages so that the client can know how to handle them. For example, a good WebSocket message may look like this.</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;notification&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-04-20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello there!&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The <code>data</code> field may vary depending on its <code>type</code>. So based on this, we can design our <code>WebSocketPayload</code> as follows.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketPayload</span>&lt;TData&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectWriter</span> <span class="variable">WRITER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writer();</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> TData data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebSocketPayload</span><span class="params">(String type, TData data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> WRITER.writeValueAsString(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid WebSocketPayload&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextMessage <span class="title function_">toTextMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextMessage</span>(toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WebSocketPayload&lt;String&gt; <span class="title function_">message</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebSocketPayload</span>&lt;&gt;(<span class="string">&quot;message&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;TData&gt; WebSocketPayload&lt;TData&gt; <span class="title function_">of</span><span class="params">(String type, TData data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebSocketPayload</span>&lt;&gt;(type, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that we use <a href="https://github.com/FasterXML/jackson">Jackson</a> (<code>ObjectWriter</code>) to serialize our Java objects. And eventually, we need to convert it to <code>TextMessage</code>, which is used by <code>TextWebSocketHandler</code>.</p><h2 id="1-4-WebSocket-Handler"><a href="#1-4-WebSocket-Handler" class="headerlink" title="1.4 WebSocket Handler"></a>1.4 WebSocket Handler</h2><p>Now, we can finally reveal the WebSocket handler. Here we just need to extends <code>TextWebSocketHandler</code>, and override several important events.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session.sendMessage(WebSocketPayload.message(<span class="string">&quot;Received: &quot;</span> + message.getPayload()).toTextMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> session.getUri();</span><br><span class="line">        <span class="keyword">if</span> (uri == <span class="literal">null</span>) &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            log.error(<span class="string">&quot;Request uri is null!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> uri.toString().lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            log.error(<span class="string">&quot;Invalid uri: &#123;&#125;&quot;</span>, uri);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> uri.toString().substring(pos + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        session.sendMessage(WebSocketPayload.message(<span class="string">&quot;Welcome back, commander &quot;</span> + username + <span class="string">&quot;.&quot;</span>).toTextMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Connection closed: &#123;&#125; status = &#123;&#125;&quot;</span>, session, status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTransportError</span><span class="params">(WebSocketSession webSocketSession, Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (webSocketSession.isOpen()) &#123;</span><br><span class="line">            webSocketSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(<span class="string">&quot;Transport error: &#123;&#125;&quot;</span>, throwable.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each WebSocket connection will have a corresponding <code>WebSocketSession</code>, which is automatically manage by Spring Boot.</p><div class="note success flat"><p>Here, we parse the URI manually, which may not be a good practice. You may search for a better way to do this.😉</p></div><h2 id="1-4-Testing"><a href="#1-4-Testing" class="headerlink" title="1.4 Testing"></a>1.4 Testing</h2><p>Now we have everything we need for a basic WebSocket connection, let’s test it in <a href="https://www.postman.com/">Postman</a>, and of course, you can use your favorite tool.</p><p>First, launch our application in IDEA. By default, it should be running on port 8080, if not, check the logging. Then in Postman, create a new WebSocket connection, and start your connection! 😀</p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420123034929.png" alt="image-20240420123034929" style="zoom: 50%;"><p>Tada, It works! 🎉</p><hr><h1 id="2-Sending-Message-to-Specific-Users"><a href="#2-Sending-Message-to-Specific-Users" class="headerlink" title="2. Sending Message to Specific Users"></a>2. Sending Message to Specific Users</h1><div class="note info flat"><p>Code for this part is just in the <code>main</code> branch.</p></div><p>In the last section, we implemented the basic WebSocket to send message on receiving. However, in most cases, we just want to send message directly from the server without client action. Searched for <a href="https://bing.com/">Bing</a>, <a href="https://google.com/">Google</a> but none of them provides a simple approach to it.</p><p>Here, I’ll provide you a simple way to achieve this, by remembering user’s session.</p><h2 id="2-1-Session-Service"><a href="#2-1-Session-Service" class="headerlink" title="2.1 Session Service"></a>2.1 Session Service</h2><p>In our WebSocket handler, we use <code>WebSocketSession</code> to send messages to clients. It is managed by Spring Boot, but if we remember them and their corresponding user, we can later use them to send messages directly.</p><p>So to do this, we need a session service to remember the mapping from session to username.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketSessionService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;WebSocketSession, String&gt; sessionToUsername = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSession</span><span class="params">(WebSocketSession session, String username)</span> &#123;</span><br><span class="line">        sessionToUsername.put(session, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeSession</span><span class="params">(WebSocketSession session)</span> &#123;</span><br><span class="line">        sessionToUsername.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line">                              </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String username, WebSocketPayload&lt;?&gt; payload)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;WebSocketSession, String&gt; entry : sessionToUsername.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getValue().equals(username)) &#123;</span><br><span class="line">                    entry.getKey().sendMessage(payload.toTextMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Failed to send message to user: &#123;&#125;&quot;</span>, username, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Why using session to username, not username to session? That is because, one user may have multiple WebSocket session, e.g. more than one tabs in the browser. Thus we need to send message to all sessions of a user. Of course, you can use username to session set mapping, but it would be a little hard to remove the session that way. </p><h2 id="2-2-Save-WebSocket-Session"><a href="#2-2-Save-WebSocket-Session" class="headerlink" title="2.2 Save WebSocket Session"></a>2.2 Save WebSocket Session</h2><p>Now that we have the session service, we can save the relation in our handler. Following is what you need to add in the handler.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebSocketSessionService sessionService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebSocketHandler</span><span class="params">(WebSocketSessionService sessionService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sessionService = sessionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        sessionService.addSession(session, username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        sessionService.removeSession(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTransportError</span><span class="params">(WebSocketSession webSocketSession, Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        sessionService.removeSession(webSocketSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note info flat"><p>By the way, constructor injection is a better practice than using <code>@AutoWired</code>.</p></div><h2 id="2-3-Send-WebSocket-Message-Anywhere"><a href="#2-3-Send-WebSocket-Message-Anywhere" class="headerlink" title="2.3 Send WebSocket Message Anywhere"></a>2.3 Send WebSocket Message Anywhere</h2><p>Finally, we can send message to any user, any where we want, as long as you have <code>WebSocketSessionService</code> injected and a target username. Here let’s demonstrate this using a controller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebSocketSessionService sessionService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebSocketController</span><span class="params">(WebSocketSessionService sessionService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sessionService = sessionService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/send/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> &#123;</span><br><span class="line">        sessionService.sendMessage(username, WebSocketPayload.message(<span class="string">&quot;Hello, &quot;</span> + username + <span class="string">&quot;!&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WebSocket message sent.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, when user send a request to <code>/api/send/&#123;username&#125;</code>, we will respond with a WebSocket message.</p><h2 id="2-4-Testing"><a href="#2-4-Testing" class="headerlink" title="2.4 Testing"></a>2.4 Testing</h2><p>So first, connect to the WebSocket in Postman. To simulate multiple connection, we can duplicate the WebSocket and open two tabs. </p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420131332428.png" alt="image-20240420131332428" style="zoom:50%;"><p>Then, we can trigger the REST API.</p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420131547009.png" alt="image-20240420131547009" style="zoom:50%;"><div class="note info flat"><p>Little trick, you can use <code>:param</code> to declare path variables in Postman.</p></div><p>And as we expected, both connection received the message. 😀</p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420131740454.png" alt="image-20240420131740454" style="zoom:50%;"><hr><h1 id="3-Troubleshoot"><a href="#3-Troubleshoot" class="headerlink" title="3. Troubleshoot"></a>3. Troubleshoot</h1><p>If you are a careful programmer, you may notice some warnings prompted by IDEA. It doesn’t matter, but it’s just annoyed to see the highlighting.</p><img src="/posts/Using-WebSocket-in-Spring-Boot/image-20240420123519286.png" alt="image-20240420123519286" style="zoom:50%;"><p>To solve this warning, create a <code>package-info.java</code>, and add <code>@NonNullApi</code> annotation to it.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNullApi</span></span><br><span class="line"><span class="keyword">package</span> top.tony.wsdemo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.NonNullApi;</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>To be honest, I don’t really like Java. The syntax, naming convention, duh. Not like my lovely C#, let alone my favorite C++. But, Spring Boot is indeed, a good Web framework. Perhaps not good as ASP.NET Core. Anyway, it is all about WebSocket in Spring Boot, and good luck, have fun. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Java </tag>
            
            <tag> Tutorial </tag>
            
            <tag> Repo Available </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Cheat Sheet</title>
      <link href="/posts/Linux-Cheat-Sheet/"/>
      <url>/posts/Linux-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;I like to do all the talking myself. It saves time, and prevents arguments.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Oscar Wilde</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>This is a collection of useful Linux commands that, you don’t need them often, but will go search for every time. So, just as a memo to save the time. 😏</p><div class="note info flat"><p>This article will be updated from time to time as I use and explore Linux.</p></div><blockquote><p>You may also like: <a href="/posts/Docker-Cheat-Sheet/">Docker Cheat Sheet</a><br>You may also like: <a href="/posts/Git-Cheat-Sheet/">Git Cheat Sheet</a></p></blockquote><hr><h1 id="User-Related"><a href="#User-Related" class="headerlink" title="User Related"></a>User Related</h1><p><strong>Change password</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p><strong>Create <code>sudo</code>-enabled user</strong></p><p>See <a href="/posts/Create-sudo-enabled-User-on-Linux/">Create sudo-Enabled User on Linux</a>.</p><hr><h1 id="Quick-Installation"><a href="#Quick-Installation" class="headerlink" title="Quick Installation"></a>Quick Installation</h1><p><strong>Install Java</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openjdk-17-jdk openjdk-17-jre</span><br></pre></td></tr></table></figure><p><strong>Switch Java version</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p><strong>Conda Installation &amp; Usage</strong></p><div class="note success flat"><p>Official page: <a href="https://docs.anaconda.com/miniconda/">Miniconda</a>.</p></div><p>Replace <code>bash</code> with <code>zsh</code> or others if you are using other shells.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/miniconda3</span><br><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</span><br><span class="line">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class="line"><span class="built_in">rm</span> -rf ~/miniconda3/miniconda.sh</span><br><span class="line">~/miniconda3/bin/conda init bash</span><br></pre></td></tr></table></figure><p>Basic usage. <code>-n</code> is short for <code>--name</code>. Replace <code>myenv</code> with your environment name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list  <span class="comment"># List all environments</span></span><br><span class="line">conda create -n myenv python=3.8  <span class="comment"># Create an environment</span></span><br><span class="line">conda activate myenv  <span class="comment"># Activate an environment</span></span><br><span class="line">conda deactivate  <span class="comment"># Deactivate the current environment</span></span><br><span class="line">conda remove -n myenv --all  <span class="comment"># Remove an environment</span></span><br></pre></td></tr></table></figure><hr><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p><strong>Start a new session</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s &lt;session_name&gt;</span><br></pre></td></tr></table></figure><p><strong>Detach from a session</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + b, d</span><br></pre></td></tr></table></figure><p><strong>Attach to a session</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux attach -t &lt;session_name&gt;</span><br></pre></td></tr></table></figure><p><strong>List all sessions</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><hr><h1 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h1><p><strong>Count all files under current directory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -1 | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p><strong>Count all files with certain extension</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.ext&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p><strong>Count total line numbers of all files</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.ext&quot;</span> -print0 | xargs -0 <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p><strong>Show file size</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lh</span><br></pre></td></tr></table></figure><p><strong>Create Link</strong></p><p>Symbolic link</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /path/to/file /path/to/link</span><br></pre></td></tr></table></figure><p>Hard link</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> /path/to/file /path/to/link</span><br></pre></td></tr></table></figure><p><strong>Zip&#x2F;Unzip</strong></p><p>I like Zip.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip archive.zip filename1 filename2 filename3</span><br><span class="line">zip -r archive.zip directory_name1 directory_name2 file1 file1</span><br><span class="line"></span><br><span class="line">unzip archive.zip -d /path/to/directory</span><br></pre></td></tr></table></figure><p>To tar or untar a file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar -cvzf archive.tar.gz filename1 filename2 filename3</span><br><span class="line">tar -cvzf archive.tar.gz directory_name1 directory_name2 file1 file1</span><br><span class="line"></span><br><span class="line">tar -xvf foo.tar</span><br><span class="line">tar -xvzf foo.tar.gz</span><br><span class="line">tar -xvjf foo.tar.bz2</span><br></pre></td></tr></table></figure><hr><h1 id="Remote-Connection"><a href="#Remote-Connection" class="headerlink" title="Remote Connection"></a>Remote Connection</h1><div class="note info flat"><p>Perhaps this is for Windows.</p></div><p><strong>Connect via SSH</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p>Some times the server may prompt password every time. In this case, you can send your public key to the server. First, generate key pair using <code>ssh-keygen</code>. This command exists on both Windows and Linux. It will generate <code>id_rsa</code> and <code>id_rsa.pub</code> under <code>.ssh</code>. The filename may vary.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span></span><br></pre></td></tr></table></figure><p>Then, for Linux, you can do this using <code>ssh-copy-id</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id id_rsa.pub user@host</span><br></pre></td></tr></table></figure><p>For Windows, there’s a equivalent command composition.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type id_rsa.pub | ssh user@host &quot;cat &gt;&gt; .ssh/authorized_keys&quot;</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network Settings for WSL</title>
      <link href="/posts/Network-Settings-for-WSL/"/>
      <url>/posts/Network-Settings-for-WSL/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;Be fascinated instead of frustrated.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Jim Rohn</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>WSL (<a href="https://learn.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux</a>) introduces Linux features on Windows, which is really awesome. However, sometimes you may run into network connectivity issues, especially when you use a proxy in Windows.</p><p>For example, you may not be able to connect to the Internet in WSL, or have to manually set proxy, which you enabled in Windows.</p><p>So in this article, I’m going to show you a preferred network configuration for WSL.</p><h1 id="Network-Configuration"><a href="#Network-Configuration" class="headerlink" title="Network Configuration"></a>Network Configuration</h1><div class="note info flat"><p>For more detailed information on mirrored mode, go <a href="https://learn.microsoft.com/en-us/windows/wsl/networking#mirrored-mode-networking">Mirrored mode networking</a>.</p></div><p>To get a better network experience in WSL, I recommend you enable mirrored mode. It will ‘mirror’ the network interfaces that you have on Windows into Linux, so you can connect to the Internet just like you do in Windows.</p><p>To enable this, you need to add some entries in the WSL configuration file. It should be <code>C:\Users\&#123;Username&#125;\.wslconfig</code>, or you can access it with environment variable <code>%USERPROFILE%\.wslconfig</code>. Create one if it doesn’t exist. </p><p>Now open <code>.wslconfig</code>, It uses the syntax of <code>.ini</code> file. First of all, add a section <code>[wsl2]</code>, then all our configurations should be placed under it. </p><h2 id="Enable-Mirror-Mode"><a href="#Enable-Mirror-Mode" class="headerlink" title="Enable Mirror Mode"></a>Enable Mirror Mode</h2><p>To enable mirrored mode, add <code>networkingMode=mirrored</code> in <code>[wsl2]</code>. Then, you should add some firewall rules in Windows.</p><p>Open PowerShell with admin privileges to <a href="https://learn.microsoft.com/en-us/windows/security/operating-system-security/network-security/windows-firewall/hyper-v-firewall">Configure Hyper-V firewall</a> settings to allow inbound connections.</p><p>The simplest way is to allow all connections by running the following command.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-NetFirewallHyperVVMSetting</span> <span class="literal">-Name</span> <span class="string">&#x27;&#123;40E0AC32-46A5-438A-A0B2-2B479E8F2E90&#125;&#x27;</span> <span class="literal">-DefaultInboundAction</span> Allow</span><br></pre></td></tr></table></figure><p>However, if you want to allow specific port or port range, things will get a little more complicated. For example, if we want to allow TCP on port 80, you should run the following command. Replace <code>&#123;Rule Name&#125;</code> and <code>&#123;Display Name&#125;</code> with your own.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-NetFirewallHyperVRule</span> <span class="literal">-Name</span> <span class="string">&quot;&#123;Rule Name&#125;&quot;</span> <span class="literal">-DisplayName</span> <span class="string">&quot;&#123;Display Name&#125;&quot;</span> <span class="literal">-Direction</span> Inbound <span class="literal">-VMCreatorId</span> <span class="string">&#x27;&#123;40E0AC32-46A5-438A-A0B2-2B479E8F2E90&#125;&#x27;</span> <span class="literal">-Protocol</span> TCP <span class="literal">-LocalPorts</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Now, you should have a smoother network connection.</p><h2 id="Auto-Proxy"><a href="#Auto-Proxy" class="headerlink" title="Auto Proxy"></a>Auto Proxy</h2><p>If you use proxy on Windows when WSL is running, you may receive notification from WSL reporting HTTP proxy change. WSL can detect Windows’s proxy, but you need to  apply them manually. It can be a annoying problem, so you can enable auto proxy for WSL to make the proxy be set automatically in WSL.</p><p>To enable this, simply add <code>autoProxy=true</code> under <code>[wsl2]</code>.</p><p>So eventually, your <code>.wslconfig</code> will look like this.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[wsl2]</span></span><br><span class="line"><span class="attr">networkingMode</span>=mirrored</span><br><span class="line"><span class="attr">autoProxy</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Now, shutdown your WSL (if it is running during configuration) using <code>wsl --shutdown</code> in PowerShell, and restart it. 🎉</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><div class="note info flat"><p>If you want to know more about WSL configuration, go <a href="https://learn.microsoft.com/en-us/windows/wsl/wsl-config">Advanced settings configuration in WSL</a>.</p></div><p>Well, with these configurations, you should have a better network experience in WSL. ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thoughts on Building Fluent API</title>
      <link href="/posts/Thoughts-on-Building-Fluent-API/"/>
      <url>/posts/Thoughts-on-Building-Fluent-API/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center"><i>&ldquo;Who was that shape in the shadows?<br><i>Whose is the face in the mask?&rdquo;</i></i></p><p style="text-align: right; font-family: var(--font-phantom)">&mdash; THE PHANTOM OF THE OPERA</p><div class="note primary flat"><p>The original idea comes from here: <a href="https://mitesh1612.github.io/blog/2021/08/11/how-to-design-fluent-api">How to Create a Fluent API in C#</a>. Thanks for the inspiration! 😄</p></div><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>As a developer, you may already heard of the concept of <a href="https://en.wikipedia.org/wiki/Fluent_interface">Fluent API</a>. No? Let me show you some examples.</p><p>As a C# developer, you must be familiar with <a href="https://learn.microsoft.com/en-us/dotnet/csharp/linq/">LINQ</a>. It is really an elegant way of filtering data.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OrdersList.Where(o =&gt; o.Amount &gt; <span class="number">1000</span> &amp;&amp; o.Date &gt;= DateTime.Now.AddDays(<span class="number">-5</span>))</span><br><span class="line">    .OrderBy(o =&gt; o.Amount)</span><br><span class="line">    .Take(<span class="number">10</span>)</span><br><span class="line">    .Select(o =&gt; o.Customer)</span><br><span class="line">    .ToList();</span><br></pre></td></tr></table></figure><p>Or, if you’re a Java player, you may use Stream API like this.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars.stream().filter(car -&gt; car.kilometers &lt; <span class="number">50000</span>)</span><br><span class="line">    .collect(Collectors.toList())</span><br></pre></td></tr></table></figure><p>Fluent API not only provide seamless programming experience, but also friendly for code suggestion or completion, as users can see and only see the available methods they can use.</p><p><img src="/posts/Thoughts-on-Building-Fluent-API/Intellisence.png" alt="Intellisence"></p><p>Fluent API works just, fluently. So how to create a Fluent API of your own? 🤔</p><p>In this post, I’m going to show the mechanism behind Fluent API, and provide you with a demo.</p><hr><h1 id="1-Behind-the-Fluent-API"><a href="#1-Behind-the-Fluent-API" class="headerlink" title="1. Behind the Fluent API"></a>1. Behind the Fluent API</h1><p>First of all, we have to ask ourself a question: How does the Fluent API work?</p><p>Let’s think about it. Of course, we must be able to chain the method call, which can be simply done by returning the instance itself. However, after each call, the next method varies. 🧐</p><p>Does it ring a bell? I believe you are close to its secret. That’s it, automata! The chained call is actually traversing on an automata! 😆 Each method will return a state in the automata, and each state can call different methods leading to state transition.</p><p>Now we know the theory behind this, let’s get to a demo to implement this idea. I’ll show you the basic design of Fluent API, and a trick to make it even more fluent. 😉</p><div class="note info flat"><p>All code in this post is available on <a href="https://github.com/Lord-Turmoil/FluentApiDemo">GitHub</a>.</p></div><hr><h1 id="2-Getting-Fluent"><a href="#2-Getting-Fluent" class="headerlink" title="2. Getting Fluent"></a>2. Getting Fluent</h1><div class="note info flat"><p>Code for this part is under folder <code>Basic</code> in project <code>FluentApiDemo</code>. Corresponding test class is <code>BasicTest</code>.</p></div><p>Now, think of a situation when you need to build a table using SQL. You may need to manually write the SQL string like below, and use string concatenation to join them piece by piece.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Demo`.`DemoTable` (</span><br><span class="line">  `Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>In case you are not familiar with it, you can refer to this post for the basic syntax of creating a table using SQL: <a href="https://www.tutorialspoint.com/sql/sql-create-table.htm">SQL - CREATE Table</a>.</p></div><p>This is one of the best scenario to use Fluent API, to build a structured object. So let’s go through the complete process to create a SQL table builder with Fluent API.</p><h2 id="1-1-Constructing-the-Automata"><a href="#1-1-Constructing-the-Automata" class="headerlink" title="1.1 Constructing the Automata"></a>1.1 Constructing the Automata</h2><p>It is vital to analyze the calling relations when we try to build Fluent API, because that’s what makes Fluent API fluent. And it would be even better if you can draw the corresponding automata.</p><p>To create a table using SQL, roughly you need these information.</p><ul><li>Name of the table.</li><li>Name of the database you want to put this table.</li><li>Columns in the table, and each column has name, type, whether is key or is required.</li></ul><p>In the properties above, except for the key and nullable properties, all information is required. So we can draft our automata like this. The node represents a state of the builder, and the edge represents a method call. We start from Initial, and finally go to End after a series of calls.</p><p><img src="/posts/Thoughts-on-Building-Fluent-API/Basic.svg"></p><p> The edges labeled ε means the state can transfer without calling any method. For example, after we call <code>OfType()</code>, we can directly call <code>Build()</code> or <code>AddColumn()</code>, instead of calling <code>IsKey()</code> or <code>IsRequired()</code>.</p><p>Isn’t it clear when we have the automata? 😏 Now let’s implement it.</p><div class="note warning flat"><p>Actually, there is one flaw in this preliminary automata I presented you here, have you found it?<br><span class="hide-inline"><button type="button" class="hide-button" style>Click to reveal the flaw.</button><span class="hide-content">You can build the table without adding any columns! 😨</span></span></p></div><h2 id="1-2-Creating-the-Interfaces"><a href="#1-2-Creating-the-Interfaces" class="headerlink" title="1.2 Creating the Interfaces"></a>1.2 Creating the Interfaces</h2><p>Now it’s time to convert the automata to actual code. Here I’m going to use C# as example, but the other object-oriented language should work just the same.</p><p>To get start, you should have a basic thoughts of your implementation. Each node in the automata should be an interface, with its out edges as methods. And for each method, its return value should be the interface its edge points to.</p><p>As for interfaces connected by ε edges, it means that, the interface at the start of the ε edge can call methods of the interface at the end.</p><p>With these in mind, we need 5 interfaces, and each can be defined as follows.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanSetDatabase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICanAddColumn <span class="title">InDatabase</span>(<span class="params"><span class="built_in">string</span> database</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanAddColumn</span> : <span class="title">ICanBuildTable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICanSetColumnType <span class="title">AddColumn</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanSetColumnType</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICanSetColumnProperty <span class="title">OfType</span>(<span class="params"><span class="built_in">string</span> type</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanSetColumnProperty</span> : <span class="title">ICanBuildTable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICanAddColumn <span class="title">IsKey</span>()</span>;</span><br><span class="line">    <span class="function">ICanAddColumn <span class="title">IsRequired</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanBuildTable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Build</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note the use of inheritance here. When ε edge encountered, you don’t need to write the method again in another interface. Instead, you can simply inherit them.</p><h2 id="1-3-Implementing-the-Interfaces"><a href="#1-3-Implementing-the-Interfaces" class="headerlink" title="1.3 Implementing the Interfaces"></a>1.3 Implementing the Interfaces</h2><p>The implementation shows the interface magic again. We just need a class that implements all these interfaces, and all the self reference returned will be recognized as corresponding interfaces, and limit the user access for the methods.</p><p>So, we can create a <code>BasicTableDescriptor</code> like this. The approach is not one and only. It’s just a demo. 🙂</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BasicTableDescriptor</span> :</span><br><span class="line">    <span class="title">ICanSetDatabase</span>,</span><br><span class="line">    <span class="title">ICanAddColumn</span>,</span><br><span class="line">    <span class="title">ICanSetColumnType</span>,</span><br><span class="line">    <span class="title">ICanSetColumnProperty</span>,</span><br><span class="line">    <span class="title">ICanBuildTable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; _columns = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;<span class="built_in">string</span>&gt; _keys = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _currentColumn = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _database = <span class="literal">null</span>!;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name = <span class="literal">null</span>!;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BasicTableDescriptor</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICanSetDatabase <span class="title">CreateTable</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> descriptor = <span class="keyword">new</span> BasicTableDescriptor();</span><br><span class="line">        descriptor._name = name;</span><br><span class="line">        <span class="keyword">return</span> descriptor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> ICanAddColumn <span class="title">InDatabase</span>(<span class="params"><span class="built_in">string</span> database</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _database = database;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICanSetColumnType <span class="title">AddColumn</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Tuple&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>&gt; column = Tuple.Create(name, <span class="string">&quot;&quot;</span>, <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">        _columns.Add(column);</span><br><span class="line">        _currentColumn++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> ICanSetColumnProperty <span class="title">OfType</span>(<span class="params"><span class="built_in">string</span> type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _columns[_currentColumn] = Tuple.Create(_columns[_currentColumn].Item1, type, <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICanAddColumn <span class="title">IsKey</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _columns[_currentColumn] =</span><br><span class="line">            Tuple.Create(_columns[_currentColumn].Item1, _columns[`_currentColumn`].Item2, <span class="string">&quot;NOT NULL&quot;</span>);</span><br><span class="line">        _keys.Add(_columns[_currentColumn].Item1);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICanAddColumn <span class="title">IsRequired</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _columns[_currentColumn] =</span><br><span class="line">            Tuple.Create(_columns[_currentColumn].Item1, _columns[_currentColumn].Item2, <span class="string">&quot;NOT NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Build</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If key is missing, add the first column as key.</span></span><br><span class="line">        <span class="keyword">if</span> (_keys.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_columns.Count == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Table must have at least one column&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _keys.Add(_columns[<span class="number">0</span>].Item1);</span><br><span class="line">            _columns[<span class="number">0</span>] = Tuple.Create(_columns[<span class="number">0</span>].Item1, _columns[<span class="number">0</span>].Item2, <span class="string">&quot;NOT NULL&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sql.AppendLine(<span class="string">$&quot;CREATE TABLE `<span class="subst">&#123;_database&#125;</span>`.`<span class="subst">&#123;_name&#125;</span>` (&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (Tuple&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>&gt; column <span class="keyword">in</span> _columns)</span><br><span class="line">        &#123;</span><br><span class="line">            sql.AppendLine(<span class="string">$&quot;  `<span class="subst">&#123;column.Item1&#125;</span>` <span class="subst">&#123;column.Item2&#125;</span> <span class="subst">&#123;column.Item3&#125;</span>,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sql.Append(<span class="string">&quot;  PRIMARY KEY (&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _keys.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sql.Append(<span class="string">$&quot;`<span class="subst">&#123;_keys[i]&#125;</span>`&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (i != _keys.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sql.Append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sql.AppendLine(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        sql.AppendLine(<span class="string">&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sql.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, you can write code like this to generate a SQL statement.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> sql = BasicTableDescriptor.CreateTable(<span class="string">&quot;ValidTable&quot;</span>).InDatabase(<span class="string">&quot;Demo&quot;</span>)</span><br><span class="line">    .AddColumn(<span class="string">&quot;Id&quot;</span>).OfType(<span class="string">&quot;int&quot;</span>).IsKey()</span><br><span class="line">    .AddColumn(<span class="string">&quot;Name&quot;</span>).OfType(<span class="string">&quot;varchar(255)&quot;</span>).IsRequired()</span><br><span class="line">    .AddColumn(<span class="string">&quot;Age&quot;</span>).OfType(<span class="string">&quot;int&quot;</span>).IsRequired()</span><br><span class="line">    .AddColumn(<span class="string">&quot;Email&quot;</span>).OfType(<span class="string">&quot;varchar(255)&quot;</span>)</span><br><span class="line">    .Build();</span><br></pre></td></tr></table></figure><p>And it will output the following SQL.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Demo`.`ValidTable` (</span><br><span class="line">  `Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`Id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Tada! 🎉 Your API is fluent now! 😁</p><h2 id="1-4-Limitation"><a href="#1-4-Limitation" class="headerlink" title="1.4 Limitation"></a>1.4 Limitation</h2><p>If you looked into the implementation I’ve presented above, you may notice one problem, which I mentioned in <a href="#1-1-Constructing-the-Automata">1.1</a>. That is when we trying to build the SQL without adding any column, it will throw an exception!</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BasicTableDescriptor.CreateTable(<span class="string">&quot;InvalidTable&quot;</span>).InDatabase(<span class="string">&quot;Demo&quot;</span>).Build();</span><br><span class="line"><span class="comment">// Exception thrown!</span></span><br></pre></td></tr></table></figure><p>Users can only know this via documentation, or see the exception thrown with their own 👀. This is bad, because it will make our Fluent API not fluent. 🥲</p><p>So how can we prevent it from even happening?</p><hr><h1 id="3-Becoming-More-Fluent"><a href="#3-Becoming-More-Fluent" class="headerlink" title="3. Becoming More Fluent"></a>3. Becoming More Fluent</h1><div class="note info flat"><p>Code for this part is under folder <code>Advanced</code> in project <code>FluentApiDemo</code>. Corresponding test class is <code>AdvancedTest</code>.</p></div><p>In this part I’m going to introduce to you a simple way of dealing with the number of calls in Fluent API. Which mean some method can only be access after a certain number of calls for a method.</p><h2 id="3-1-Updating-the-Automata"><a href="#3-1-Updating-the-Automata" class="headerlink" title="3.1 Updating the Automata"></a>3.1 Updating the Automata</h2><p>To make <code>Build()</code> not available before the first <code>AddColumn()</code> is called, the most simple modification we can come up with is adding those steps before <code>Build()</code>. And the automata will then be like this.</p><p><img src="/posts/Thoughts-on-Building-Fluent-API/Advanced-1.svg" alt="Advanced-1"></p><p>We simply duplicated some interfaces to achieve the goal, and it looks good. But in this case, we’ll have 9 interfaces! 🫢 Do we really need so many nodes? The answer is, no.</p><h2 id="3-2-Finite-Automata"><a href="#3-2-Finite-Automata" class="headerlink" title="3.2 Finite Automata"></a>3.2 Finite Automata</h2><p>Here it requires some more knowledge on automata. The one we have now is a <strong>NFA</strong> (Non-deterministic Finite Automata). It can be determined as a <strong>DFA</strong> (Deterministic Finite Automata) and minimized. However, as we don’t really use program to traverse it, there’s no need for determination. But we still need basic minimization to reduce our work.</p><p>So… just look at it, and figure it out… 😳 There are some tricks, though. To be specific, there are three steps.</p><ol><li>Pick two interfaces (nodes), check their incoming edges and outgoing edges.</li><li>If both the incoming and outgoing edges match (exact match, number and names), then you <strong>MAYBE</strong> able to merge them into one.</li><li>Repeat step 1 and 2, until the automata is simple enough.</li></ol><p>After these steps, you may get a minimized NFA like this. There’s only one more interface added, the purple one.</p><p><img src="/posts/Thoughts-on-Building-Fluent-API/Advanced-2.svg" alt="Advanced-2"></p><h2 id="3-3-More-Fluent-Descriptor"><a href="#3-3-More-Fluent-Descriptor" class="headerlink" title="3.3 More Fluent Descriptor"></a>3.3 More Fluent Descriptor</h2><p>With an added state, we need to modify the return value of <code>InDatabase()</code>, and add an interface representing the purple node.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanSetDatabase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICanAddColumnFirst <span class="title">InDatabase</span>(<span class="params"><span class="built_in">string</span> database</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICanAddColumnFirst</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">ICanSetColumnType <span class="title">AddColumn</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But it will introduce another problem - naming conflict. If we inherit all these interfaces like we did before, you’ll find that <code>AddColumn()</code> will be defined both in <code>ICanAddColumnFirst</code> and <code>ICanAddColumn</code> with the same parameter and return value, but they should have different behavior! 😩</p><p>If we cannot define them in one class, then why not in two? We can split our automata into two, and each implements a subset of our interfaces.</p><p><img src="/posts/Thoughts-on-Building-Fluent-API/Advanced-3.svg" alt="Advanced-3"></p><p>Note that we will silently transfer to another class instance in the first <code>AddColumn</code> method, and all states should be preserved. So, we can create the following two classes. (Forget about the poor naming. 😭)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AdvancedTableDescriptor</span> :</span><br><span class="line">    <span class="title">ICanSetDatabase</span>,</span><br><span class="line">    <span class="title">ICanAddColumnFirst</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICanSetColumnType <span class="title">AddColumn</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Tuple&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">string</span>&gt; column = Tuple.Create(name, <span class="string">&quot;&quot;</span>, <span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">        _columns.Add(column);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AdvanceTableDescriptorImpl(_name, _database, _columns);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">AdvanceTableDescriptorImpl</span> :</span><br><span class="line">    <span class="title">ICanAddColumn</span>, <span class="title">ICanSetColumnType</span>, <span class="title">ICanSetColumnProperty</span>, <span class="title">ICanBuildTable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>The other parts are the same, and you can go to its repo on <a href="https://github.com/Lord-Turmoil/FluentApiDemo">GitHub</a> for the detailed implementation.</p></div><p>Tada! 🎉 Now, the invalid call won’t even pass compilation. 😁</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AdvancedTableDescriptor.CreateTable(<span class="string">&quot;InvalidTable&quot;</span>)</span><br><span class="line">    .InDatabase(<span class="string">&quot;Demo&quot;</span>).Build();   <span class="comment">// Compile error!</span></span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Although it requires some tricks to implement a Fluent API, the most important thing is to know <strong>how users use your interface</strong>. Remember that the Fluent API is only fluent when the calling logic is straight forward and easily understood.</p><p>Now the secret is revealed, enjoy your own Fluent API! ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Software Engineering </category>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> C# </tag>
            
            <tag> Design </tag>
            
            <tag> Fluent API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Connecting to JumpServer With VSCode</title>
      <link href="/posts/Connecting-to-JumpServer-with-VSCode/"/>
      <url>/posts/Connecting-to-JumpServer-with-VSCode/</url>
      
        <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>In the <em>Operating System</em> course of BUAA, we have to write our code in the JumpServer using Vim. Of course, Vim is a good editor, but it is too geek for beginners. And through a single console, we cannot gain a global glimpse of all codes.</p><p>One of the best solution is to clone the repository to your local machine. And with the help of <a href="https://learn.microsoft.com/en-us/windows/wsl/install">WSL (Windows Subsystem for Linux)</a>, we can run Linux commands in Windows. Plus, with <a href="https://visualstudio.microsoft.com/">Visual Studio</a>, and even <a href="https://www.jetbrains.com/resharper/">ReSharper</a>, you’ll have unparalleled C&#x2F;C++ development environment.</p><p>However, if you don’t want to set up WSL environment, there is another option, that is connecting to the JumpServer via SSH using Visual Studio Code. In this post, I’m going to show you how.</p><hr><h1 id="Connecting-to-the-JumpServer"><a href="#Connecting-to-the-JumpServer" class="headerlink" title="Connecting to the JumpServer"></a>Connecting to the JumpServer</h1><div class="note success flat"><p>You should have <a href="https://code.visualstudio.com/Download">Visual Studio Code</a> installed already. 😀</p></div><h2 id="Step-1-Setting-up-SSH"><a href="#Step-1-Setting-up-SSH" class="headerlink" title="Step 1. Setting up SSH"></a>Step 1. Setting up SSH</h2><p>The connection with the JumpServer is based on SSH, so you should have SSH client installed on your local machine. To be more specific, you should have OpenSSH 9.0 or higher. You can use <code>ssh -V</code> to check the version on your PC.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ssh <span class="literal">-V</span></span><br><span class="line">OpenSSH_for_Windows_9.<span class="number">5</span>p1, LibreSSL <span class="number">3.8</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><p>If you don’t have it, or the version is too low, go to its <a href="https://github.com/PowerShell/Win32-OpenSSH/releases">release page</a> to download the latest distribution. You can download <code>.msi</code> installer if you want an automatic installation.</p><div class="note warning flat"><p>Select the correct version depending on the architecture of your PC.</p></div><p>After installation, use <code>ssh -V</code> again to check if everything works well. If you still don’t have the command, add the installation path of OpenSSH (e.g. <code>C:\WINDOWS\System32\OpenSSH\</code>)  to the system <code>Path</code> variable.</p><div class="note info flat"><p>If you don’t know how to add system environment variable, go search it on the Internet. 😉</p></div><p>For Windows users, the configuration files of SSH are located under <code>C:\Users\&#123;Your Username&#125;\.ssh\</code> directory. We’ll use it real soon.</p><h2 id="Step-2-Getting-the-IP-Key"><a href="#Step-2-Getting-the-IP-Key" class="headerlink" title="Step 2. Getting the IP &amp; Key"></a>Step 2. Getting the IP &amp; Key</h2><p>To connect to the JumpServer, we need to know its IP and public SSH key.</p><h3 id="Getting-the-IP"><a href="#Getting-the-IP" class="headerlink" title="Getting the IP"></a>Getting the IP</h3><p>Go to the JumpServer <a href="https://lab.os.buaa.edu.cn/">dash board</a>, click the title on the top-left corner to the <a href="https://lab.os.buaa.edu.cn/ui/#/workbench/home">workbench page</a>.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315200046204.png" alt="image-20240315200046204" style="zoom:50%;"><p>Then, in the workbench page, go to “My Assets” section, you’ll see the IP of your server. Keep it, we’ll use it later.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315200237271.png" alt="image-20240315200237271" style="zoom: 33%;"><h3 id="Getting-the-Key"><a href="#Getting-the-Key" class="headerlink" title="Getting the Key"></a>Getting the Key</h3><p>On the top-right corner, click your name, and go to “Profile” page.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315194225757.png" alt="image-20240315194225757" style="zoom:50%;"><p>Then, in the profile page, go to “Auth settings” section, click “Reset” to reset your public key, and download it.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315194441591.png" alt="image-20240315194441591" style="zoom: 50%;"><p>It should be a <code>.pem</code> file. Save it to your SSH directory, it should be <code>C:\Users\&#123;Your Username&#125;\.ssh\</code> as we mentioned before. If that directory doesn’t yet exist, create one. Let’s call it <code>os-jumpserver.pem</code>.</p><h2 id="Step-3-VSCode-Coming-up"><a href="#Step-3-VSCode-Coming-up" class="headerlink" title="Step 3. VSCode Coming up!"></a>Step 3. VSCode Coming up!</h2><h3 id="Configure-Extension"><a href="#Configure-Extension" class="headerlink" title="Configure Extension"></a>Configure Extension</h3><p>Now, we have enough information to connect to the JumpServer in Visual Studio. First, make sure you have “Remove - SSH” extension installed.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315200550935.png" alt="image-20240315200550935" style="zoom: 33%;"><p>After installation, right click on it and open its settings.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315200717639.png" alt="image-20240315200717639" style="zoom:50%;"><p>Find “Local Server Download” option, and select “always”. Because the JumpServer is not connect to the Internet, so we cannot download VSCode server on the remote host.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315200741371.png" alt="image-20240315200741371" style="zoom: 50%;"><p>Then, find “Server Install Path” option, click “Add Item” to add a new entry with name “OS-JumpServer” (the SSH connection name you’re going to set later). The value <strong>MUST</strong> be <code>/&#123;your student id&#125;</code>.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240316154318941.png" alt="image-20240316154318941" style="zoom:50%;"><div class="note danger flat"><p>The JumpServer seems to only allow file upload to <code>/{your student id}</code> directory, so you must manually set the install path.</p></div><h3 id="Setup-SSH"><a href="#Setup-SSH" class="headerlink" title="Setup SSH"></a>Setup SSH</h3><p>Click the “Terminal Icon” on the bottom-left corner to start a remote connection.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315200926031.png" alt="image-20240315200926031" style="zoom: 67%;"><p>Then, you should choose “Connect to Host”, or “Connect Current Window to Host…”. The first one will open a new VSCode window.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315201018307.png" alt="image-20240315201018307" style="zoom:50%;"><p>Then, select “Configure SSH Hosts…”, and select your SSH configuration file.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315201122973.png" alt="image-20240315201122973" style="zoom:67%;"><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315201203856.png" alt="image-20240315201203856" style="zoom:67%;"><p>The <code>config</code> file will be opened in VSCode, add the following section to it. Replace the info with your student ID and JumpServer IP. And of course, if you use a different name for that <code>.pem</code> file. Now save and close it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host OS-JumpServer</span><br><span class="line">  HostName lab.os.buaa.edu.cn</span><br><span class="line">  User &#123;your id&#125;@git@&#123;jumpserver ip&#125;</span><br><span class="line">  Port 2222</span><br><span class="line">  IdentityFile ~/.ssh/os-jumpserver.pem</span><br></pre></td></tr></table></figure><p>Now, start a remote SSH connection again, and you’ll see our new profile.</p><p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315201839326.png" alt="image-20240315201839326"></p><p>Click it, and Visual Studio Code will start to download the VSCode Server, and then upload it to the JumpServer.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315202026234.png" alt="image-20240315202026234" style="zoom:50%;"><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240315202109765.png" alt="image-20240315202109765" style="zoom:50%;"><p>It may prompt you to choose the Operating System of the remote host, just select Linux. And if everything works well, you’ll be able to connect to the JumpServer! 😆</p><h3 id="Open-folder-in-VSCode"><a href="#Open-folder-in-VSCode" class="headerlink" title="Open folder in VSCode"></a>Open folder in VSCode</h3><p>Then everything is the same as you do on your local machine. Just open the working directory in VSCode, and you can start coding!</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240316155917565.png" alt="image-20240316155917565" style="zoom:50%;"><h2 id="Step-4-Install-C-C-Extension-Optional"><a href="#Step-4-Install-C-C-Extension-Optional" class="headerlink" title="Step 4. Install C&#x2F;C++ Extension (Optional)"></a>Step 4. Install C&#x2F;C++ Extension (Optional)</h2><p>If you want a better coding experience in the JumpServer, you can install C&#x2F;C++ extension for VSCode.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240316155105463.png" alt="image-20240316155105463" style="zoom:50%;"><div class="note danger flat"><p>Don’t install C&#x2F;C++ Extension Pack, which is too heavy for the JumpServer.</p></div><p>As the JumpServer may not be able to download it, you can upload the VSIX installer to the JumpServer and install it manually. The download page for the extension can be found here: <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C&#x2F;C++ for Visual Studio Code</a>. After you get the installer, use <code>scp</code> command to copy it to the remote server.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ms<span class="literal">-vscode</span>.cpptools<span class="literal">-1</span>.<span class="number">19.8</span>@linux<span class="literal">-x64</span>.vsix OS<span class="literal">-JumpServer</span>:/&#123;your student id&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Still, you can only upload it to <code>/{your student id}</code> directory.</p></div><p>In VSCode extensions tab, click “Install from VSIX…”. Then go to <code>/&#123;your student id&#125;</code> directory to find the VSIX installer. After installation, you’ll be prompt to reload Visual Studio Code.</p><img src="/posts/Connecting-to-JumpServer-with-VSCode/image-20240316155549151.png" alt="image-20240316155549151" style="zoom:67%;"><hr><h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>If you want to upload files to the JumpServer, you can use the <code>scp</code> command as we’ve seen above.</p><p>Suppose you named the SSH profile “OS-JumpServer” as I did earlier, and your student ID is 22345678, then the <code>scp</code> command may look like this.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Upload a single file</span></span><br><span class="line">scp filename OS<span class="literal">-JumpServer</span>:/<span class="number">22345678</span></span><br><span class="line"><span class="comment"># Upload a folder and its contents</span></span><br><span class="line">scp <span class="literal">-r</span> folder OS<span class="literal">-JumpServer</span>:/<span class="number">22345678</span></span><br></pre></td></tr></table></figure><p>Remember to modify the command depending on your situation.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I guess this is it. Now you can write your code with GUI instead of TUI or CLI. Enjoy. 🫡</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Linux </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attach Visual Studio Code to a Running Container</title>
      <link href="/posts/Attach-Visual-Studio-Code-to-a-Running-Container/"/>
      <url>/posts/Attach-Visual-Studio-Code-to-a-Running-Container/</url>
      
        <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>Visual Studio Code provides developers with unprecedent ability of remote development. In this I’m going to talk about how to attach VSCode to remote server, and remote docker container. For the latter, there might be an extra problem that, by default, VSCode will connect to the container as root, while we may want another profile used. So I’ll cover this also.</p><hr><h1 id="Connecting-To-Remote-Server"><a href="#Connecting-To-Remote-Server" class="headerlink" title="Connecting To Remote Server"></a>Connecting To Remote Server</h1><p>It is most easy to connect to a remote server. Simply click the terminal icon on the bottom left cornet, and choose “Connect to Host”.</p><img src="/posts/Attach-Visual-Studio-Code-to-a-Running-Container/image-20240225163215722.png" alt="image-20240225163215722" style="zoom:50%;"><p>Then, you can choose to add a new SSH host like <code>user@host</code>, or select “Configure SSH Hosts…”, and choose the config under the current user. (Here is the first one with highlight.)</p><p><img src="/posts/Attach-Visual-Studio-Code-to-a-Running-Container/image-20240225163442686.png" alt="image-20240225163442686"></p><p>If you choose to modify the configuration, you should add a new section like this in the <code>config</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host &#123;Display name&#125;</span><br><span class="line">  HostName &#123;Host IP&#125;</span><br><span class="line">  User &#123;Login user&#125;</span><br></pre></td></tr></table></figure><p>Of course, you can use password or SSH key as your favor.</p><hr><h1 id="Attaching-to-a-Running-Container"><a href="#Attaching-to-a-Running-Container" class="headerlink" title="Attaching to a Running Container"></a>Attaching to a Running Container</h1><h2 id="Attaching-by-default"><a href="#Attaching-by-default" class="headerlink" title="Attaching by default"></a>Attaching by default</h2><p>As container will be running on a host machine, we have to connect to the host first. If the container runs on remote machine, just connect to it first, and then do as what you do on local machine.</p><p>First, you need the Docker extension to help you manage all containers.</p><p><img src="/posts/Attach-Visual-Studio-Code-to-a-Running-Container/image-20240225164055129.png" alt="image-20240225164055129"></p><p>After installation, you will see a Docker icon on the activity bar, and you can see all your docker containers and their status in this tab.</p><p><img src="/posts/Attach-Visual-Studio-Code-to-a-Running-Container/image-20240225164357230.png" alt="image-20240225164357230"></p><p>Then, you can just right click on any running container, and select “Attach Visual Studio Code”, and there you go.</p><p><img src="/posts/Attach-Visual-Studio-Code-to-a-Running-Container/image-20240225164536500.png" alt="image-20240225164536500"></p><p>By this, you will log in to the docker with default root user.</p><h2 id="Customized-Attaching"><a href="#Customized-Attaching" class="headerlink" title="Customized Attaching"></a>Customized Attaching</h2><p>However, if you want to attach to a specific container with users other than root, you need one more step. After attaching to the container, press “F1”, then enter “Dev Containers: Open Named Container Configuration File”.</p><div class="note info flat"><p>This command can only be found in VSCode opened in a container.</p></div><div class="note success flat"><p>Don’t know how to create a new user? See <a href="/posts/Create-sudo-enabled-User-on-Linux/">Create Sudo-Enabled User on Linux</a>. 😉</p></div><p>In the opened configuration file, you can add these minimal options. You can choose where to start up by changing <code>workspaceFolder</code>, and login as <code>remoteUser</code>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Default path to open when attaching to a new container.</span></span><br><span class="line">    <span class="attr">&quot;workspaceFolder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/path/to/workspace&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Set *default* container specific settings.json values on container create.</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terminal.integrated.defaultProfile.linux&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bash&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="comment">// Container user VS Code should use when connecting</span></span><br><span class="line">    <span class="attr">&quot;remoteUser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;username&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><div class="note info flat"><p>For more information on this configuration file, see <a href="https://code.visualstudio.com/docs/devcontainers/attach-container#_attached-container-configuration-reference">Attach to a running container</a>.</p></div><div class="note warning flat"><p>For running container, you should add named configuration file for the container, not <code>devcontainer.json</code> in the host. And you should change <code>remoteUser</code> instead of <code>containerUser</code>.</p></div><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I guess this is it. Good luck! 🫡</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Docker </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create Sudo-Enabled User on Linux</title>
      <link href="/posts/Create-sudo-enabled-User-on-Linux/"/>
      <url>/posts/Create-sudo-enabled-User-on-Linux/</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>The main idea of this post comes from here: <a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-new-sudo-enabled-user-on-ubuntu-20-04-quickstart">How To Create a New Sudo-enabled User on Ubuntu 20.04 [Quickstart]</a>. You can go there for other versions and distributions.</p></div><h1 id="How-to"><a href="#How-to" class="headerlink" title="How to?"></a>How to?</h1><h2 id="Step-1-Adding-new-user"><a href="#Step-1-Adding-new-user" class="headerlink" title="Step 1. Adding new user"></a>Step 1. Adding new user</h2><p>First, we should add a new user to our system <code>adduser</code>, with basic configurations. You should replace “tony” with your username.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># adduser tony</span><br><span class="line">Adding user `tony&#x27; ...</span><br><span class="line">Adding new group `tony&#x27; (1000) ...</span><br><span class="line">Adding new user `tony&#x27; (1000) with group `tony&#x27; ...</span><br><span class="line">Creating home directory `/home/tony&#x27; ...</span><br><span class="line">Copying files from `/etc/skel&#x27; ...</span><br></pre></td></tr></table></figure><p> It will immediately prompt you to set password for this user.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">New password:</span><br><span class="line">Retype new password:</span><br></pre></td></tr></table></figure><p>Following is some extra information, which may not make sense. So just press Enter to leave them by default.</p><h2 id="Step-2-Add-the-user-to-sudo-group"><a href="#Step-2-Add-the-user-to-sudo-group" class="headerlink" title="Step 2. Add the user to sudo group"></a>Step 2. Add the user to <code>sudo</code> group</h2><p>Now that we have the new user, add it to <code>sudo</code> group using <code>usermod</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># usermod -aG sudo tony</span><br></pre></td></tr></table></figure><p>This is it, then you should be able to use <code>sudo</code> as tony.</p><h2 id="Step-3-Verify-sudoaccess"><a href="#Step-3-Verify-sudoaccess" class="headerlink" title="Step 3. Verify sudoaccess"></a>Step 3. Verify <code>sudo</code>access</h2><p>Change to the user using <code>su tony</code> or login to the user using <code>login tony</code>, and try to run a command with <code>sudo</code>. For example, <code>sudo apt update</code>. If it prompts you to enter the password, then everything works well.</p><p>However, there is possibility that you may encounter this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: sudo: command not found</span><br></pre></td></tr></table></figure><p>It may happen when you’re in a docker image, which do not have <code>sudo</code> command by default. So you should install it as root.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt install sudo</span><br></pre></td></tr></table></figure><p>After installation, the problem will be no more.</p><h2 id="Step-4-sudo-without-password-optional"><a href="#Step-4-sudo-without-password-optional" class="headerlink" title="Step 4. sudo without password (optional)"></a>Step 4. <code>sudo</code> without password (optional)</h2><p>Sometimes you may use <code>sudo</code> in automation scripts, where user input is not available. This case, you may need to allow <code>sudo</code> execution without password. To achieve this,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure><p>If you’re using Ubuntu, then the default editor is probably nano. Go to the bottom of the file, and add this line. Replace “tony” to your username.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tony   ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>Then, hit <code>Ctrl + X</code>, <code>Y</code>,  then <code>Enter</code> to save and quit. Now, <code>sudo</code> will no longer prompt password.</p><hr><h1 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h1><p>Now that we have the user, how can we login as the new user, instead of root by default?</p><p>For SSH connection, we can simply change the username and password for the server IP. If you are using docker, things would be a little more tricky. For example, if you have a container called “tony-container”, in which you added a user called “tony”, then you can use this command below to run the bash in it with this profile in its home directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it --user tony -w /home/tony tony-container bash</span><br></pre></td></tr></table></figure><p>If you care about highlighting, here is a example <code>.bashrc</code> file. Copy it, or override options respectively in yours. One thing to notice is that, in a docker container, <code>TERM</code> variable may not be set. You can either set it in <code>docker exec</code> using <code>-e TERM=xterm-256color</code> or add <code>export TERM=xterm-256color</code> in <code>.bashrc</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.bashrc: executed by bash(1) for non-login shells.</span></span><br><span class="line"><span class="comment"># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</span></span><br><span class="line"><span class="comment"># for examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If not running interactively, don&#x27;t do anything</span></span><br><span class="line"><span class="keyword">case</span> $- <span class="keyword">in</span></span><br><span class="line">    *i*) ;;</span><br><span class="line">      *) <span class="built_in">return</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># don&#x27;t put duplicate lines or lines starting with space in the history.</span></span><br><span class="line"><span class="comment"># See bash(1) for more options</span></span><br><span class="line">HISTCONTROL=ignoreboth</span><br><span class="line"></span><br><span class="line"><span class="comment"># append to the history file, don&#x27;t overwrite it</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"></span><br><span class="line"><span class="comment"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span></span><br><span class="line">HISTSIZE=1000</span><br><span class="line">HISTFILESIZE=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the window size after each command and, if necessary,</span></span><br><span class="line"><span class="comment"># update the values of LINES and COLUMNS.</span></span><br><span class="line"><span class="built_in">shopt</span> -s checkwinsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># If set, the pattern &quot;**&quot; used in a pathname expansion context will</span></span><br><span class="line"><span class="comment"># match all files and zero or more directories and subdirectories.</span></span><br><span class="line"><span class="comment">#shopt -s globstar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make less more friendly for non-text input files, see lesspipe(1)</span></span><br><span class="line">[ -x /usr/bin/lesspipe ] &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(SHELL=/bin/sh lesspipe)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set variable identifying the chroot you work in (used in the prompt below)</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;debian_chroot:-&#125;</span>&quot;</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="keyword">then</span></span><br><span class="line">    debian_chroot=$(<span class="built_in">cat</span> /etc/debian_chroot)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    xterm-color|*-256color) color_prompt=<span class="built_in">yes</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span></span><br><span class="line"><span class="comment"># off by default to not distract the user: the focus in a terminal window</span></span><br><span class="line"><span class="comment"># should be on the output of commands, not on the prompt</span></span><br><span class="line"><span class="comment">#force_color_prompt=yes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$force_color_prompt</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span></span><br><span class="line">        <span class="comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span></span><br><span class="line">        <span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line">        color_prompt=<span class="built_in">yes</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        color_prompt=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$color_prompt</span>&quot;</span> = <span class="built_in">yes</span> ]; <span class="keyword">then</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> color_prompt force_color_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># If this is an xterm set the title to user@host:dir</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">xterm*|rxvt*)</span><br><span class="line">    PS1=<span class="string">&quot;\[\e]0;<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h: \w\a\]<span class="variable">$PS1</span>&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable color support of ls and also add handy aliases</span></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b)</span>&quot;</span></span><br><span class="line">    <span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias dir=&#x27;dir --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias vdir=&#x27;vdir --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># colored GCC warnings and errors</span></span><br><span class="line"><span class="comment">#export GCC_COLORS=&#x27;error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># some more ls aliases</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an &quot;alert&quot; alias for long running commands.  Use like so:</span></span><br><span class="line"><span class="comment">#   sleep 10; alert</span></span><br><span class="line"><span class="built_in">alias</span> alert=<span class="string">&#x27;notify-send --urgency=low -i &quot;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&quot; &quot;$(history|tail -n1|sed -e &#x27;</span>\&#x27;<span class="string">&#x27;s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//&#x27;</span>\&#x27;<span class="string">&#x27;)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias definitions.</span></span><br><span class="line"><span class="comment"># You may want to put all your additions into a separate file like</span></span><br><span class="line"><span class="comment"># ~/.bash_aliases, instead of adding them here directly.</span></span><br><span class="line"><span class="comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable programmable completion features (you don&#x27;t need to enable</span></span><br><span class="line"><span class="comment"># this, if it&#x27;s already enabled in /etc/bash.bashrc and /etc/profile</span></span><br><span class="line"><span class="comment"># sources /etc/bash.bashrc).</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line">  <span class="keyword">elif</span> [ -f /etc/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows File Explorer Performance Issue With PDF</title>
      <link href="/posts/Windows-File-Explorer-Performance-Issue-with-PDF/"/>
      <url>/posts/Windows-File-Explorer-Performance-Issue-with-PDF/</url>
      
        <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>Whether you are a Windows 10 or Windows 11 user, you will notice the loading bar of File Explorer. It should complete real soon when you open a folder. However, sometimes it may take really long to finish loading, which is quite annoying.</p><p>After some observation on the behavior of File Explorer, it seems that this issue is common for folders that contains PDF files. More precisely, it got huge performance latency when renaming or deleting a PDF file.</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>At first I thought it was a bug of Windows File  Explorer, but it cannot explain why only PDF files are affected. So, the lemon goes directly to Adobe Acrobat, my PDF viewer and editor.</p><p>Adobe Acrobat is a good software, but… it always inject unnecessary functions into other programs, such as PDF utilities for Microsoft Word, and here, thumbnail preview in Windows File Explorer. Just uncheck it, and this problem will possibly be solved.</p><img src="/posts/Windows-File-Explorer-Performance-Issue-with-PDF/image-20240115213536703.png" alt="image-20240115213536703" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Troubleshoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Empower ASP.NET Core With Elasticsearch</title>
      <link href="/posts/Empower-ASP-NET-Core-with-Elasticsearch/"/>
      <url>/posts/Empower-ASP-NET-Core-with-Elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Well, in previous posts, we’ve <a href="/posts/Setup-Elasticsearch-with-Kibana">Setup Elasticsearch with Kibana</a>, and enabled our project to <a href="/posts/Ingest-Data-from-MySQL-to-Elasticsearch">Ingest Data from MySQL to Elasticsearch</a>. In this article, of course, we are going to answer the question on how to use Elasticsearch in our application, which is an ASP.NET Core Web API project. To be specific, we’re using .NET 8. 🤩</p><p>If you want to run your application on Linux, and have no idea how to do it, see <a href="/posts/Cross-platform-Development-with-NET-Core">Cross-platform Development with .NET Core</a>.</p><hr><h1 id="1-Setup-the-Project"><a href="#1-Setup-the-Project" class="headerlink" title="1. Setup the Project"></a>1. Setup the Project</h1><p>We’ll use the project structure in <a href="/posts/Thoughts-on-Basic-Structure-of-ASP-NET">Thoughts on Basic Structure of ASP.NET Core Web API</a>. Although Minified API is introduced in ASP.NET Core, I still prefer using <code>Startup.cs</code>. Maybe I’ll make some changes later. 🫠</p><h2 id="1-1-Install-NuGet-Package"><a href="#1-1-Install-NuGet-Package" class="headerlink" title="1.1 Install NuGet Package"></a>1.1 Install NuGet Package</h2><p>To use Elasticsearch in ASP.NET Core, we need the <a href="https://github.com/elastic/elasticsearch-net">NEST</a> NuGet package.</p><img src="/posts/Empower-ASP-NET-Core-with-Elasticsearch/image-20231214231900101.png" alt="image-20231214231900101" style="zoom:50%;"><h2 id="1-2-Add-Dependency-Injection"><a href="#1-2-Add-Dependency-Injection" class="headerlink" title="1.2 Add Dependency Injection"></a>1.2 Add Dependency Injection</h2><p>First, we need to add an option entry for elastic search. Of course you can hard code it into your project, but this provides you more flexibility.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;ElasticOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;DefaultConnection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:9200&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Then, create a class for it.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ElasticOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> ElasticSection = <span class="string">&quot;ElasticOptions&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DefaultConnection &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally, in <code>Startup.cs</code>, we can write this.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">var</span> elasticOptions = <span class="keyword">new</span> ElasticOptions();</span><br><span class="line">        _configuration.GetRequiredSection(ElasticOptions.ElasticSection).Bind(elasticOptions);</span><br><span class="line">        <span class="keyword">var</span> pool = <span class="keyword">new</span> SingleNodeConnectionPool(<span class="keyword">new</span> Uri(elasticOptions.DefaultConnection));</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> ElasticClient(<span class="keyword">new</span> ConnectionSettings(pool));</span><br><span class="line">        services.AddSingleton&lt;IElasticClient&gt;(client);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, you are ready to use Elasticsearch.</p><h2 id="1-3-Connection-Settings"><a href="#1-3-Connection-Settings" class="headerlink" title="1.3 Connection Settings"></a>1.3 Connection Settings</h2><h3 id="1-3-1-Basic-Authentication"><a href="#1-3-1-Basic-Authentication" class="headerlink" title="1.3.1 Basic Authentication"></a>1.3.1 Basic Authentication</h3><p>Now that we learnt the basic configuration of Elasticsearch connection, let’s look at it a step further.</p><p>If you configured basic authentication for Elasticsearch, you then need username and password to communicate with Elasticsearch API. So let’s add some more fields in configuration file.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;ElasticOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;DefaultConnection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:9200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EnableBasicAuth&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your username&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your password&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Correspondingly, we have to change our option class.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ElasticOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> ElasticSection = <span class="string">&quot;ElasticOptions&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> DefaultConnection &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> EnableBasicAuth &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At last, in <code>Startup.cs</code>, if we enable basic authentication, add username and password to connection settings.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">ConnectionSettings settings = <span class="keyword">new</span> ConnectionSettings(pool)</span><br><span class="line"><span class="keyword">if</span> (elasticOptions.EnableBasicAuth)</span><br><span class="line">&#123;</span><br><span class="line">    settings.BasicAuthentication(elasticOptions.Username, elasticOptions.Password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> ElasticClient(settings);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-Some-More-Options"><a href="#1-3-2-Some-More-Options" class="headerlink" title="1.3.2 Some More Options"></a>1.3.2 Some More Options</h3><p>Later, if you run into mysterious errors with Elasticsearch connection, calm down. It may not be your fault, but improperly configured options.</p><p>First of all, if you’re using an older version of Elasticsearch client (e.g. 7.x), but deployed the latest version (e.g. 8.x) on your server, you should better enable API versioning header.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">settings.EnableApiVersioningHeader();</span><br></pre></td></tr></table></figure><p>The other one may be tricky, as you may not encounter in most cases. However, if it ever occurs, there’s few answer on the Internet.</p><p>This happens, if you concurrently send multiple requests with one Elasticsearch client instance, this error will be thrown. The solution is to enable pipelining, and disable direct streaming.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">settings.EnableHttpPipelining()</span><br><span class="line">    .DisableDirectStreaming();</span><br></pre></td></tr></table></figure><p>Also, use <code>IsValid</code> to check if the response is successful or not. Don’t use other flags.</p><hr><h1 id="2-Index-Document"><a href="#2-Index-Document" class="headerlink" title="2. Index Document"></a>2. Index Document</h1><p>Although we’ve learnt how to ingest data from MySQL to Elasticsearch, in which there’s no need to manually index data into Elasticsearch, sometimes we may not need MySQL and have to put data directly into Elasticsearch.</p><h2 id="2-1-Creating-Models-for-Elasticsearch"><a href="#2-1-Creating-Models-for-Elasticsearch" class="headerlink" title="2.1 Creating Models for Elasticsearch"></a>2.1 Creating Models for Elasticsearch</h2><p>Well, emm… let’s put it simple. (<del>Not because I don’t know how.</del>) For our document, it is actually an C# Object view of a JSON object. NEST will serialize and deserialize between this model and JSON it uses in RESTful API. So just a simple object. And I think it is not a good idea for nested objects. (Or I’m missing something.)</p><div class="note warning flat"><p>Just keep this model simple. If you use <a href="https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members">expression-bodied members</a>, NEST will also include it, even if you don’t want it appear in your index.</p></div><p>So, a proper model should look like this. Well, fields like <code>int</code> and <code>DateTime</code> are acceptable.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ElasticModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime Updated &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you really want add some other fields into your model, use Elasticsearch attributes, e.g. <code>[Ignore]</code> to tell NEST which fields are not for indexing.</p><h2 id="2-1-Index-A-Single-Model"><a href="#2-1-Index-A-Single-Model" class="headerlink" title="2.1 Index A Single Model"></a>2.1 Index A Single Model</h2><p>Assume that we inject <code>IElasticClient</code> to our services as <code>_client</code>. Then we can simply index a model with <code>Index</code> or its async brother. It is preferred to set the index name manually if you have multiple indices. The ID is not required, as Elasticsearch can create it for you automatically.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> _client.IndexAsync&lt;ElasticModel&gt;(model, op =&gt; op</span><br><span class="line">    .Index(type)</span><br><span class="line">    .Id(model.Id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>You don’t need to create the index first, as Elasticsearch will automatically create it if the index does not exist before.</p></div><h2 id="2-2-Bulk-Index-Models"><a href="#2-2-Bulk-Index-Models" class="headerlink" title="2.2 Bulk Index Models"></a>2.2 Bulk Index Models</h2><p>For data that comes in large scales, we may need to bulk index them. Luckily, NEST provides us with <code>BulkDescriptor</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bulkDescriptor = <span class="keyword">new</span> BulkDescriptor();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> model <span class="keyword">in</span> models)</span><br><span class="line">&#123;</span><br><span class="line">    bulkDescriptor.Index&lt;ElasticModel&gt;(op =&gt; op</span><br><span class="line">        .Document(model)</span><br><span class="line">        .Id(model.Id)</span><br><span class="line">        .Index(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> _client.BulkAsync(bulkDescriptor);</span><br></pre></td></tr></table></figure><p>Note that the return value of bulk operation is always success, but individual operation may fail.</p><div class="note info flat"><p>To improve the performance of your application in such scenario with heavy indexing or updating tasks, see <a href="/posts/Bulk-Task-Optimization-in-C/">Bulk Task Optimization in C#</a>.</p></div><hr><h1 id="3-Let-the-Search-Begin"><a href="#3-Let-the-Search-Begin" class="headerlink" title="3. Let the Search Begin!"></a>3. Let the Search Begin!</h1><p>NEST provides strongly typed requests and responses for Elasticsearch APIs, so it is quite easy for us to do search stuffs. However, it is more like translating RESTful API to NEST API. So you can refer to the official documentation for searching with RESTful API <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.11/search-search.html">Search API</a>.</p><p>Basically, it is easy to change between these two types of API, but there are some cases when the translation is not that obvious, which are what I’m going to talk about.</p><h2 id="3-1-Basic-Search"><a href="#3-1-Basic-Search" class="headerlink" title="3.1 Basic Search"></a>3.1 Basic Search</h2><h3 id="3-1-1-Search-with-ID"><a href="#3-1-1-Search-with-ID" class="headerlink" title="3.1.1 Search with ID"></a>3.1.1 Search with ID</h3><p>First of all, you should inject <code>IElasticClient</code> to your service. Suppose it is called <code>_client</code>.</p><p>Let’s start with searching by ID. In any search, we should specify which index we’re going to search. As ID is fixed, there’s no need for partial or even fuzzy match, we just need to use <code>Term</code> query, which will not analyze words.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List&lt;ElasticModel&gt;&gt; GetModelsById(IEnumerable&lt;<span class="built_in">string</span>&gt; ids)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">var</span> container = <span class="keyword">new</span> QueryContainer();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> id <span class="keyword">in</span> ids)</span><br><span class="line">    &#123;</span><br><span class="line">        container |= <span class="keyword">new</span> QueryContainerDescriptor&lt;ElasticModel&gt;()</span><br><span class="line">            .Term(m =&gt; m.Field(f =&gt; f.Id).Value(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ISearchResponse&lt;ElasticModel&gt; response = <span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">        .Index(<span class="string">&quot;demo&quot;</span>).Query(q =&gt; q.Bool(b =&gt; b.Should(container))));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.IsValid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SearchException(response.DebugInformation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response.Documents.ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, we use <code>Documents</code> in <code>response</code>. Astute readers will note that in RESTful API, the results are in hits, and NEST does provide <code>response.Hits</code> field for all hit results. So what’s the difference?</p><p>To put it simple, elements in <code>Hits</code> represents the hits list in RESTful response, which include extra fields, like <code>Score</code>. However, <code>Documents</code> only contain <code>_source</code> filed.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hits<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;works&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12346&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12346</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Design Pattern&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GoF patterns&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updated&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-11-18T14:14:06&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2-Search-with-many-conditions"><a href="#3-1-2-Search-with-many-conditions" class="headerlink" title="3.1.2 Search with  many conditions"></a>3.1.2 Search with  many conditions</h3><p>Here, we get all models whose ID is in a given list. In this case, a better solution is to build a query container, and add all id matches as single queries. So here is how it works. It is actually a logic query, see <a href="#3-5-Logic-Operator">Logic Operator</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;List&lt;ElasticModel&gt;&gt; GetModelsById(IEnumerable&lt;<span class="built_in">string</span>&gt; words)</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">var</span> container = <span class="keyword">new</span> QueryContainer();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">string</span> id <span class="keyword">in</span> ids)</span><br><span class="line">    &#123;</span><br><span class="line">        container |= <span class="keyword">new</span> QueryContainerDescriptor&lt;ElasticModel&gt;()</span><br><span class="line">            .Term(m =&gt; m.Field(f =&gt; f.Name).Value(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ISearchResponse&lt;ElasticModel&gt; response = <span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">        .Index(<span class="string">&quot;demo&quot;</span>).Query(q =&gt; q.Bool(b =&gt; b.Should(container))));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.IsValid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SearchException(response.DebugInformation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response.Documents.ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s a little tricky that <code>QueryContainer</code> uses operator overload to achieve “OR” or “AND” operation, instead of a method.</p><div class="note success flat"><p>In order to expose high level API, NEST seems to use many “descriptors” when constructing requests.</p></div><h2 id="3-2-Fuzzy-Match"><a href="#3-2-Fuzzy-Match" class="headerlink" title="3.2 Fuzzy Match"></a>3.2 Fuzzy Match</h2><p>One of Elasticsearch’s advantages is that it supports fuzzy search. To use fuzzy search, you should use <code>Match</code> query instead of <code>Term</code>, and set fuzziness manually. Here the fuzziness is defined as Levenshtein Edit distance (or number of edits). Supported distances are 0, 1, 2.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">            .Index(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">            .Query(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Description)</span><br><span class="line">                .Query(<span class="string">&quot;algorihm&quot;</span>).Fuzziness(Fuzziness.EditDistance(<span class="number">1</span>)))));</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Get use to <code>))))...)</code> with NEST. 🤭</p></div><h2 id="3-3-Pagination"><a href="#3-3-Pagination" class="headerlink" title="3.3 Pagination"></a>3.3 Pagination</h2><p>Of course, Elasticsearch supports pagination, but with <code>from</code> and <code>size</code>. It is easy to convert page and page size to from and size. Here, we assume that page starts from 0.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">            .Index(<span class="string">&quot;index name&quot;</span>)</span><br><span class="line">            .From(page * pageSize)</span><br><span class="line">            .Size(pageSize)</span><br><span class="line">            <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><div class="note danger flat"><p>You shouldn’t use pagination to iterate through all data! By default, Elasticsearch allow maximum 10000 records to be returned, which means <code>from</code> + <code>size</code> should less than 10000. To do this, use <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/scroll-api.html">Scroll API</a> instead.</p></div><h2 id="3-4-Sorting"><a href="#3-4-Sorting" class="headerlink" title="3.4 Sorting"></a>3.4 Sorting</h2><p>Well, sorting is relatively simpler. Just specify the field and order in search.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">            .Index(<span class="string">&quot;index name&quot;</span>)</span><br><span class="line">            .From(page * pageSize)</span><br><span class="line">            .Size(pageSize)</span><br><span class="line">            .Sort(m =&gt; m.Field(f =&gt; f.Updated, SortOrder.Descending))</span><br><span class="line">            .Query(<span class="comment">/* ... */</span>);</span><br></pre></td></tr></table></figure><h2 id="3-5-Logic-Operator"><a href="#3-5-Logic-Operator" class="headerlink" title="3.5 Logic Operator"></a>3.5 Logic Operator</h2><p>Elasticsearch support logic AND, OR and NOT in query. To do this, we only need a bool query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">    .Index(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">    .From(dto.Page * dto.PageSize)</span><br><span class="line">    .Size(dto.PageSize)</span><br><span class="line">    .Query(q =&gt; q.Bool(b =&gt; b</span><br><span class="line">        .Must(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Name).Query(<span class="string">&quot;hello&quot;</span>)))</span><br><span class="line">        .Should(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Name).Query(<span class="string">&quot;there&quot;</span>)))</span><br><span class="line">        .MustNot(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Name).Query(<span class="string">&quot;General&quot;</span>)))));</span><br></pre></td></tr></table></figure><p><code>Must</code> is AND, <code>Should</code> is OR, and <code>MustNot</code> is NOT.</p><hr><h1 id="Appendix-Some-Tricks"><a href="#Appendix-Some-Tricks" class="headerlink" title="Appendix: Some Tricks"></a>Appendix: Some Tricks</h1><h2 id="A-Dynamic-Field"><a href="#A-Dynamic-Field" class="headerlink" title="A. Dynamic Field"></a>A. Dynamic Field</h2><p>For common queries, flexibility may be the biggest concern. For example, we may need to dynamically change the field we want to search based on the request parameter. So here is how we change field based on query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Expression&lt;Func&lt;ElasticModel, <span class="built_in">string</span>&gt;&gt;? GetField(<span class="built_in">string</span> field)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> field <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span> =&gt; w =&gt; w.Name,</span><br><span class="line">        <span class="string">&quot;description&quot;</span> =&gt; w =&gt; w.Description,</span><br><span class="line">        _ =&gt; <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We have to return <code>Expression</code> instead of <code>Func</code>, as <code>Func</code> cannot be converted into <code>Expresesion</code> directly. We can only initiate Linq expression with a lambda.</p><p>With this, we can achieve dynamic field in query. You may need to check null before pass it to <code>Field</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q.Match(m =&gt; m.Field(GetField(<span class="string">&quot;name&quot;</span>)).Query(cond.Value))</span><br></pre></td></tr></table></figure><h2 id="B-Complex-Condition"><a href="#B-Complex-Condition" class="headerlink" title="B. Complex Condition"></a>B. Complex Condition</h2><p>When we do logic operations, the condition may not be fixed. So there’s a problem of constructing the bool query. Here is an example of build flexible bool query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BoolQueryDescriptor&lt;ElasticModel&gt; <span class="title">ConstructQueryDescriptor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    BoolQueryDescriptor&lt;ElasticModel&gt; descriptor</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    descriptor = descriptor.Must(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Name).Query(<span class="string">&quot;hello&quot;</span>)));</span><br><span class="line">    descriptor = descriptor.Should(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Name).Query(<span class="string">&quot;there&quot;</span>)));</span><br><span class="line">    descriptor = descriptor.MustNot(q =&gt; q.Match(m =&gt; m.Field(f =&gt; f.Name).Query(<span class="string">&quot;General&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this, you can simply call this function in bool query.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> _client.SearchAsync&lt;ElasticModel&gt;(s =&gt; s</span><br><span class="line">    .Index(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">    .From(dto.Page * dto.PageSize)</span><br><span class="line">    .Size(dto.PageSize)</span><br><span class="line">    .Query(q =&gt; q.Bool(b =&gt; ConstructQueryDescriptor(b)));</span><br></pre></td></tr></table></figure><p>The same goes with other types of queries.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>It is really easy to communicate with Elasticsearch with NEST. The APIs are overall, natural to use and understand. Just so much better than it in Python, which does not have any type at all, thus lacks productivity.</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> ASP.NET Core </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Kibana </tag>
            
            <tag> NEST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bulk Task Optimization in C#</title>
      <link href="/posts/Bulk-Task-Optimization-in-C/"/>
      <url>/posts/Bulk-Task-Optimization-in-C/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;Life is not just the passing of time.</i><br>    <i>Life is the collection of experiences and their intensity.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Jim Rohn</i></p><h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>Recently, I’m doing some data processing works, in which performance is quite a challenge. So, think of it, you have a big data set, separated to many parts, each containing many data entries. (You can take that data is in form of JSON.) You want to analyze them, and finally put them to your database. What is the basic procedure to do this?</p><ul><li>Open the file, read all JSON objects to a list.</li><li>Then process the list of JSON, and convert it to a list of models you want to put into the database.</li><li>At last, use a bulk insert to put them to the database.</li></ul><p>Easy, huh? 😏 But, what if, the size of the data file is count in <strong>GB</strong>, which may contain millions of data entries? 😨 In this case, simply load all data into memory is not feasible. And such large chunk of data may overwhelm relational database. For example, MySQL will likely to crash, causing the whole database unavailable. So, what’s the cure? 🤔</p><p>Fortunately, we are using C#, which provides many approaches to deal with this.</p><div class="note warning flat"><p>This article contains many codes, be prepared. 🫡</p></div><div class="note info flat"><p>You can find the source code at <a href="https://github.com/Lord-Turmoil/Bulk-Task-Optimization">Bulk Task Optimization</a>.</p></div><hr><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>To make it clear, I’ll show you a basic outline of the program. First, is our <code>ITask</code> interface. You know, for test, our data size is much smaller.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ITask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> DataSize = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> DataProcessingTime = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> DataSavingTime = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And, our original task without any optimization. Exactly three steps as we mentioned above. Here I used <code>Sleep</code> to simulate time consuming tasks.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">OriginalTask</span> : <span class="title">ITask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; data = LoadData();</span><br><span class="line">        ProcessData(data);</span><br><span class="line">        SaveData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;<span class="built_in">int</span>&gt; <span class="title">LoadData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; data = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ITask.DataSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            data.Add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessData</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> item <span class="keyword">in</span> data)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(item);</span><br><span class="line">            Console.Write(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            Thread.Sleep(ITask.DataProcessingTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveData</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Saving data...&quot;</span>);</span><br><span class="line">        Thread.Sleep(ITask.DataSavingTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And our benchmark class.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Benchmark</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Measure</span>(<span class="params"><span class="built_in">string</span> name, ITask task</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;----- Benchmarking <span class="subst">&#123;name&#125;</span>...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        task.Run();</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;----- Elapsed time: &#123;0&#125;&quot;</span>, stopwatch.ElapsedMilliseconds.ToString(CultureInfo.InvariantCulture));</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So in our main function, we can simply run and benchmark our task.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Benchmark.Measure(<span class="string">&quot;Original Task&quot;</span>, <span class="keyword">new</span> OriginalTask());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Memory-Optimization"><a href="#Memory-Optimization" class="headerlink" title="Memory Optimization"></a>Memory Optimization</h1><p>So first, let’s deal with memory issues. The problems we’ve encountered can be summarized as follows.</p><ul><li>A data file is too large to be loaded into memory.</li><li>Bulk update size is too large for the database.</li></ul><p>Let’s solve them one by one.</p><h2 id="Load-part-of-the-file"><a href="#Load-part-of-the-file" class="headerlink" title="Load part of the file?"></a>Load part of the file?</h2><p>In traditional C or C++, you can hardly think of a way to achieve this with minimal effort. Of course you can, just similar to <code>fgets</code> or else, but may not be that graceful. However, in C#, the dream comes true with <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/yield"><code>yield</code> statement</a>.</p><p>All you need is to replace this <code>int</code> generator with a file reader. So in this way, we reduced our memory use in loading data.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">LoadPartTask</span> : <span class="title">ITask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; data = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">AllData</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            data.Add(ProcessData(item));</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">        SaveData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">AllData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ITask.DataSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">ProcessData</span>(<span class="params"><span class="built_in">int</span> item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(item);</span><br><span class="line">        Console.Write(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        Thread.Sleep(ITask.DataProcessingTime);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveData</span>(<span class="params">List&lt;<span class="built_in">int</span>&gt; data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Saving data...&quot;</span>);</span><br><span class="line">        Thread.Sleep(ITask.DataSavingTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Split-up-bulk-update"><a href="#Split-up-bulk-update" class="headerlink" title="Split up bulk update?"></a>Split up bulk update?</h2><p>Well, this is simple, just split the data chunk. It differs with <code>LoadPartTask</code> only in <code>Run()</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">SplitBulkTask</span> : <span class="title">ITask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; data = [];</span><br><span class="line">        <span class="built_in">int</span> bulkSize = <span class="number">5</span>;</span><br><span class="line">        <span class="built_in">int</span> currentSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">AllData</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            data.Add(ProcessData(item));</span><br><span class="line">            currentSize++;</span><br><span class="line">            <span class="keyword">if</span> (currentSize == bulkSize)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">                SaveData(data);</span><br><span class="line">                data = [];</span><br><span class="line">                currentSize = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentSize &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            SaveData(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The size of bulk chunk is uncertain. It depends on your computer’s performance, the network threshold, and so on. You may need to adjust it based on the actual performance.</p><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>If you run benchmark on these three, you can see how they behave. However, elapsed time means nothing as our goal here is not for speed.</p><p><img src="/posts/Bulk-Task-Optimization-in-C/image-20231216112435426.png" alt="image-20231216112435426"></p><hr><h1 id="Speed-Optimization"><a href="#Speed-Optimization" class="headerlink" title="Speed Optimization"></a>Speed Optimization</h1><h2 id="Using-async"><a href="#Using-async" class="headerlink" title="Using async"></a>Using <code>async</code></h2><p>Asynchronization is vital for speed optimization, so here we modify our <code>ITask</code> to support <code>async</code>. As we’ve already solved the memory problems, here we omit the process of creating bulk chunk, taking them as a whole.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IAsyncTask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> BulkCount = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> BulkProcessingTime = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> BulkSavingTime = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Task <span class="title">Run</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, for our Benchmark, we need add an overload.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Measure</span>(<span class="params"><span class="built_in">string</span> name, IAsyncTask task</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;----- Benchmarking <span class="subst">&#123;name&#125;</span>...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Stopwatch stopwatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">    stopwatch.Start();</span><br><span class="line">    task.Run().Wait();</span><br><span class="line">    stopwatch.Stop();</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;----- Elapsed time: &#123;0&#125;&quot;</span>, stopwatch.ElapsedMilliseconds.ToString(CultureInfo.InvariantCulture));</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Basic-async-task"><a href="#Basic-async-task" class="headerlink" title="Basic async task"></a>Basic async task</h2><p>Below is a preliminary version of your async task. We take some time to get bulk chunk, then some other to save the bulk. Later, our improvement will be done in <code>Run()</code> only since other process is memory related, and has been solved earlier.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">BasicTask</span> : <span class="title">IAsyncTask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="built_in">int</span> item <span class="keyword">in</span> <span class="title">AllBulk</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">$&quot;<span class="subst">&#123;item&#125;</span> &quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> SaveBulk(item);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">AllBulk</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; IAsyncTask.BulkCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Thread.Sleep(IAsyncTask.BulkProcessingTime);</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">SaveBulk</span>(<span class="params"><span class="built_in">int</span> bulk</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(IAsyncTask.BulkSavingTime);</span><br><span class="line">        Console.Write(<span class="string">$&quot;<span class="subst">&#123;bulk&#125;</span> &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you run benchmark on it, you’ll see that, <code>async</code> does not work, as tasks are still done synchronized. Why?</p><p><img src="/posts/Bulk-Task-Optimization-in-C/image-20231216131442501.png" alt="image-20231216131442501"></p><p>This problem bothers me quite long, but the answer is quite straightforward. That is, we always <code>await</code> for the result, so that all operations are in a fixed order, which then cannot be paralleled.</p><p>So you may wonder again, in this case, how <code>async</code> works? Well, it does run asynchronized, but, with other threads. Itself still run synchronized.</p><h2 id="Pipeline-tasks"><a href="#Pipeline-tasks" class="headerlink" title="Pipeline tasks"></a>Pipeline tasks</h2><p>So how to make <code>Run()</code> itself run multiple tasks asynchronously? That is, creating more tasks and pipelining them. 😲 The core problem is to identify processes that can be run parallelly, which, in our case, is getting bulk chunk, and saving data.</p><p>Here we create a pipeline with a max capacity of 5. At the beginning, initialize them with <code>CompletedTask</code>, so that the first run will not be blocked. Just remember to wait for all tasks to finish in the end. Other methods remain the same.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">PipelineTask</span> : <span class="title">IAsyncTask</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> MaxPipeline = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Task[] _tasks = <span class="keyword">new</span> Task[MaxPipeline];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; MaxPipeline; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _tasks[i] = Task.CompletedTask;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> currentTask = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="built_in">int</span> item <span class="keyword">in</span> <span class="title">AllBulk</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">$&quot;<span class="subst">&#123;item&#125;</span> &quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> _tasks[currentTask];</span><br><span class="line">            _tasks[currentTask] = SaveBulk(item);</span><br><span class="line">            currentTask = (currentTask + <span class="number">1</span>) % MaxPipeline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Task.WaitAll(_tasks);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This way, when we call <code>SaveBulk</code>, the program will not be blocked. Instead, it only records the task, so that later we can wait for it. If the task already completed when wait for it, it means the pipeline is not busy. In this case, we reached the maximum speed, as the total time we spent is roughly all in <code>AllBulk()</code>. Otherwise, the pipeline is busy, but we can still get some <code>async</code> benefits.</p><h2 id="Benchmark-1"><a href="#Benchmark-1" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>Here is the bench mark between basic async task and pipelined async task. Improvement is obvious.</p><p><img src="/posts/Bulk-Task-Optimization-in-C/image-20231216131435488.png" alt="image-20231216131435488"></p><h2 id="Tuning-pipeline-size"><a href="#Tuning-pipeline-size" class="headerlink" title="Tuning pipeline size"></a>Tuning pipeline size</h2><p>As we just mentioned, the performance largely rely on whether the pipeline is busy or not. So what’s a proper size for pipeline?</p><p>You can adjust pipeline size <code>MaxPipeline</code>, <code>BulkProcessingTime</code> and <code>BulkSavingTime</code> to find out. But in case you do not want to do it personally, I give you the answer. That is, <code>MaxPipeline ≈ BulkSavingTime / BulkProcessingTime</code>. If <code>BulkProcessingTime</code> is greater than <code>BulkSavingTime</code>, size of 2 can do the job. Too many pipeline slots will not improve performance, just a little bit waste of resource.</p><h2 id="Advantages-against-traditional-thread"><a href="#Advantages-against-traditional-thread" class="headerlink" title="Advantages against traditional thread"></a>Advantages against traditional thread</h2><p>Using async method does create threads, but it has some advantages against traditional threading.</p><p>First, it is more flexible. You may already realized it is the classic “Producer - Consumer” model. For the traditional approach, we have to create a fixed number of threads, and using locks to sync them. However, simply using <code>aync/await</code> can dynamically create threads, reducing the number of idle threads. And, it eliminates the use of lock.</p><p>Second, … (<del>idk</del>)</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I think we’re getting better understanding of async task now. 🥳</p><p>Have to say, C# is a good language. But, we always love C++. 🥰</p>]]></content>
      
      
      <categories>
          
          <category> Software Engineering </category>
          
          <category> Best Practices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> C# </tag>
            
            <tag> Concurrency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cross-Platform Development With .NET Core</title>
      <link href="/posts/Cross-platform-Development-with-NET-Core/"/>
      <url>/posts/Cross-platform-Development-with-NET-Core/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p><a href="https://dotnet.microsoft.com/en-us/">.NET Core</a> is a free, open-source and cross-platform framework for building modern apps and powerful cloud services. It is a relatively young framework, but I think it has unlimited potential. Unlike it brother .NET Framework, who can only run on Windows, we can use .NET Core for cross-platform developments, and the first one to come into our mind is probably the Web server.</p><p>In this article, I’m going to talk about how to publish Linux application built with .NET Core.</p><hr><h1 id="1-Get-NET-Environment"><a href="#1-Get-NET-Environment" class="headerlink" title="1. Get .NET Environment"></a>1. Get .NET Environment</h1><p>The ultimate IDE for .NET development is, without doubt, <a href="https://visualstudio.microsoft.com/">Visual Studio</a>! Of course, Rider of JetBrains is also great, so we can install <a href="https://www.jetbrains.com/resharper/">ReSharper</a> as a Visual Studio extension to boost your productivity.</p><p>Visual Studio will take care of .NET SDK and runtime for us on Windows, so all we need is to install .NET runtime on the target machine. Or, you can also choose to bundle the runtime with your application later in the <a href="#2-2-Configure-Publish-Profile">Configure Publish Profile</a>.</p><div class="note info flat"><p>For installation, Microsoft gives good docs: <a href="https://learn.microsoft.com/en-us/dotnet/core/install/">Install .NET on Windows, Linux, and macOS</a>.</p></div><p>Take Ubuntu 20.04 as example. First, you need Microsoft package repository.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span><br><span class="line">sudo dpkg -i packages-microsoft-prod.deb</span><br><span class="line"><span class="built_in">rm</span> packages-microsoft-prod.deb</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Different release may have different version number or commands! Do refer to the official documentation. 🥺</p></div><p>Then, you can use package management to get .NET stuffs. If you simply want to run your application on Linux, there’s no need for .NET SDK. If you want to run ASP.NET Core web application, you also need ASP.NET Core runtime.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install dotnet-sdk-8.0</span><br><span class="line">sudo apt install dotnet-runtime-8.0</span><br><span class="line">sudo apt install aspnetcore-runtime-8.0</span><br></pre></td></tr></table></figure><hr><h1 id="2-Publish-Application-via-FTP"><a href="#2-Publish-Application-via-FTP" class="headerlink" title="2. Publish Application via FTP"></a>2. Publish Application via FTP</h1><p>Visual Studio provides us one-click publish to remote server, but here I’ll only show you how to to this with FTP. So first, you need to <a href="/posts/Setup-FTP-on-Ubuntu/">Setup FTP on Ubuntu</a>. With FTP enabled, we can now add publish profile for our project.</p><h2 id="2-1-Create-Publish-Profile"><a href="#2-1-Create-Publish-Profile" class="headerlink" title="2.1 Create Publish Profile"></a>2.1 Create Publish Profile</h2><p>To create a new publish profile, or publish your application, right click on the solution, and select “Publish…”.</p><p>If you don’t yet has any, create one, and select “FTP&#x2F;FTPS Server”.</p><img src="/posts/Cross-platform-Development-with-NET-Core/image-20231214103850029.png" alt="image-20231214103850029" style="zoom:50%;"><p>Then, you just need to set the IP and credentials of your server. For “Site path”, although starting with <code>/</code>, it is in fact the <strong>relative</strong> path to the FTP root of the user you configured on the server, so don’t write absolute path here.</p><img src="/posts/Cross-platform-Development-with-NET-Core/image-20231214104234319.png" alt="image-20231214104234319" style="zoom:50%;"><div class="note warning flat"><p>“Passive mode” may not work that well. Just uncheck it if something went wrong.</p></div><h2 id="2-2-Configure-Publish-Profile"><a href="#2-2-Configure-Publish-Profile" class="headerlink" title="2.2 Configure Publish Profile"></a>2.2 Configure Publish Profile</h2><p>Click “Show all settings” in the publish profile, so that we can customize our publish properties. Just choose them depends on your project.</p><img src="/posts/Cross-platform-Development-with-NET-Core/image-20231214230221667.png" alt="image-20231214230221667" style="zoom:50%;"><p>One thing to notice is the “Deployment Mode”. If you’ve installed runtime on your remote server, it is better to select “Framework-dependent” to reduce size. Otherwise, you should select “Self-contained” to include the runtime in your application.</p><div class="note warning flat"><p>If you select a specific CPU (e.g. x64), it <strong>must</strong> match the target machine, or publish <strong>will</strong> “succeed”, but nothing will be published.</p></div><p>One small tip for this. In “File Publish Options”, uncheck both options. In most cases there’s no need to create a single file, so uncheck it to reduce compile time. Also, you don’t need to delete existing, or previous files if the output files won’t change. It brings much convenience as you won’t need to use <code>chmod</code> to grant permission for the executable.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, have to say, Visual Studio is awesome, so is .NET. 😆</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> .NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> C# </tag>
            
            <tag> .NET Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ingest Data From MySQL to Elasticsearch</title>
      <link href="/posts/Ingest-Data-from-MySQL-to-Elasticsearch/"/>
      <url>/posts/Ingest-Data-from-MySQL-to-Elasticsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Following <a href="/posts/Setup-Elasticsearch-with-Kibana">Setup Elasticsearch with Kibana</a>, we are going to transfer our data from MySQL to Elasticsearch. As for the mediator, we use Logstash. So, here we go?</p><div class="note info flat"><p>For the official document, see <a href="https://www.elastic.co/guide/en/cloud/current/ec-getting-started-search-use-cases-db-logstash.html">Ingest data from a relational database into Elasticsearch Service</a>.</p></div><p>Here are some useful links that might be of help.</p><ul><li><a href="https://www.elastic.co/guide/en/cloud/current/ec-getting-started-search-use-cases-db-logstash.html">Ingest data from a relational database into Elasticsearch Service</a></li></ul><hr><h1 id="1-Installation"><a href="#1-Installation" class="headerlink" title="1. Installation"></a>1. Installation</h1><h2 id="1-1-JDBC"><a href="#1-1-JDBC" class="headerlink" title="1.1 JDBC"></a>1.1 JDBC</h2><p>JDBC is what connect MySQL and Logstash. So first, go to official download page <a href="https://dev.mysql.com/downloads/connector/j/">Connector&#x2F;J</a> to download a suitable version for you. You may have it downloaded on Windows, then transfer it to your Linux server. Or you can copy the download link and use <code>wget</code>.</p><div class="note info flat"><p>It seems that the latest 8.2.0 version does not support Ubuntu 20.24 anymore, so you can find older version in <a href="https://downloads.mysql.com/archives/c-j/">archives</a>.</p></div><p>Then, use <code>dpkg</code> to install it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i mysql-connector-j_8.0.33-1ubuntu20.04_all.deb</span><br></pre></td></tr></table></figure><p>Now, you should find <code>mysql-connector-java-8.0.33.jar</code> in <code>/usr/share/java/</code>.</p><h2 id="1-2-Logstash"><a href="#1-2-Logstash" class="headerlink" title="1.2 Logstash"></a>1.2 Logstash</h2><p>Still, the same as installation of Elasticsearch. If you’ve already done this, skip it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg</span><br><span class="line">sudo apt install apt-transport-https</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/elastic-8.x.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>Install Logstash.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install logstash</span><br></pre></td></tr></table></figure><p>That’s it. Then, we are going to configure them so that our data can be synced.</p><hr><h1 id="2-Preparing-MySQL-Database"><a href="#2-Preparing-MySQL-Database" class="headerlink" title="2. Preparing MySQL Database"></a>2. Preparing MySQL Database</h1><p>To populate data from MySQL to Elasticsearch with Logstash, there is one requirement for our table. That is, a <code>timestamp</code> field, which is the <code>TrackingTime</code> here.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Works` (</span><br><span class="line">    `Id` <span class="type">char</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `Title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `CitationCount` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    # More fields</span><br><span class="line">    `TrackingTime` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`Id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>This field should always be the latest time, so that Logstash can track the changes made to MySQL.</p><hr><h1 id="3-Setup-Logstash-Pipeline"><a href="#3-Setup-Logstash-Pipeline" class="headerlink" title="3. Setup Logstash Pipeline"></a>3. Setup Logstash Pipeline</h1><p>To digest data from MySQL to Elasticsearch, you have to manually configure how Logstash handle each table.</p><h2 id="3-1-Logstash-Configuration"><a href="#3-1-Logstash-Configuration" class="headerlink" title="3.1 Logstash Configuration"></a>3.1 Logstash Configuration</h2><p>Here is an example <code>logstash.conf</code>, you can place it anywhere you like.</p><details class="toggle"><summary class="toggle-button" style>Logstash Configuration Template</summary><div class="toggle-content"><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    jdbc_driver_library =&gt; <span class="string">&quot;&lt;driverpath&gt;/mysql-connector-java-&lt;versionNumber&gt;.jar&quot;</span></span><br><span class="line">    jdbc_driver_class =&gt; <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    jdbc_connection_string =&gt; <span class="string">&quot;jdbc:mysql://&lt;MySQL host&gt;:3306/&lt;Database name&gt;&quot;</span> </span><br><span class="line">    jdbc_user =&gt; <span class="string">&quot;&lt;MySQL username&gt;&quot;</span> </span><br><span class="line">    jdbc_password =&gt; <span class="string">&quot;&lt;MySQL password&gt;&quot;</span> </span><br><span class="line">    jdbc_paging_enabled =&gt; <span class="literal">true</span></span><br><span class="line">    tracking_column =&gt; <span class="string">&quot;unix_ts_in_secs&quot;</span></span><br><span class="line">    use_column_value =&gt; <span class="literal">true</span></span><br><span class="line">    tracking_column_type =&gt; <span class="string">&quot;numeric&quot;</span></span><br><span class="line">    schedule =&gt; <span class="string">&quot;*/5 * * * * *&quot;</span></span><br><span class="line">    statement =&gt; <span class="string">&quot;SELECT *, UNIX_TIMESTAMP(TrackingTime) AS unix_ts_in_secs FROM es_table WHERE (UNIX_TIMESTAMP(TrackingTime) &gt; :sql_last_value AND TrackingTime &lt; NOW()) ORDER BY TrackingTime ASC&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    copy =&gt; &#123; <span class="string">&quot;id&quot;</span> =&gt; <span class="string">&quot;[@metadata][_id]&quot;</span>&#125;</span><br><span class="line">    remove_field =&gt; [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;@version&quot;</span>, <span class="string">&quot;unix_ts_in_secs&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  stdout &#123; codec =&gt;  <span class="string">&quot;rubydebug&quot;</span>&#125;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [<span class="string">&quot;&lt;Elasticsearch URL&gt;&quot;</span>]</span><br><span class="line">    ssl =&gt; <span class="literal">false</span></span><br><span class="line">    user =&gt; <span class="string">&quot;&lt;Elasticsearch username&gt;&quot;</span></span><br><span class="line">    password =&gt; <span class="string">&quot;&lt;Elasticsearch Password&gt;&quot;</span></span><br><span class="line">    index =&gt; <span class="string">&quot;&lt;Elasticsearch Index&gt;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Modify it depends on your circumstances. And here I’ll explain some properties.</p><p><strong>jdbc_driver_library</strong></p><blockquote><p>It is just the <strong>absolute</strong> path of MySQL connector you’ve downloaded just now. It should look like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/java/mysql-connector-java-8.0.33.jar</span><br></pre></td></tr></table></figure></blockquote><p><strong>jdbc_connection_string</strong></p><blockquote><p>Then in the <code>jdbc_connection_string</code>, just specify the MySQL host and your database name. Table name is set later in SQL statement.</p></blockquote><p><strong>tracking_column, statement</strong></p><blockquote><p><code>tracking_column</code> is the <code>timestamp</code> column you added in MySQL. Here, we made a little wrap to make it name <code>unix_ts_in_secs</code>, but in <code>statement</code>, you should still use <code>TrackingTime</code>.</p></blockquote><p><strong>schedule</strong></p><blockquote><p>It defines the time and frequency Logstash contact MySQL. In this case, Logstash will contact MySQL every 5 seconds. It uses <a href="https://github.com/jmettraux/rufus-scheduler">rufus</a> syntax. Refer to its repository for more information.</p></blockquote><p><strong>filter</strong></p><blockquote><p>This tells Logstash to make some modification to your data before adding it to Elasticsearch. You can copy the MySQL id to Elasticsearch, and remove some unnecessary fields. If you still want to keep <code>id</code>, remove it from <code>remove_field</code>.</p></blockquote><p><strong>output</strong></p><blockquote><p>In output, we should define how we output to Elasticsearch. If you do have SSL, set it to <code>true</code>. (SSL property seems to be deprecated.) Here you need your Elasticsearch credentials. The most important thing is specify the index you want to add it to.</p></blockquote><h2 id="3-2-Logstash-Pipeline"><a href="#3-2-Logstash-Pipeline" class="headerlink" title="3.2 Logstash Pipeline"></a>3.2 Logstash Pipeline</h2><div class="note info flat"><p>See details on this problem here: <a href="https://discuss.elastic.co/t/how-to-setup-multiple-config-file-in-logstash/223059">How to setup multiple config file in logstash</a>. And the official solution for this is here: <a href="https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html">Multiple Pipelines</a>.</p></div><p>By default, Logstash configuration files and pipeline file are located <code>/etc/logstash/conf.d/</code> and <code>/etc/logstash/pipelines.yml</code>. You should put all your configuration files in <code>conf.d</code> and add them to <code>pipelines.yml</code>.</p><div class="note info flat"><p>If you specify any configuration file when you start up Logstash, it will ignore the default <code>pipelines.yml</code>, thus use no configuration files in <code>conf.d</code>.</p></div><p>The pipeline file contains settings for multiple configurations. It is OK in most case, refer to the official documentation for more information.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">path.config:</span> <span class="string">&quot;/etc/logstash/conf.d/main.conf&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">trivia</span></span><br><span class="line">  <span class="attr">path.config:</span> <span class="string">&quot;/etc/logstash/conf.d/trivia.conf&quot;</span></span><br></pre></td></tr></table></figure><p>If you do not want to differ each pipeline, just use the wildcard by default to use all configuration files.</p><hr><h1 id="4-Get-the-Data-Flow"><a href="#4-Get-the-Data-Flow" class="headerlink" title="4. Get the Data Flow!"></a>4. Get the Data Flow!</h1><h2 id="4-1-Run-Logstash"><a href="#4-1-Run-Logstash" class="headerlink" title="4.1 Run Logstash"></a>4.1 Run Logstash</h2><p>After all these steps, we can finally get our data from MySQL. Unlike Elasticsearch or Kibana, Logstash itself is not registered as a service, so you have to keep the session alive, or use tmux.</p><p>If you configured pipeline, which is recommended, go to <code>/usr/share/logstash/bin</code>, and simply run <code>./logstash</code>. Then you’ll see it running, and output the data ingested.</p><p>However, it may not working as expected as it tell you that:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults</span><br></pre></td></tr></table></figure><p>So, in this case, you should explicitly tell Logstash where to find <code>logstash.yml</code>, which, actually does reside in <code>/etc/logstash/</code>. I’ve no idea why it cannot find that. Or you might need root privilege.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./logstash --path.settings /etc/logstash/</span><br></pre></td></tr></table></figure><p>Now, everything should work well.</p><h2 id="4-2-Perform-Queries-in-Kibana"><a href="#4-2-Perform-Queries-in-Kibana" class="headerlink" title="4.2 Perform Queries in Kibana"></a>4.2 Perform Queries in Kibana</h2><p>If you haven’t deployed Kibana yet, please follow the instructions in <a href="/posts/Setup-Elasticsearch-with-Kibana">Setup Elasticsearch with Kibana</a> first.</p><p>In <a href="#3-1-Logstash-Configuration">Logstash Configuration</a>, we specified which index we want Logstash to put into Elasticsearch. So here, we are going to use this index in our query.</p><p>Go to “Management | Dev Tools”, and you’ll see a Elasticsearch query console.</p><img src="/posts/Ingest-Data-from-MySQL-to-Elasticsearch/image-20231211155504527.png" alt="image-20231211155504527" style="zoom: 33%;"><p>In my case, the index name is <code>demo</code>, so I can write the query this way to get at most 20 records. And it works.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET demo/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>The syntax of the syntax of Elasticsearch is not intended to be included in this post, you can refer to other great articles for that. Or you can simply use their language bindings. 😉</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>So, this is it, we did it! 🥳 Now we can sync our data from MySQL to Elasticsearch. Hopefully, there will be other posts about how to use Elasticsearch in ASP.NET Core. Coming soon. 🤤</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Elasticsearch With Kibana</title>
      <link href="/posts/Setup-Elasticsearch-with-Kibana/"/>
      <url>/posts/Setup-Elasticsearch-with-Kibana/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Recently, I got to index huge amount of data, and Elasticsearch seems to be the best choice for me. It involves many problems, such as how to populate data from relational database, such as MySQL to Elasticsearch. So as the first one in this series, I’ll show you how to set up Elasticsearch, and monitor it with Kibana on a Ubuntu server.</p><div class="note primary flat"><p>Here is a great video, and I learnt much from him: <a href="https://www.youtube.com/watch?v=HOmq3STxAKg">Install Elasticsearch + Kibana 8.x with TLS&#x2F;SSL</a>. Much thanks! 😊</p></div><hr><h1 id="1-Setup-Elasticsearch"><a href="#1-Setup-Elasticsearch" class="headerlink" title="1. Setup Elasticsearch"></a>1. Setup Elasticsearch</h1><div class="note info flat"><p>You can find the official document for the current version of Elasticsearch here: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch Guide</a>.</p></div><p>Here we use the latest version, which by the time I’m writing, is 8.11.</p><h2 id="1-1-Installation"><a href="#1-1-Installation" class="headerlink" title="1.1 Installation"></a>1.1 Installation</h2><p>And I think it is easier to install it via package management <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html">Install Elasticsearch with Debian Package</a>.</p><p>Just copy these to a bash file and run it. 😉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg</span><br><span class="line">sudo apt install apt-transport-https</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/elastic-8.x.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>With prerequisite met, you can simply run <code>apt install</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install elasticsearch</span><br></pre></td></tr></table></figure><p>Notice that, upon installation, Elasticsearch will output the so-called “Security autoconfiguration information”, which contains an auto-generated superuser. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The generated password for the elastic built-in superuser is : 3*******************O</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Make sure you find this and remember the password. Later in Kibana, you should use this as login.</p></div><h2 id="1-2-Configuring"><a href="#1-2-Configuring" class="headerlink" title="1.2 Configuring"></a>1.2 Configuring</h2><p>After installation, there’s few thing we might need to configure, rather than using the default value.</p><p>Open <code>/etc/elasticsearch/elasticsearch.yml</code>, and you may need root privilege.</p><p>First, you can manually set your cluster’s name.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">Beyond-Master</span></span><br></pre></td></tr></table></figure><p>Then, is the network host and port. By default Elasticsearch can only be accessed by localhost, set it to 0.0.0.0 to allow any. You can also change the default port for Elasticsearch.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>Exposing Elasticsearch on the Internet can be dangerous! You can set it to the private network IP address instead, so we can later use Kibana to access it.</p></div><p>If you are not ready to use SSL, go to the last section in YAML, and set all <code>xpack</code> properties from <code>true</code> to <code>false</code>. However, minimal security is <strong>strongly</strong> recommended. Otherwise, everyone can access you Elasticsearch API, which is very dangerous. To make it clear, you should set <code>xpack.security.enabled</code> and <code>xpack.security.transport.ssl.enabled</code> to <code>true</code>, and leave everything else as they were.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable security features</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">xpack.security.enrollment.enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span></span><br><span class="line"><span class="attr">xpack.security.http.ssl:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">keystore.path:</span> <span class="string">certs/http.p12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable encryption and mutual authentication between cluster nodes</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">verification_mode:</span> <span class="string">certificate</span></span><br><span class="line">  <span class="attr">keystore.path:</span> <span class="string">certs/transport.p12</span></span><br><span class="line">  <span class="attr">truststore.path:</span> <span class="string">certs/transport.p12</span></span><br></pre></td></tr></table></figure><h2 id="1-3-Change-Default-Password"><a href="#1-3-Change-Default-Password" class="headerlink" title="1.3 Change Default Password"></a>1.3 Change Default Password</h2><p>Now, we have to provide basic authentication (username and password) when we connect. The default password is what you get in <a href="#1-1-Installation">Installation</a>, which may be hard to remember, so we’re going to change it.</p><p>Go to <code>/usr/share/elasticsearch/</code>, where you can find a bunch of tools coming along with Elasticsearch. Add <code>-i</code> to to this interactively.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch-reset-password -i -u elastic</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>If you disabled password by setting all <code>xpack</code> properties false, then reset password will be unavailable, and you’ll get an exit code 75.</p></div><div class="note info flat"><p>If you change authentication mode of Elasticsearch, you should restart both Elasticsearch and Kibana.</p></div><h2 id="1-4-Run-Elasticsearch-Service"><a href="#1-4-Run-Elasticsearch-Service" class="headerlink" title="1.4 Run Elasticsearch Service"></a>1.4 Run Elasticsearch Service</h2><p>You may already noticed that Elasticsearch provides you the command to run it after installation. Here is it, you can optionally configure it to start automatically.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make Elasticsearch start automatically</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> elasticsearch.service</span><br><span class="line"><span class="comment"># start Elasticsearch service</span></span><br><span class="line">sudo systemctl start elasticsearch.service</span><br><span class="line"><span class="comment"># check Elasticsearch service status</span></span><br><span class="line">sudo systemctl status elasticsearch.service</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Since you start Elasticsearch as a service, you don’t need to run it in <code>tmux</code>.</p></div><p>Now, you can check the connectivity of Elasticsearch.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v elastic http://localhost:9200</span><br></pre></td></tr></table></figure><p>If you set <code>network.host</code> to private IP, you can run the command on other server in your private network.</p><p>One more thing, if you use <code>ufw</code>, please ensure that port 9200 is allowed by the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 9200/tcp</span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p>Now, you should have your Elasticsearch operational. 😆</p><h2 id="1-5-Service-Account"><a href="#1-5-Service-Account" class="headerlink" title="1.5 Service Account"></a>1.5 Service Account</h2><p>Later, when we use Kibana to connect Elasticsearch, it is recommended to use a service account. Here, we are going to create an <code>elastic/kibana</code> service account.</p><div class="note info flat"><p>For more information on service account, see <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/service-accounts.html">Service accounts</a>.</p></div><p>Go to <code>/usr/shared/elasticsearch/bin</code> directory again. Here, we use <code>elasticsearch-service-tokens</code> to create a new <code>elastic/kibana</code> token called <code>kibana-token</code>. And it will generate a long token for you.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch-service-tokens create elastic/kibana kibana-token</span><br><span class="line">SERVICE_TOKEN elastic/kibana/kibana-token = AA***************************************pn</span><br></pre></td></tr></table></figure><p>Copy and save it for later use. However, it is stored plain text in the file called <code>service-token</code> in <code>/etc/elasticsearch/</code>.</p><div class="note info flat"><p>There is no need to restart Elasticsearch here.</p></div><hr><h1 id="2-Setup-Kibana"><a href="#2-Setup-Kibana" class="headerlink" title="2. Setup Kibana"></a>2. Setup Kibana</h1><p>Kibana is used to provide a visualized command panel for Elasticsearch.</p><h2 id="2-1-Installation"><a href="#2-1-Installation" class="headerlink" title="2.1 Installation"></a>2.1 Installation</h2><p>Kibana’s installation is almost the same as Elasticsearch, just differs in the last word.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install kibana</span><br></pre></td></tr></table></figure><h2 id="2-2-Configuring"><a href="#2-2-Configuring" class="headerlink" title="2.2 Configuring"></a>2.2 Configuring</h2><p>Well, you know, elastic product, so their file structures are quite similar. Open <code>/etc/kibana/kibana.yml</code>, and you may need root privilege.</p><p>First, you can set the port to whatever you like.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br></pre></td></tr></table></figure><p>Next, which is important, the server host. Set it to 0.0.0.0 if you want to connect it with any source.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>It is also recommended to set the <code>publicBaseUrl</code>. You can leave it commented, though.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.publicBaseUrl:</span> <span class="string">&quot;http://**.**.**.**:5601&quot;</span></span><br></pre></td></tr></table></figure><p>Then, you have to tell Kibana where Elasticsearch is. Add the IP and port of your Elasticsearch to hosts.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://192.168.0.200:9200&quot;</span>]</span><br></pre></td></tr></table></figure><p>And if you do not use SSL, go below and set this to <code>none</code>.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.ssl.verificationMode:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure><p>Ok, you are almost there.</p><h2 id="2-3-Service-Account-Token"><a href="#2-3-Service-Account-Token" class="headerlink" title="2.3 Service Account Token"></a>2.3 Service Account Token</h2><p>For security reason, you shouldn’t directly use the superuser to authenticate Kibana. Instead, a service account is recommended. So here, we’re going to use the service account token we generated in <a href="#1-4-Service-Account">1.4</a>. Still, in <code>/etc/kibana/kibana.yml</code>, add this token.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.serviceAccountToken:</span> <span class="string">&quot;AAE**************************************************Fpn&quot;</span></span><br></pre></td></tr></table></figure><p>However, it may not be a good idea to store service account token in plain text. So we can go to <code>/usr/share/kibana/bin</code> to create a key store. Again, we can find many command-line tools here.</p><p>Use <code>kibana-keystore</code> command to add a key, and it will prompt you to enter the value.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./kibana-keystore add elasticsearch.serviceAccountToken</span><br><span class="line">Enter value <span class="keyword">for</span> elasticsearch.serviceAccountToken: </span><br></pre></td></tr></table></figure><p>After this, you can check it with <code>kibana-keystore list</code> to see whether it is added or not.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./kibana-keystore list</span><br><span class="line">elasticsearch.serviceAccountToken</span><br></pre></td></tr></table></figure><div class="note success flat"><p>Well, in <code>/etc/kibana/</code>, there is already a file called <code>kibana.keystore</code>. If not, use <code>./kibana-keystore create</code> to create one.</p></div><h2 id="2-4-Run-Kibana-Service"><a href="#2-4-Run-Kibana-Service" class="headerlink" title="2.4 Run Kibana Service"></a>2.4 Run Kibana Service</h2><p>Well, the same as Elasticsearch service, we add it to system service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># make Kibana start automatically</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> kibana.service</span><br><span class="line"><span class="comment"># start Kibana service</span></span><br><span class="line">sudo systemctl start kibana.service</span><br><span class="line"><span class="comment"># check Kibana service status</span></span><br><span class="line">sudo systemctl status kibana.service</span><br></pre></td></tr></table></figure><p>Open the URL in your browser, and you’ll see this. 😆 Of course, you should login first if you enabled authentication.</p><img src="/posts/Setup-Elasticsearch-with-Kibana/image-20231210115740352.png" alt="image-20231210115740352" style="zoom: 33%;"><hr><h1 id="3-Searching-in-Kibana"><a href="#3-Searching-in-Kibana" class="headerlink" title="3. Searching in Kibana"></a>3. Searching in Kibana</h1><blockquote><p>Have to say that… Kibana does much more than visualizing Elasticsearch. It would be a little bit difficult to find where to do this.</p></blockquote><p>In this section, I’m going to show you how to perform basic query in Kibana. I’ll dive deeper in this later when we import our data from MySQL to Elasticsearch.</p><h2 id="3-1-Add-Sample-Data"><a href="#3-1-Add-Sample-Data" class="headerlink" title="3.1 Add Sample Data"></a>3.1 Add Sample Data</h2><p>In <code>/app/home#/</code>, you can find the option to add sample data to your Elasticsearch. Choose whatever you like.</p><img src="/posts/Setup-Elasticsearch-with-Kibana/image-20231210120010667.png" alt="image-20231210120010667" style="zoom:33%;"><h2 id="3-2-Create-Data-View"><a href="#3-2-Create-Data-View" class="headerlink" title="3.2 Create Data View"></a>3.2 Create Data View</h2><p>This is hard to find. 🥴 Go to “Management | Stack Management” first.</p><img src="/posts/Setup-Elasticsearch-with-Kibana/image-20231210120250622.png" alt="image-20231210120250622" style="zoom:33%;"><p>Then, in stack management, go to “Data View”, and click “Create data view”, and select the sample data you’ve just added. After that, you’ll see it in your data views dashboard like 3 below.</p><img src="/posts/Setup-Elasticsearch-with-Kibana/image-20231210120929643.png" alt="image-20231210120929643" style="zoom:33%;"><h2 id="3-3-Run-Queries"><a href="#3-3-Run-Queries" class="headerlink" title="3.3 Run Queries"></a>3.3 Run Queries</h2><p>This is even harder to find. 🫠 Go to “Management | Dev Tools”, and you’ll see the console.</p><img src="/posts/Setup-Elasticsearch-with-Kibana/image-20231210121121011.png" alt="image-20231210121121011" style="zoom:33%;"><p>Click to the button to send request to Elasticsearch instance, and if everything goes well, you should be able to see the results in the right panel.</p><img src="/posts/Setup-Elasticsearch-with-Kibana/image-20231210121227379.png" alt="image-20231210121227379" style="zoom:33%;"><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Tada! 🥳 Congratulations, you’ve completed setup for Elasticsearch and Kibana. Although we ignored SSL configuration, it is quite enough for small scale projects.</p><p>Thanks for <a href="https://www.youtube.com/watch?v=HOmq3STxAKg">Install Elasticsearch + Kibana 8.x with TLS&#x2F;SSL</a> again! 🫡</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Web Servers &amp; Deployment </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Deployment </tag>
            
            <tag> Linux </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup FTP on Ubuntu</title>
      <link href="/posts/Setup-FTP-on-Ubuntu/"/>
      <url>/posts/Setup-FTP-on-Ubuntu/</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>Most of the contents comes from <a href="https://linuxize.com/post/how-to-setup-ftp-server-with-vsftpd-on-ubuntu-20-04/">How to Setup FTP Server with VSFTPD on Ubuntu 20.04</a>. Much thanks. 🙂</p></div><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Why we need this? We have plenty of tools to transfer files to a remote server, such as Xshell &amp; Xftp, Tabby. I recently comes to this problem as I trying to develop an ASP.NET Core Web API project for Linux, when it is more convenient to publish the product via FTP. So here’s how to set up FTP in Linux.</p><hr><h1 id="Setup-FTP-Service"><a href="#Setup-FTP-Service" class="headerlink" title="Setup FTP Service"></a>Setup FTP Service</h1><h2 id="Step-1-Install-vsftpd"><a href="#Step-1-Install-vsftpd" class="headerlink" title="Step 1. Install  vsftpd"></a>Step 1. Install  vsftpd</h2><p>Well, everything starts with this tool.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure><p>Then, it should automatically start. You can verify its status with this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status vsftpd</span><br></pre></td></tr></table></figure><h2 id="Step-2-Configure-vsftpd"><a href="#Step-2-Configure-vsftpd" class="headerlink" title="Step 2. Configure vsftpd"></a>Step 2. Configure vsftpd</h2><p>The configuration file for vsftpd is located <code>/etc/vsftpd.conf</code>, you can refer to <a href="http://vsftpd.beasts.org/vsftpd_conf.html">VSFTPD.CONF</a> for all available options.</p><div class="note info flat"><p>You should have <code>sudo</code> permission to edit it. And you can use <code>/</code> in Vim to search for options more efficiently.</p></div><h3 id="Enable-FTP-Access"><a href="#Enable-FTP-Access" class="headerlink" title="Enable FTP Access"></a>Enable FTP Access</h3><p>For security reason, we should only allow local users to access FTP.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anonymous_enable</span>=<span class="string">NO</span></span><br><span class="line"><span class="attr">local_enable</span>=<span class="string">YES</span></span><br></pre></td></tr></table></figure><h3 id="Enable-Uploads"><a href="#Enable-Uploads" class="headerlink" title="Enable Uploads"></a>Enable Uploads</h3><p>Locate and uncomment the <code>write_enable</code> directive to allow filesystem changes, such as uploading and removing files.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">write_enable</span>=<span class="string">YES</span></span><br></pre></td></tr></table></figure><h3 id="chroot-jail"><a href="#chroot-jail" class="headerlink" title="chroot jail"></a>chroot jail</h3><p>To prevent local FTP users to access files outside of their home directories, uncomment the line starting with <code>chroot_local_user</code>. It is called a “jail” because users are restricted to their own directory.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">chroot_local_user</span>=<span class="string">YES</span></span><br></pre></td></tr></table></figure><p>It is not enough, though. By default, for security reasons, when chroot is enabled, vsftpd will refuse to upload files if the directory that the users are locked in is writable. There are two solutions for this.</p><p><strong>Method 1</strong></p><p>This is the recommended one, that is to specify a writeable root. Add the following to entries below <code>chroot_local_user</code>.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user_sub_token</span>=<span class="string">$USER</span></span><br><span class="line"><span class="attr">local_root</span>=<span class="string">/home/$USER/ftp</span></span><br></pre></td></tr></table></figure><p>You can set <code>local_root</code> to <code>/home/$USER</code> to allow writing for the entire user directory.</p><p><strong>Method 2</strong></p><p>Or, you can simply add this line. Use this option only if you must grant writable access to your user to its home directory.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">allow_writeable_chroot</span>=<span class="string">YES</span></span><br></pre></td></tr></table></figure><h3 id="Passive-FTP-Connections"><a href="#Passive-FTP-Connections" class="headerlink" title="Passive FTP Connections"></a>Passive FTP Connections</h3><p>By default, vsftpd uses active mode. To use passive mode, set the minimum and maximum range of ports. Add these two lines to the configuration file.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pasv_min_port</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">pasv_max_port</span>=<span class="string">31000</span></span><br></pre></td></tr></table></figure><h2 id="Step-3-Restart-vsftpd"><a href="#Step-3-Restart-vsftpd" class="headerlink" title="Step 3. Restart vsftpd"></a>Step 3. Restart vsftpd</h2><p>Save your configurations, and restart vsftpd service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure><h2 id="Step-4-Opening-the-Firewall"><a href="#Step-4-Opening-the-Firewall" class="headerlink" title="Step 4. Opening the Firewall"></a>Step 4. Opening the Firewall</h2><p>If you are running a <a href="https://linuxize.com/post/how-to-setup-a-firewall-with-ufw-on-ubuntu-20-04/">UFW firewall</a> , you’ll need to allow FTP traffic.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 20:21/tcp</span><br><span class="line">sudo ufw allow 30000:31000/tcp</span><br></pre></td></tr></table></figure><p>Also, open the firewall in your server’s provider’s control panel.</p><p>Now, you’re all set! 🥳 You can access FTP with any local user.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>There are a few steps ahead, actually, but these are enough for basic use. See  <a href="https://linuxize.com/post/how-to-setup-ftp-server-with-vsftpd-on-ubuntu-20-04/">How to Setup FTP Server with VSFTPD on Ubuntu 20.04</a> for more information.</p><p>This only enables FTP service, and is not any FTP site. So you cannot visit it in your browser, or even File Explorer. 😞</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Server Management </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Decorator Best Practice</title>
      <link href="/posts/Django-Decorator-Best-Practice/"/>
      <url>/posts/Django-Decorator-Best-Practice/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>As a Web backend framework, Django is easy to use. However, simplicity is at the same time one of its drawbacks, which means it may not be that graceful for more complex requests. So in this post, I’m going to introduce a more elegant way to handle request parameters.</p><hr><h1 id="Write-Your-Own-Decorator"><a href="#Write-Your-Own-Decorator" class="headerlink" title="Write Your Own Decorator"></a>Write Your Own Decorator</h1><h2 id="1-Basic-Decorator"><a href="#1-Basic-Decorator" class="headerlink" title="1. Basic Decorator"></a>1. Basic Decorator</h2><p>Decorators in Django may seem to be mysterious when you first use it, just a simple <code>@decorator</code> and some magic happens. So how can we implement ours?</p><p>A basic decorator can be as simple as this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">view_func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            <span class="comment"># Some logics here...</span></span><br><span class="line">            <span class="keyword">return</span> view_func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wraps(view_func)(wrapper)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>A little wired? Well, you can just focus on the logic, and take others as a template. If you want IDE to recognize the type of <code>request</code>, you can add <code>WSGIRequest</code> type hint.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.handlers.wsgi <span class="keyword">import</span> WSGIRequest</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request: WSGIRequest, *args, **kwargs</span>):</span><br><span class="line">            <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>For this decorator, you can use it like this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@my_decorator()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view_func</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># logics here...</span></span><br></pre></td></tr></table></figure><p>Not that bad, huh? 😃 It is essentially a function, that’s it.</p><h2 id="2-Response-Before-View"><a href="#2-Response-Before-View" class="headerlink" title="2. Response Before View"></a>2. Response Before View</h2><p>You may not want some illegal requests go into your view function, thus return Bad Request response in decorator can be a good choice. To achieve this, simply return such response instead of <code>view_func</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">varification_decorator</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">view_func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request: WSGIRequest, *args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> verify(request):</span><br><span class="line">                <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Bad Response&quot;</span>, status=HTTPStatus.BAD_REQUEST)</span><br><span class="line">            <span class="keyword">return</span> view_func(request, user=user, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wraps(view_func)(wrapper)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Decorator-with-Parameters"><a href="#3-Decorator-with-Parameters" class="headerlink" title="3. Decorator with Parameters"></a>3. Decorator with Parameters</h2><p><del>To add parameters to our decorator, we simply add parameters to our decorator.</del> 😳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">message_decorator</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">view_func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Message in decorator: &quot;</span> + message)</span><br><span class="line">            <span class="keyword">return</span> view_func(request, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wraps(view_func)(wrapper)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>See, that’s it, no difference from other ordinary functions.</p><h2 id="4-Inject-Parameters-to-View-Function"><a href="#4-Inject-Parameters-to-View-Function" class="headerlink" title="4. Inject Parameters to View Function"></a>4. Inject Parameters to View Function</h2><p>You may want to get some data from the request in decorator, so that you won’t bother get it again and again in view function. To achieve this, you need <code>*args</code> and <code>*kwargs</code> in Python.</p><p>Previously, when we call <code>view_func</code>, we pass only <code>request</code>, <code>*args</code>, <code>**kwargs</code>. These are inherited from parent wrapper.</p><div class="note primary flat"><p>Notice that, decorators are like middlewares, they will process the request one by one. The parameters you set in one decorator will continue exists in the following decorators. Only make sure the first parameter is <code>request</code>, and remember to inherit <code>*args</code> and <code>**kwargs</code>.</p></div><p>So, to inject a parameter, you can simply write this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inject_msg</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">view_func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request: WSGIRequest, *args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">return</span> view_func(request, msg=<span class="string">&quot;hello&quot;</span>, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wraps(view_func)(wrapper)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>Then, in the view function, you can get this <code>msg</code> by adding a parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@inject_msg()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request, msg</span>):</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="comment"># More logics...</span></span><br></pre></td></tr></table></figure><p>Or you can inject multiple parameters using a <code>dict</code> object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">inject_multiple</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">view_func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request: WSGIRequest, *args, **kwargs</span>):</span><br><span class="line">            params = &#123;</span><br><span class="line">                <span class="string">&quot;a&quot;</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b&quot;</span>: <span class="string">&quot;B&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> view_func(request, **params, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wraps(view_func)(wrapper)</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>Then, the same, you can get these parameters.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@inject_multiple()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_view</span>(<span class="params">request, a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">    <span class="comment"># More logics...</span></span><br></pre></td></tr></table></figure><p>That’s it. Now you can gracefully handle parameters in requests! 😁</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Although we use decorator to achieve a better request processing, Django itself is not that elegant. It’s time to use a more powerful and promising framework - ASP.NET Core! 💫</p><p>See: <a href="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/">Thoughts on Basic Structure of ASP.NET Core</a> 😉</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup QEMU on Linux</title>
      <link href="/posts/Setup-QEMU-on-Linux/"/>
      <url>/posts/Setup-QEMU-on-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>For some reason, the emulator for MIPS in BUAA OS course changed from GXemul to QEMU since 2024 Summer Semester. If we do not want to use the Jump Server for local development, we have to configure it in our WSL or virtual machine. However, it requires some efforts to install this emulator.</p><p>Here are some related articles if you want to use local WSL for development. 😉</p><ul><li><a href="/posts/Configure-VS-for-Non-MSVC-Projects/">Configure VS for Non MSVC Projects</a></li></ul><hr><h1 id="Install-QEMU"><a href="#Install-QEMU" class="headerlink" title="Install QEMU"></a>Install QEMU</h1><h2 id="Install-From-apt-get"><a href="#Install-From-apt-get" class="headerlink" title="Install From apt-get"></a>Install From <code>apt-get</code></h2><p>It would be easy to download &amp; install QEMU, just one command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-system</span><br></pre></td></tr></table></figure><p>However, it may not get the right version, as it will get us 4.x while we have version 6.2.0 in the Jump Server.</p><p>But both should work fine. 😊</p><h2 id="Install-From-Source-Code"><a href="#Install-From-Source-Code" class="headerlink" title="Install From Source Code"></a>Install From Source Code</h2><p>To install the correct version, we have to install QEMU from source code.</p><p>Go to <a href="https://www.qemu.org/download/">Download QEMU</a> for build instructions, or <a href="https://download.qemu.org/">Full list of releases</a> for all available versions.</p><h3 id="Download-Source-Code"><a href="#Download-Source-Code" class="headerlink" title="Download Source Code"></a>Download Source Code</h3><p>First, we have to download the source code. Change the version depends on your needs.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qemu.org/qemu-6.2.0.tar.xz</span><br><span class="line">tar xvJf qemu-6.2.0.tar.xz</span><br></pre></td></tr></table></figure><h3 id="Build-QEMU"><a href="#Build-QEMU" class="headerlink" title="Build QEMU"></a>Build QEMU</h3><p>The official guide is a little unfriendly, as it missed all dependencies. So before we start building, we have to install some necessary dependencies.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libpixman-1-dev libcairo2-dev libpango1.0-dev libjpeg8-dev libgif-dev ninja-build</span><br></pre></td></tr></table></figure><p>Then, we can continue the process, and do as the instruction said.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu-6.2.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure><div class="note warning flat"><p><code>./configure</code> may take a little time to finish, and <code>make</code>… almost 10K targets to build, takes quite long. 😨 Use <code>make -j</code> to speed up the process.</p></div><h3 id="Install-QEMU-1"><a href="#Install-QEMU-1" class="headerlink" title="Install QEMU"></a>Install QEMU</h3><p>At last, one more command to install QEMU to your system path.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p>Tada! You are all set! 🥳 Restart session and you’ll have it in your path.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-system-mipsel --version</span><br><span class="line">QEMU emulator version 6.2.0</span><br><span class="line">Copyright (c) 2003-2021 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, this is it. Perhaps not that difficult, right? 😶‍🌫️</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Linux </tag>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
            <tag> WSL </tag>
            
            <tag> QEMU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAID 10 vs RAID 01</title>
      <link href="/posts/RAID-10-VS-RAID-01/"/>
      <url>/posts/RAID-10-VS-RAID-01/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-RAID"><a href="#What-is-RAID" class="headerlink" title="What is RAID?"></a>What is RAID?</h1><p>RAID is short for Redundant Array of Inexpensive (Independent) Disks. The primary idea of it is to use multiple disks to achieve resilient storage, e.g. safety and consistency of data.</p><p>This article mainly talks about the difference between RAID 10 and RAID 01. If you are not familiar with any RAID, please get to know them first. Here are some good articles.</p><ul><li><a href="https://www.thegeekstuff.com/2010/08/raid-levels-tutorial/">RAID 0, RAID 1, RAID 5, RAID 10</a></li><li><a href="https://www.thegeekstuff.com/2011/11/raid2-raid3-raid4-raid6/">RAID 2, RAID 3, RAID 4, RAID 6</a></li></ul><p>I learned a lot from <a href="https://www.thegeekstuff.com/2011/10/raid10-vs-raid01/">RAID 10 Vs RAID 01</a>, after which I obtained a basic understanding of our topic today.</p><hr><h1 id="RAID-10-VS-RAID-01"><a href="#RAID-10-VS-RAID-01" class="headerlink" title="RAID 10 VS RAID 01"></a>RAID 10 VS RAID 01</h1><p>The main difference between RAID 10 and RAID 01 is their fault tolerance level. Their performance and capacity are the same when all disk are healthy, but when disk fails, the difference shows.</p><div class="note info flat"><p>Keep in mind that, a RAID group is controlled by a RAID controller, and difference groups are independent, which means that difference controllers cannot cooperate with each other, except basic I&#x2F;O operation.</p></div><h2 id="RAID-10"><a href="#RAID-10" class="headerlink" title="RAID 10"></a>RAID 10</h2><p>First let’s look at RAID 10, a.k.a. RAID 1 + 0. In RAID 10, disks are first grouped to make RAID 1, and then RAID 1 are grouped to make RAID 0. So it is also called “stripe of mirrors”. A healthy RAID 10 array is shown below.</p><p><img src="/posts/RAID-10-VS-RAID-01/RAID-10-GOOD.svg"></p><p>For an abstract view of the structure of RAID 10, it can be better understood.</p><p>When performing write operation, RAID 0 first “stripify” the data, and send each stripe to RAID 1. RAID 1 then take their part of data and mirrors it. When performing read operation, RAID 0 asks RAID 1 for each part of the stripped data, and RAID 1 simply provides it.</p><p>Well, you may pause for a while and think about it before you move on.</p><p><strong>When disks in RAID 10 fails, what will happen?</strong></p><p>As stated above, we use an abstract view to analyze it. RAID 0 dispatch all I&#x2F;O tasks to RAID 1, so only RAID 1 is directly affected. When one disk in RAID 1 fails, it can still work fine as it has redundant copy. Thus as long as every RAID 1 has at least one disk healthy, the entire RAID 10 array can tolerate the failure. As shown in the figure below, red ones are failed disks, yet it can still works normally. Only if both disks in one RAID 1 group fails can result in the entire failure.</p><p><img src="/posts/RAID-10-VS-RAID-01/RAID-10-BAD.svg" alt="RAID-10-BAD"></p><h2 id="RAID-01"><a href="#RAID-01" class="headerlink" title="RAID 01"></a>RAID 01</h2><p>Well, as opposed to RAID 01, a.k.a. RAID 0 + 1, disks are first grouped to make RAID 0, then mirrored with RAID 1. A healthy RAID 01 array is shown below. This time, only two groups of RAID 0, and it is easy to understand based on the trait of RAID 1 and RAID 0.</p><p><img src="/posts/RAID-10-VS-RAID-01/RAID-01-GOOD.svg" alt="RAID-01-GOOD"></p><p>Still, think in abstract view. In this case, RAID 1 will dispatch I&#x2F;O job to RAID 0, while RAID 0 performs the final I&#x2F;O. One thing to notice is that, <strong>these two RAID 0 cannot communicate with each other!</strong> This is what bothers me first, as if RAID 0 can cooperate with each other, the situation will change. But, such cooperation will violate the initial thought of RAID, which means to have <strong>independent</strong> disks and arrays.</p><p>So, since two RAID 0 cannot communicate with each other, the RAID 0 works just like it is used alone. Wait a minute, RAID 0, alone…? That means, <strong>a single disk failure in RAID 0 group will result in the failure of the whole RAID 0 sub-array!</strong> Which then makes the RAID 01 essentially a RAID 0, as the RAID 1 on top loses one of its mirror, and only rely on the remaining RAID 0. And all that that implies, if two disks (one in each RAID 0 group) fails, the entire RAID 01 will fail.</p><p>So as the figure below shows, the red disk fails, thus the RAID 0 is belongs to fails. The grey ones are healthy, but due to the failure disk, they cannot work either. Hence, this RAID 01 becomes a RAID 0.</p><p><img src="/posts/RAID-10-VS-RAID-01/RAID-01-BAD.svg" alt="RAID-01-BAD"></p><h2 id="Fault-Tolerance"><a href="#Fault-Tolerance" class="headerlink" title="Fault Tolerance"></a>Fault Tolerance</h2><p>If we only consider failure of two disks, we can calculate the possibility of entire failure of RAID 10 and RAID 01.</p><p>For RAID 10, the possibility is <code>1/6 * 1/5 = 1/30</code>, <code>1/5</code> means the second failure should be in the same RAID 0 group of the first one.</p><p>For RAID 01, the possibility is <code>1/6 * 3/5 = 3/30 = 1/10</code>, that is, if these two are in different groups, the entire array will fail.</p><hr><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In a word, both RAID 10 and RAID 01 has the same performance and capacity, but RAID 10 has more fault tolerance. If you’re going to make a choice, RAID 10 should always be the answer.</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> Network Storage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RAID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinIoC: A Miniature IoC Container in C++</title>
      <link href="/posts/MinIoC-A-Miniature-IoC-Container-in-C/"/>
      <url>/posts/MinIoC-A-Miniature-IoC-Container-in-C/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><blockquote><p>The implementation of this IoC is based on <a href="https://www.codeproject.com/Articles/1029836/A-miniature-IOC-Container-in-Cplusplus">A Miniature IOC Container in C++</a>. Some necessary modifications have been made to the source code on the website, and here is the original License: <a href="https://www.codeproject.com/info/cpol10.aspx">The Code Project Open License (CPOL)</a></p></blockquote><p>MinIoC is a lightweight IoC container for C++, you can get it on GitHub. It requires C++ 11 or later.</p><ul><li><a href="https://github.com/Lord-Turmoil/MinIoC">MinIoC on GitHub</a></li></ul><p>Dependency Injection is an awesome design pattern, use it, and enjoy. 🥰</p><hr><h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><p>This mini IoC container provides basic adding and resolving abilities and the simplest dependency injection. It provides two lifetimes - singleton and transient. Singleton object will be created only once, while transient object will be constructed every time it is resolved. What’s more, it can provide lazy initialization for singleton instances. 😁</p><p>Since everything is implemented with C++ template, only header files are located under the <code>mioc/include</code> directory. A test file, <code>Test.cpp</code> is placed under the <code>src/</code> directory as an example.</p><p>To avoid pointer problems, <code>std::shared_ptr</code> is used everywhere to wrap all native pointers. 🙂</p><p>It will be very nice for you to light up the 🌟. :)</p><hr><h1 id="2-Usage"><a href="#2-Usage" class="headerlink" title="2. Usage"></a>2. Usage</h1><h2 id="2-1-Test-Classes"><a href="#2-1-Test-Classes" class="headerlink" title="2.1 Test Classes"></a>2.1 Test Classes</h2><p>Here are the classes we use in this demonstration. Interfaces are omitted as they are straightforward. We can see that B depends on A, and C depends on B. 🧐</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : <span class="keyword">public</span> IA</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> IB</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="type">const</span> std::shared_ptr&lt;IA&gt;&amp; a) :_a(a) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;IA&gt; _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> IC</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">C</span>(<span class="type">const</span> std::shared_ptr&lt;IB&gt;&amp; b) : _b(b) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::shared_ptr&lt;IB&gt; _b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-2-Create-Container"><a href="#2-2-Create-Container" class="headerlink" title="2.2 Create Container"></a>2.2 Create Container</h2><p>All required header files are included in <code>mioc.h</code>, simply include this header file, and you are ready to go!</p><p>You can create a container using <code>ServiceContainer::New()</code>. In this case, you have to inject this container everywhere you need. You can choose whether to enable lazy initialization for this container <strong>on creation</strong>. You <strong>won’t</strong> be able to change it later. By default, lazy initialization is enabled.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mioc::ServiceContainerPtr lazyContainer = mioc::ServiceContainer::<span class="built_in">New</span>();</span><br><span class="line">mioc::ServiceContainerPtr hungryContainer = mioc::ServiceContainer::<span class="built_in">New</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>Or, you can use <code>SingletonContainer</code>, which provides a global-scale singleton container. This container will not be created until the first time you get it. Also, on your first call, you can choose whether to enable lazy initialization for the global container.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by default, the global container enables lazy initialization</span></span><br><span class="line">mioc::ServiceContainerPtr container = mioc::SingletonContainer::<span class="built_in">GetContainer</span>();</span><br><span class="line"><span class="comment">// or you can disable it on, and only on the first call</span></span><br><span class="line">mioc::ServiceContainerPtr container = mioc::SingletonContainer::<span class="built_in">GetContainer</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="2-3-Add-Singleton"><a href="#2-3-Add-Singleton" class="headerlink" title="2.3 Add Singleton"></a>2.3 Add Singleton</h2><p>The first is to use the type name only. You should provide its interface type and concrete type. And all dependency types if it has.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">container-&gt;<span class="built_in">AddSingleton</span>&lt;IA, A&gt;();      <span class="comment">// without dependency</span></span><br><span class="line">container-&gt;<span class="built_in">AddSingleton</span>&lt;IB, B, IA&gt;();  <span class="comment">// with dependencies</span></span><br></pre></td></tr></table></figure><p>Also, you can directly add a pre-constructed instance to it. This way, you may need a pointer conversion first, which converts concrete type to its corresponding interface. You don’t need to pass a type name in this case. And, of course, lazy initialization matters not in this way.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;IC&gt; c = std::<span class="built_in">make_shared</span>&lt;C&gt;(b);</span><br><span class="line">container-&gt;<span class="built_in">AddSingleton</span>(c);</span><br></pre></td></tr></table></figure><h2 id="2-4-Add-Transient"><a href="#2-4-Add-Transient" class="headerlink" title="2.4 Add Transient"></a>2.4 Add Transient</h2><p>It is simpler to add a transient object. We need to pass type names, and they will be appropriately resolved later.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">container-&gt;<span class="built_in">AddTransient</span>&lt;IA, A&gt;();</span><br><span class="line">container-&gt;<span class="built_in">AddTransient</span>&lt;IB, B, IA&gt;();</span><br><span class="line">container-&gt;<span class="built_in">AddTransient</span>&lt;IC, C, IB&gt;();</span><br></pre></td></tr></table></figure><h2 id="2-5-Resolve-Instances"><a href="#2-5-Resolve-Instances" class="headerlink" title="2.5 Resolve Instances"></a>2.5 Resolve Instances</h2><p>No matter how you add objects into the container, you can always resolve an instance with the interface type you provided on adding. <code>nullptr</code> will be returned if the interface is not registered.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::shared_ptr&lt;IC&gt; c = container-&gt;<span class="built_in">Resolve</span>&lt;IC&gt;();</span><br></pre></td></tr></table></figure><hr><h1 id="3-Limitations"><a href="#3-Limitations" class="headerlink" title="3. Limitations"></a>3. Limitations</h1><p>Though this mini IoC container can handle dependency injection, you have to specify all dependencies when you add anything manually. 🥲</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>This is simple, but not that powerful. If you seek for something better, Hypodermic may be a good one. 😉</p><ul><li><a href="https://github.com/ybainier/Hypodermic">Hypodermic on GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> C/C++ </category>
          
          <category> Personal Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> C/C++ </tag>
            
            <tag> DI </tag>
            
            <tag> IoC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Clang in CLion</title>
      <link href="/posts/Configure-Clang-in-CLion/"/>
      <url>/posts/Configure-Clang-in-CLion/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Alas, here it comes. CLion, enemy of Visual Studio… But, I had to admit, it is not that bad at all. ☹️</p><p>For some reason, I have to use Clang instead of commonly seen GCC. So, how to configure this in CLion. I used to believe that install Clang is as easy as install MinGW, but I was wrong. 😞 It takes some efforts. So… This is why you see this post.</p><hr><h1 id="1-Install-Clang"><a href="#1-Install-Clang" class="headerlink" title="1. Install Clang"></a>1. Install Clang</h1><blockquote><p>Though you can install Clang tool chain in Visual Studio, but it can only work in Visual Studio, not in CLion. (Perhaps there is a way that I failed to discover?)</p></blockquote><p>There is a relatively simpler way of downloading Clang without Visual Studio, that is via MSYS2.</p><h2 id="1-1-Install-MSYS2"><a href="#1-1-Install-MSYS2" class="headerlink" title="1.1 Install MSYS2"></a>1.1 Install MSYS2</h2><p>Just go to MSYS2 official site to download the installer. One-click install, really easy.</p><ul><li><a href="https://www.msys2.org/#installation">MSYS2</a></li></ul><div class="note info flat"><p>During the installation, you can change where MSYS2 will be installed.</p></div><p>After installation, you will get a bunch of stuffs in the directory. But notice that, directories like <code>mingw64\</code>, <code>clang64\</code> are still empty, because we haven’t install any tools yet.</p><img src="/posts/Configure-Clang-in-CLion/image-20230911224546702.png" alt="image-20230911224546702" style="zoom:50%;"><p>To make it clear, you’ve installed these 6 MSYS2s. 😧</p><img src="/posts/Configure-Clang-in-CLion/image-20230911225152197.png" alt="image-20230911225152197" style="zoom: 67%;"><h2 id="1-2-Install-Clang"><a href="#1-2-Install-Clang" class="headerlink" title="1.2 Install Clang"></a>1.2 Install Clang</h2><p>For Windows users, we need MinGW Clang, and you can find its information on MSYS2 official package site. You can find the install command in this page.</p><ul><li>Package: <a href="https://packages.msys2.org/package/mingw-w64-x86_64-clang?repo=mingw64">mingw-w64-x86_64-clang</a></li></ul><p>To save your time, the installation command is this. Paste it in any of the MSYS2 you’ve installed and execute.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S mingw-w64-x86_64-clang</span><br></pre></td></tr></table></figure><img src="/posts/Configure-Clang-in-CLion/image-20230911225124458.png" alt="image-20230911225124458" style="zoom:50%;"><p>You’ll then find the toolchain installed in <code>mingw64\</code> directory.</p><hr><h1 id="2-Configure-CLion"><a href="#2-Configure-CLion" class="headerlink" title="2. Configure CLion"></a>2. Configure CLion</h1><h2 id="2-1-Add-New-Toolchain"><a href="#2-1-Add-New-Toolchain" class="headerlink" title="2.1 Add New Toolchain"></a>2.1 Add New Toolchain</h2><p>Open CLion, go to Settings&#x2F;Preferences | Build, Execution, Deployment | Toolchains, click add and select MinGW.</p><img src="/posts/Configure-Clang-in-CLion/image-20230911225703354.png" alt="image-20230911225703354" style="zoom: 67%;"><p>Then, Set paths to your MSYS2 installation directory. You only need to set Toolset and Compilers.</p><img src="/posts/Configure-Clang-in-CLion/image-20230911230200949.png" alt="image-20230911230200949" style="zoom:67%;"><p>After all these, click Apply.</p><h2 id="2-2-Set-Toolchains-of-Project"><a href="#2-2-Set-Toolchains-of-Project" class="headerlink" title="2.2 Set Toolchains of Project"></a>2.2 Set Toolchains of Project</h2><p>One step away, you now can select the suitable toolchains for your project. Open Settings&#x2F;Preferences | Build, Execution, Deployment | CMake, select a profile, and change the Toolchain it uses. Here, is MinGW-Clang.</p><img src="/posts/Configure-Clang-in-CLion/image-20230911230547354.png" alt="image-20230911230547354" style="zoom:50%;"><p>Finally, click Apply and you are all set.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I hate it to change my IDE to CLion, but… not bad, since I already use ReSharper in Visual Studio. Hmm… This is it, I guess. 😐</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CLion </tag>
            
            <tag> Clang </tag>
            
            <tag> Configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic Serving and Proxying in Nginx</title>
      <link href="/posts/Basic-Serving-and-Proxying-in-Nginx/"/>
      <url>/posts/Basic-Serving-and-Proxying-in-Nginx/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;Knowledge isn't power until it is applied.&rdquo;</i></p><p style="text-align: right"><i>&mdash; Dale Carnegie</i></p><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>“nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP&#x2F;UDP proxy server, originally written by <a href="http://sysoev.ru/en/">Igor Sysoev</a>.”</p><p style="text-align: right">- <a href="https://nginx.org/en/" target="_blank">Nginx</a></p><p>So in this article, I’m going to talk about the basic use of Nginx proxying, including:</p><ul><li><a href="#Setup-Nginx">Setup Nginx</a></li><li><a href="#Serving-Static-Files">Serving Static Files</a></li><li><a href="#Basic-Proxying">Basic Proxying</a></li></ul><div class="note info flat"><p>All these are done on a Ubuntu server. 😉</p></div><div class="note success flat"><p>If you are familiar with these basic knowledge, you may want to check out <a href="/posts/Tips-on-Nginx-Configuration/">Tips on Nginx Configuration</a> first.😉</p></div><hr><h1 id="Setup-Nginx"><a href="#Setup-Nginx" class="headerlink" title="Setup Nginx"></a>Setup Nginx</h1><p>Before we use it, let’s have a brief look at Nginx.</p><p>First, we can get Nginx by a simple <code>apt</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><blockquote><p>If you accidentally corrupted your Nginx configuration, you can use <code>apt purge nginx</code> to remove it completely, and then reinstall it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge nginx nginx-common nginx-full</span><br><span class="line">sudo apt install nginx</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure></blockquote><p>Then, we’ll write some basic configurations in <code>/etc/nginx/conf.d/default.conf</code>. It tells Nginx to listen to port 80 requests and the server name it works on.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xx.xx.xx.xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>If you have multiple profiles, you can then write different <code>.conf</code> under <code>/etc/nginx/conf.d/</code>, and Nginx will load them all.</p></div><p>To launch Nginx, you need these two commands, once and for all, unless you stop it permanently.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>Every time you make any change to <code>.conf</code> files, you may want to reload Nginx, here is how to to it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>And at last, if you want to stop Nginx, you can force terminate it immediately, or let it stop itself after all current works finished.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s quit <span class="comment"># stop after current process finishes its work</span></span><br><span class="line">sudo nginx -s stop <span class="comment"># stop immediately</span></span><br></pre></td></tr></table></figure><hr><h1 id="Serving-Static-Files"><a href="#Serving-Static-Files" class="headerlink" title="Serving Static Files"></a>Serving Static Files</h1><div class="note info flat"><p>Reference: <a href="https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/">Serving Static Content</a></p></div><p>Now, let’s begin with the easiest part - serving static files.</p><p>In our Web service, we may want our resources accessible via URL. For example, in Django project, the <code>static/</code> and <code>media/</code> folder will be exposed directly to URL when <code>DEBUG</code> set to <code>True</code>. However, Django won’t serve static files in production, when Nginx is needed.</p><p>In order to map URL to server directory, we can add <code>location</code> sections in <code>server</code>. For example, if we want to map <code>/media</code> route, we can add a <code>location</code> section called <code>/media/</code>. This tells Nginx to handle all URL routes begin with <code>/media/</code> using schema defined in this section.</p><p> And in <code>location</code> section, we need to assign a root directory to tell Nginx to look for <code>/media/</code> folder under this root. This way, Nginx will look for local file <code>/home/wwwroot/media/avatar/1.png</code> when receives URL <code>/media/avatar/1.png</code>.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xx.xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /media/ &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/wwwroot/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, if you don’t want the location appended to <code>root</code>, i.e. you want have <code>/home/wwwroot/avatar/1.png</code> when receives URL <code>/media/avatar/1.png</code>, you can use <code>alias</code> instead of <code>root</code>. So your configuration will be like this.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xx.xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /media/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /home/wwwroot/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we have several static file routes, we can write <code>root</code> outside <code>location</code> to make it visible for all <code>location</code> sections, if it is not explicitly declared within.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xx.xx.xx.xx;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /home/wwwroot/;</span><br><span class="line"> </span><br><span class="line">    <span class="section">location</span> /media/ &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> /static/ &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Basic-Proxying"><a href="#Basic-Proxying" class="headerlink" title="Basic Proxying"></a>Basic Proxying</h1><p>It is really convenient to use Nginx for backend API proxying, as it could hide annoying port suffix.</p><h2 id="Proxying-HTTP-Requests"><a href="#Proxying-HTTP-Requests" class="headerlink" title="Proxying HTTP Requests"></a>Proxying HTTP Requests</h2><p>Basically, if we want to proxy our API for port 5000, we can simply write this. The only thing to notice is that, in order not to confuse API routes with others, such as static files, we can add a simple <code>/api/</code> prefix to all our APIs.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xx.xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:5000/api/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this way, we can use <code>xx.xx.xx.xx/api/your_api_route</code> instead of <code>xx.xx.xx.xx:5000/api/your_api_route</code>.</p><h2 id="Proxying-WebSocket-Requests"><a href="#Proxying-WebSocket-Requests" class="headerlink" title="Proxying WebSocket Requests"></a>Proxying WebSocket Requests</h2><div class="note info flat"><p>Reference: <a href="https://nginx.org/en/docs/http/websocket.html">WebSocket Proxying</a></p></div><p>WebSocket is a way you can use to exchange data between client side and server side, regardless of whether there is a new request or not. In fact, it is a <code>GET</code> request, but then get a protocol upgrade when connection established. Then how to proxy for it? </p><p>Almost the same as HTTP requests, but with some more information. Also, you may add a <code>/ws/</code> prefix, or whatever you like to avoid confusion.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xx.xx.xx.xx;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /ws/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:5000/ws/;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">360s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, we set the http version and headers to upgrade GET requests to a WebSocket connection. According to Nginx official site, the default timeout for a WebSocket connection is 60 seconds, which might be a little too short for your project. You can manually set it to any value you like. 😋</p><div class="note success flat"><p>For WebSocket, instead of a long timeout, sending heart beat might be a better option.</p></div><hr><h1 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h1><h2 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h2><p>Sometimes you may encounter 403 Forbidden when serving static files, don’t panic. It is most likely related to some permission issue. So let’s check it out.</p><p>First, let’s see who is running Nginx. We can use <code>ps aux | grep nginx</code> to find relevant processes. We can see that it is <code>www-data</code>, which is, obviously not us.</p><img src="/posts/Basic-Serving-and-Proxying-in-Nginx/image-20240605230958244.png" alt="image-20240605230958244" style="zoom:67%;"><p>So we need to change the owner of the Nginx worker process. First open <code>/etc/nginx/nginx.conf</code> (need <code>sudo</code>), and you’ll see a <code>user</code> option on top of the file. Change the default <code>www-data</code> to your username.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user www-data;</span></span><br><span class="line"><span class="attribute">user</span> your-user-name;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>You need to make this user the same as the owner of the files you want to serve. Usually, it is you.</p><div class="note warning flat"><p>It must be the root configuration file <code>nginx.conf</code>, not any custom ones.</p></div><p>After this, use <code>nginx -s reload</code> to reload the nginx. And here we go, no more 403 Forbidden! 🎉</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, this is merely the basic use of Nginx proxying. Explore more on your own. 🙂ᓚᘏᗢ</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Web Servers &amp; Deployment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Swap Space for Linux Server</title>
      <link href="/posts/Configure-Swap-Space-for-Linux-Server/"/>
      <url>/posts/Configure-Swap-Space-for-Linux-Server/</url>
      
        <content type="html"><![CDATA[<div class="note primary flat"><p>Most of the content comes from this article.</p><ul><li><a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-20-04">How To Add Swap Space on Ubuntu 20.04</a></li></ul></div><h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>Have you ever experienced out of memory error on a Linux server? Or, have you been bothered by the freeze that <code>conda install</code> caused? Well, the problem probably due to insufficient memory. But, how? Linux should have a good memory management. 😫 So, let’s have a look at our memory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br><span class="line">           total   used    free    shared  buff/cache   available</span><br><span class="line">Mem:       3.3Gi   632Mi   2.1Gi   2.0Mi       665Mi       2.5Gi</span><br><span class="line">Swap:      0B      0B      0B</span><br></pre></td></tr></table></figure><p>Why there is no swap?😵‍💫 I don’t know the reason, but maybe it is not configured by default. So in this post, I’m going to introduce how to configure swap file for a Linux server.</p><hr><h1 id="1-Configure-Swap-Space"><a href="#1-Configure-Swap-Space" class="headerlink" title="1. Configure Swap Space"></a>1. Configure Swap Space</h1><h2 id="1-1-Checking-Configuration"><a href="#1-1-Checking-Configuration" class="headerlink" title="1.1 Checking Configuration"></a>1.1 Checking Configuration</h2><p>Before we start, we can have a brief look at our existing configurations. For example, we can see if the system has any configured swap by typing this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon --show</span><br></pre></td></tr></table></figure><p>No output means that you don’t yet have any swap space. And you can use <code>free</code> command to confirm that, like we used just now.</p><p>Then, to add a swap file, we may need to check our disk usage to make sure we have enough space.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">tmpfs           341M 1012K  340M   1% /run</span><br><span class="line">/dev/vda2        59G   36G   21G  64% /</span><br><span class="line">tmpfs           1.7G   24K  1.7G   1% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           340M     0  340M   0% /run/user/1000</span><br></pre></td></tr></table></figure><p>The device with <code>/</code> in the <code>Mounted on</code> column is our disk in this case, and we still have plenty of space (21G) available.</p><h2 id="1-2-Creating-a-Swap-File"><a href="#1-2-Creating-a-Swap-File" class="headerlink" title="1.2 Creating a Swap File"></a>1.2 Creating a Swap File</h2><p>Now that we know the absence of our swap file, and how much disk space we have, we can start to create one now.</p><p>The best way of creating a swap file is with the <code>fallocate</code> program. This command instantly creates a file of the specified size.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fallocate -l 6G /swapfile</span><br></pre></td></tr></table></figure><div class="note info flat"><p>How much should be the swap size? For more information, you can refer to this article.</p><ul><li><a href="https://itsfoss.com/swap-size/">How Much Swap Should You Use in Linux?</a></li></ul></div><p>To ensure that we have created the swap file, we can verify it simply by <code>ls</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -lh /swapfile</span><br><span class="line">-rw-r--r-- 1 root root 6.0G Aug 29 09:36 /swapfile</span><br></pre></td></tr></table></figure><p>If you care about accessibility, you can make it only accessible by root.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line"><span class="built_in">ls</span> -lh /swapfile</span><br><span class="line">-rw------- 1 root root 6.0G Aug 29 09:36 /swapfile</span><br></pre></td></tr></table></figure><div class="note info flat"><p>A little tip here, you can use <code>-h</code> parameter to show space size in automatic units rather than huge numbers in Byte.</p></div><p>After that, we have to mark it as swap by <code>mkswap</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br><span class="line">Setting up swapspace version 1, size = 6 GiB (6442446848 bytes)</span><br><span class="line">no label, UUID=6175c84f-76b6-4252-a318-b50ae039e2a2</span><br></pre></td></tr></table></figure><p>Now, we can enable the swap file. And we can see the properties by <code>--show</code> parameter, instead of nothing at the very beginning.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br><span class="line">sudo swapon --show</span><br><span class="line">NAME      TYPE SIZE USED PRIO</span><br><span class="line">/swapfile file   6G   0B   -2</span><br></pre></td></tr></table></figure><h2 id="1-3-Marking-the-Swap-File-Permanent"><a href="#1-3-Marking-the-Swap-File-Permanent" class="headerlink" title="1.3 Marking the Swap File Permanent"></a>1.3 Marking the Swap File Permanent</h2><p>Although we enabled swap file, the changes are only for the current session, and will be lost if we reboot. So we can make it permanent by add it to <code>/etc/fstab</code> file.</p><p>It is recommended to back up <code>/etc/fstab</code> in case anything goes wrong.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/fstab /etc/fstab.bak</span><br></pre></td></tr></table></figure><p>We can add our new swap file information at the end of <code>/etc/fstab</code> file simply by this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/swapfile none swap sw 0 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/fstab</span><br></pre></td></tr></table></figure><h2 id="1-4-Tuning-Swap-Settings"><a href="#1-4-Tuning-Swap-Settings" class="headerlink" title="1.4 Tuning Swap Settings"></a>1.4 Tuning Swap Settings</h2><p>There are a few options that you can configure that will have an impact on your system’s performance when dealing with swap.</p><h3 id="1-4-1-Swappiness"><a href="#1-4-1-Swappiness" class="headerlink" title="1.4.1 Swappiness"></a>1.4.1 Swappiness</h3><p>The <code>swappiness</code> parameter configures how often your system swaps data out of RAM to the swap space. This is a value between 0 and 100 that represents a percentage. With values close to zero, the kernel will not swap data to the disk unless absolutely necessary. On the contrary, values that are closer to 100 will try to put more data into swap in an effort to keep more RAM space free.</p><p>We can see our current swappiness value by this command. You may see “60” as a default value.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/sys/vm/swappiness</span><br><span class="line">60</span><br></pre></td></tr></table></figure><p>For server, this value might better be close to zero. We can change this value by this command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br><span class="line">vm.swappiness = 10</span><br></pre></td></tr></table></figure><p>Still, this will persist only during the current session. You can add it to <code>/etc/sysctl.conf</code> to make it persistent.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>Then, add this line at the bottom, or change the value is entry already exists.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness=10</span><br></pre></td></tr></table></figure><h3 id="1-4-2-Cache-Pressure"><a href="#1-4-2-Cache-Pressure" class="headerlink" title="1.4.2 Cache Pressure"></a>1.4.2 Cache Pressure</h3><p>Another related value that you might want to modify is the <code>vfs_cache_pressure</code>. This setting configures how much the system will choose to cache <code>inode</code> and <code>dentry</code> information over other data. And by default it is 100, which removes cache too quickly.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/sys/vm/vfs_cache_pressure</span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>We can set this to a more conservative setting like 50, and the method is similar to how we configure swapiness.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl vm.vfs_cache_pressure=50</span><br><span class="line">vm.vfs_cache_pressure=50</span><br></pre></td></tr></table></figure><p>Also, we can make it permanent by adding an extra entry in <code>/etc/sysctl.conf</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.vfs_cache_pressure=50</span><br></pre></td></tr></table></figure><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Now that we have configured swap space for our Linux server, we won’t worry about memory problem any more. 😁</p><p>For example, in the case below, used swap space is more than free memory we have, which would likely to cause memory error before. But now, it won’t! 🥳</p><p><img src="/posts/Configure-Swap-Space-for-Linux-Server/image-20230829115505920.png" alt="image-20230829115505920"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Server Management </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deployment </tag>
            
            <tag> Linux </tag>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to C++ Game Development</title>
      <link href="/posts/Introduction-to-C-Game-Development/"/>
      <url>/posts/Introduction-to-C-Game-Development/</url>
      
        <content type="html"><![CDATA[<h1 id="C-游戏开发入门"><a href="#C-游戏开发入门" class="headerlink" title="C++ 游戏开发入门"></a>C++ 游戏开发入门</h1><blockquote><p>For BUAA 2023 Summer Semester</p><p>Copyright ©️ Tony’s Studio 2023</p></blockquote><hr><h1 id="〇、引言"><a href="#〇、引言" class="headerlink" title="〇、引言"></a>〇、引言</h1><p>本文将介绍 Windows 下的 C++ 游戏开发入门知识，主要使用 EasyX。同时，也会介绍游戏开发的一些通用内容，比如游戏框架接口等。本文内容更多是概念的介绍，具体的<a href="#5-3-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98">开发案例</a>在最后一节，其中包括一个完整的开发过程案例。</p><hr><h1 id="一、初识-Windows-图形界面"><a href="#一、初识-Windows-图形界面" class="headerlink" title="一、初识 Windows 图形界面"></a>一、初识 Windows 图形界面</h1><h2 id="1-1-什么是-Windows-GDI？"><a href="#1-1-什么是-Windows-GDI？" class="headerlink" title="1.1 什么是 Windows GDI？"></a>1.1 什么是 Windows GDI？</h2><p>Windows GDI (Graphics Device Interface) 是 Windows 窗体程序的基础，传统的图形化界面都是通过它实现的。</p><blockquote><p> 关于 Windows GDI 的更多内容详见 Microsoft 官方文档。</p><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/win32/gdi/windows-gdi">Windows GDI</a>（中文）</li><li><a href="https://learn.microsoft.com/en-us/windows/win32/gdi/windows-gdi">Windows GDI</a>（English）</li></ul></blockquote><h2 id="1-2-什么是-EasyX？"><a href="#1-2-什么是-EasyX？" class="headerlink" title="1.2 什么是 EasyX？"></a>1.2 什么是 EasyX？</h2><p>“EasyX Graphics Library 是针对 Visual C++ 的免费绘图库，支持 VC6.0 ~ VC2022，简单易用，学习成本极低，应用领域广泛。目前已有许多大学将 EasyX 应用在教学当中。” （摘自 <a href="https://easyx.cn/">EasyX 官网</a>。）</p><p>EasyX 是对 Windows GDI 的封装，使 Windows 下的绘图操作更加简便。</p><hr><h1 id="二、-安装-EasyX"><a href="#二、-安装-EasyX" class="headerlink" title="二、 安装 EasyX"></a>二、 安装 EasyX</h1><blockquote><p>EasyX 目前主流支持 Visual Studio 开发环境，对于其他开发工具需要额外安装配置。具体配置方法可参考这篇文章。</p><ul><li><a href="https://codebus.cn/bestans/easyx-for-mingw">在 CLion、Dev-C++ 或 Code::Blocks 下面配置 EasyX</a></li></ul></blockquote><h2 id="2-1-安装-Microsoft-Visual-Studio"><a href="#2-1-安装-Microsoft-Visual-Studio" class="headerlink" title="2.1 安装 Microsoft Visual Studio"></a>2.1 安装 Microsoft Visual Studio</h2><blockquote><p>抱歉，我没有使用过 Visual Studio 的中文语言包，因此我不确定选项对应的中文翻译，只好使用英文原文。🙏🏼</p></blockquote><p>Visual Studio 的具体安装步骤详见官方文档。</p><ul><li><a href="https://learn.microsoft.com/zh-cn/visualstudio/install/install-visual-studio?view=vs-2022">安装 Visual Studio</a>（中文）</li><li><a href="https://learn.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2022">Install Visual Studio</a>（English）</li></ul><p>版本选择 Visual Studio 2022 Community 即可。EasyX 最新版本不再支持 VS 预览版，如果你之前没有安装 Visual Studio，并且没有对预览版的需求，选择正式版下载即可。如果你已经安装了，或想要安装预览版，之后选择稍旧版本的 EasyX 即可。</p><p>安装时，若无其他需求，Workloads 选择下图中这一项即可。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808103629768.png" alt="image-20230808103629768" style="zoom: 67%;"><h2 id="2-2-安装-EasyX"><a href="#2-2-安装-EasyX" class="headerlink" title="2.2 安装 EasyX"></a>2.2 安装 EasyX</h2><blockquote><p>更多内容可以参考 EasyX 官网。</p><ul><li><a href="https://easyx.cn/easyx">EasyX 更新日志</a></li><li><a href="https://easyx.cn/setup">怎样安装 EasyX？</a></li><li><a href="https://docs.easyx.cn/zh-cn/setup">手动安装 EasyX</a></li></ul></blockquote><p>EasyX 最新的几个安装包链接如下，其中 2023 大暑版不再支持 VS 预览版。如果你使用预览版，选择其他版本即可。</p><ul><li><a href="https://easyx.cn/download/EasyX_2023%E5%A4%A7%E6%9A%91%E7%89%88.exe">EasyX_2023大暑版</a></li><li><a href="https://easyx.cn/download/EasyX_20220901.exe">EasyX_20220901 （上个稳定版本）</a></li><li><a href="https://easyx.cn/download/EasyX_20200902.exe">EasyX_20200902 （上个稳定版本）</a></li></ul><p>安装包比较朴实无华。😉</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808104841580.png" alt="image-20230808104841580" style="zoom:67%;"><p>运行后，安装包会自动检测 Visual Studio 版本，点击安装即可。 根据需要，可以保留该安装包，以便后续卸载使用。（不同版本的卸载是通用的。）</p><p><img src="/posts/Introduction-to-C-Game-Development/image-20230808110750015.png" alt="image-20230808110750015"></p><hr><h1 id="三、EasyX-的基本使用"><a href="#三、EasyX-的基本使用" class="headerlink" title="三、EasyX 的基本使用"></a>三、EasyX 的基本使用</h1><blockquote><p>该部分仅介绍最基本的使用方法，更多内容请参考官方文档。</p></blockquote><h2 id="3-1-阅读文档"><a href="#3-1-阅读文档" class="headerlink" title="3.1 阅读文档"></a>3.1 阅读文档</h2><p>阅读文档总是学习新技术的好方式，EasyX 也是一样。EasyX 的官方在线文档如下，你也可以在页面内下载离线文档。</p><ul><li><a href="https://docs.easyx.cn/zh-cn/">EasyX 在线文档</a></li></ul><p>文档为最新版本，和旧版本可能会有少许出入，但几乎没有影响。</p><h2 id="3-2-基本概念"><a href="#3-2-基本概念" class="headerlink" title="3.2 基本概念"></a>3.2 基本概念</h2><h3 id="3-2-1-C-or-C-？"><a href="#3-2-1-C-or-C-？" class="headerlink" title="3.2.1 C or C++ ？"></a>3.2.1 C or C++ ？</h3><p>EasyX 使用 C++ 对 Windows GDI 进行封装，因此只支持使用 C++ 开发。不过，尽管使用了 C++，其并没有大量使用 C++ 的特性，因此使用体验上与 C 差别不大，完全使用 C 语言作为 C++ 的子集也是可以的。但是，C++ 毕竟不是 C，还是推荐学习一些 C++ 知识，尤其是基本的 STL 使用，可以极大方便程序的编写。</p><h3 id="3-2-2-头文件"><a href="#3-2-2-头文件" class="headerlink" title="3.2.2 头文件"></a>3.2.2 头文件</h3><p>EasyX 提供了两个头文件，<code>easyx.h</code> 和 <code>graphics.h</code>。<code>graphics.h</code> 包含 <code>easyx.h</code>，同时支持旧接口。如果不考虑与旧版本 EasyX 的兼容性，推荐使用 <code>easyx.h</code>。</p><h3 id="3-2-3-基本使用"><a href="#3-2-3-基本使用" class="headerlink" title="3.2.3 基本使用"></a>3.2.3 基本使用</h3><p>在 Windows 控制台项目中，书写以下代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;easyx.h&gt;</span><span class="comment">// 引用 EasyX 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span>  <span class="comment">// Windows 控制台输入输出头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">640</span>, <span class="number">480</span>);    <span class="comment">// 创建绘图窗口，大小为 640x480 像素</span></span><br><span class="line">    <span class="built_in">circle</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>);  <span class="comment">// 画圆，圆心(200, 200)，半径 100</span></span><br><span class="line">    _getch();               <span class="comment">// 按任意键继续（控制台非缓冲输入，对应缓冲输入中的 getchar）</span></span><br><span class="line">    <span class="built_in">closegraph</span>();           <span class="comment">// 关闭绘图窗口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后结果如下图。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808114745355.png" alt="image-20230808114745355" style="zoom:50%;"><p>基本使用就到此为止了，EasyX 的文档写得很全面，官网也有很多范例可以参考。</p><ul><li><a href="https://codebus.cn/">CodeBus</a>（EasyX 范例程序网站）</li></ul><hr><h1 id="四、窗口-VS-控制台"><a href="#四、窗口-VS-控制台" class="headerlink" title="四、窗口 VS 控制台"></a>四、窗口 VS 控制台</h1><h2 id="4-1-基本概念"><a href="#4-1-基本概念" class="headerlink" title="4.1 基本概念"></a>4.1 基本概念</h2><p>在 Windows 开发中，有两种基本的项目类型，控制台程序（Console Application）和窗口程序（Desktop Application），大家之前写的“黑框框”就是控制台程序。现在，为了使游戏更具有更好的效果，我们可以选择创建窗口程序。</p><blockquote><p>事实上，EasyX 也可以在控制台程序中使用，正如 3.2.3 中的示例程序一样。但是由于 Windows 使用 Terminal 替代了 Console Host 作为控制台的默认程序，因此运行后任务栏会出现两个图标（即两个进程），不太美观，而且会导致窗口进程无法接收到控制台输入消息（使用控制台项目的好处就是能使用控制台输入）。因此不如直接创建窗口程序项目，尽管会因此失去控制台输入输出能力。</p><p><img src="/posts/Introduction-to-C-Game-Development/image-20230808115050292.png" alt="image-20230808115050292"></p></blockquote><p>这两种项目类型在创建项目时的选项如下。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808115546469.png" alt="image-20230808115546469" style="zoom:50%;"><h2 id="4-2-创建-Windows-窗口程序"><a href="#4-2-创建-Windows-窗口程序" class="headerlink" title="4.2 创建 Windows 窗口程序"></a>4.2 创建 Windows 窗口程序</h2><blockquote><p>Windows 控制台程序的使用方式不再赘述，相信大家已经很熟悉了。EasyX 官网只提供了 VS 2010 的使用方式，不过差别不大（可能还是有点大？）。</p><ul><li><a href="https://easyx.cn/used-in-vc2010-win32">EasyX 使用演示 - 在 VC2010 的窗口程序中使用 EasyX</a></li></ul></blockquote><h3 id="4-2-1-新建项目"><a href="#4-2-1-新建项目" class="headerlink" title="4.2.1 新建项目"></a>4.2.1 新建项目</h3><p>创建新项目，选择 4.1 中的 Windows Desktop Application，在接下来的配置中，填写你喜欢的项目名称和路径即可。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808120347264.png" alt="image-20230808120347264" style="zoom: 67%;"><blockquote><p>Visual Studio 以 Solution（解决方案）和 Project（工程）的形式管理项目，一个 Solution 可以包含多个 Project。如果你只有一个 Project，可以勾选”Place solution and project in the same directory”。</p></blockquote><h3 id="4-2-2-调整模板"><a href="#4-2-2-调整模板" class="headerlink" title="4.2.2 调整模板"></a>4.2.2 调整模板</h3><p>新建项目后，Visual Studio 会默认创建项目模板，但是这不是我们想要的，因此我们需要进行一些调整。（可以先编译运行一下，看看窗口程序长什么样子。）</p><p>首先，在 Solution Explorer 窗口中，勾选 “Show All Files”，因为 C++ 项目默认的筛选器会隐藏部分文件。然后删除 <code>.cpp</code> 文件之外的其他所有文件（源文件名会因 Project 名称而异）。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808122025708.png" alt="image-20230808122025708" style="zoom: 67%;"><p>删除后如下图。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808122249466.png" alt="image-20230808122249466" style="zoom:67%;"><p>接下来，打开 <code>.cpp</code>，将内容替换为如下代码，编译运行，即可得到 3.2.3 中的图像。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;easyx.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ LPSTR lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function">    _In_ <span class="type">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">640</span>, <span class="number">480</span>);    <span class="comment">// 创建绘图窗口，大小为 640x480 像素</span></span><br><span class="line">    <span class="built_in">circle</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>);  <span class="comment">// 画圆，圆心(200, 200)，半径 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// _getch();            // 窗口程序无法使用控制台输入输出</span></span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>);            <span class="comment">// 延时 5000 毫秒（声明在 Windows.h 中）</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">closegraph</span>();           <span class="comment">// 关闭绘图窗口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-后续编写"><a href="#4-2-3-后续编写" class="headerlink" title="4.2.3 后续编写"></a>4.2.3 后续编写</h3><p>有了 EasyX 的 <code>initgraph()</code> 函数以及其他消息处理函数，我们不再需要关心繁琐的 Windows 窗口注册，以及消息接收，因此除了调用 EasyX 的函数外，和普通的控制台程序编写没有太大的区别。😍</p><hr><h1 id="五、游戏开发入门"><a href="#五、游戏开发入门" class="headerlink" title="五、游戏开发入门"></a>五、游戏开发入门</h1><blockquote><p>这里介绍从 0 开始的游戏开发，不涉及游戏引擎的使用，但是会介绍基础的游戏框架。篇幅原因，这里仅涉及最基础的内容，更多内容还请同学们自行探索。 </p></blockquote><h2 id="5-1-项目结构与配置"><a href="#5-1-项目结构与配置" class="headerlink" title="5.1 项目结构与配置"></a>5.1 项目结构与配置</h2><h3 id="5-1-1-项目结构"><a href="#5-1-1-项目结构" class="headerlink" title="5.1.1 项目结构"></a>5.1.1 项目结构</h3><p>这里给出一个简单的项目文件接口，仅供参考，最终还是以方便管理为目的。这里，将所有 C++ 源文件 <code>.cpp</code> 放在 <code>src\</code> 目录下，将所有头文件 <code>.h</code> 放在 <code>inc\</code> 目录下，所有资源文件（图片、数据等）放在 <code>res\</code> 目录下。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808124042513.png" alt="image-20230808124042513" style="zoom: 67%;"><p>其中，<code>Main.cpp</code> 仅作为程序入口，完整内容如下。当然，作为小项目，可以在该文件中多写一些逻辑。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/game/Startup.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ LPSTR lpCmdLine,</span></span></span><br><span class="line"><span class="params"><span class="function">_In_ <span class="type">int</span> nShowCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Initialize</span>())</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">Run</span>();</span><br><span class="line"><span class="built_in">ClearUp</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-项目配置"><a href="#5-1-2-项目配置" class="headerlink" title="5.1.2 项目配置"></a>5.1.2 项目配置</h3><blockquote><p>为了方便开发，可以在 Visual Studio 中对项目的各种目录进行配置。这里列出了最基本的一些配置，更多内容目前可能还用不到，可以在将来自行探索。</p></blockquote><h4 id="5-1-2-1-输出路径"><a href="#5-1-2-1-输出路径" class="headerlink" title="5.1.2.1 输出路径"></a>5.1.2.1 输出路径</h4><p>在菜单栏的 Project 选项下，找到项目属性。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808125153874.png" alt="image-20230808125153874" style="zoom: 50%;"><p>在项目属性中，可以设置 Output Directory，即最终的可执行文件（<code>.exe</code>）的输出路径，以及编译时的临时文件输出路径（方便手动删除，尤其是包含多个 Project 的情况）。根据个人情况选择即可，此处仅供参考。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808124854599.png" alt="image-20230808124854599" style="zoom:50%;"><h4 id="5-1-2-2-字符集"><a href="#5-1-2-2-字符集" class="headerlink" title="5.1.2.2 字符集"></a>5.1.2.2 字符集</h4><p>推荐选择 Unicode 字符集，尤其是你想在程序中使用中文的话。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808125546996.png" alt="image-20230808125546996" style="zoom: 50%;"><blockquote><p>更多关于 MBCS 和 Unicode 的内容，可以参考这篇文章，其中也包含了 EasyX 中文字的输出。</p><ul><li><a href="https://codebus.cn/yangw/about-unicode">在程序中正确使用 Unicode 和 MBCS 字符集</a></li></ul></blockquote><h4 id="5-1-2-3-工作路径"><a href="#5-1-2-3-工作路径" class="headerlink" title="5.1.2.3 工作路径"></a>5.1.2.3 工作路径</h4><p>使用 Visual Studio 运行程序时，默认的工作路径是项目所在的路径（即 <code>$(ProjectDir)</code>），你可能不想让程序在这里运行，因为存档文件之类的可能需要相对路径。因此，可以在这里进行修改。</p><img src="/posts/Introduction-to-C-Game-Development/image-20230808130058767.png" alt="image-20230808130058767" style="zoom: 50%;"><h2 id="5-2-游戏框架"><a href="#5-2-游戏框架" class="headerlink" title="5.2 游戏框架"></a>5.2 游戏框架</h2><p>对于简单的游戏来说，其运行的基本流程如下图所示。</p><img src="/posts/Introduction-to-C-Game-Development/game-loop.svg"><p>首先，是游戏开始前的初始化，此处主要是加载各种资源，如图片等。加载好之后，就会进入游戏主界面。</p><blockquote><p>要做好游戏界面的切换也不容易，因此这里不做进一步说明。</p></blockquote><p>进入游戏后，则是一个主循环，在循环内部，首先接收用户输入，然后根据输入和游戏状态，对游戏内各个对象进行更新，最后将更新好的内容绘制在屏幕上，如此反复，就是一个简单的游戏了。</p><h2 id="5-3-游戏开发实战"><a href="#5-3-游戏开发实战" class="headerlink" title="5.3 游戏开发实战"></a>5.3 游戏开发实战</h2><h3 id="5-3-1-入门项目案例"><a href="#5-3-1-入门项目案例" class="headerlink" title="5.3.1 入门项目案例"></a>5.3.1 入门项目案例</h3><p>为了方便大家快速入门，我录制了视频，可以在 BiliBili 上观看。😉</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX/">BiliBili: C++ EasyX 游戏开发入门</a></p><p>分集列表：</p><ol><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=1">简介</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=2">游戏设计</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=3">创建项目</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=4">基础类型实现</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=5">界面实现（上）</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=6">界面实现（下）</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=7">游戏对象实现（上）</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=8">游戏对象实现（下）</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=9">游戏界面实现</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=10">添加图片</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=11">添加声音</a></li><li><a href="https://www.bilibili.com/video/BV1Wr4y1Z7aX?p=12">打包发布</a></li></ol><p>配套的项目代码可以在 GitHub 上找到：<a href="https://github.com/Lord-Turmoil/PingPongTutorial">PingPong Tutorial</a>。</p><h3 id="5-3-2-进阶项目案例"><a href="#5-3-2-进阶项目案例" class="headerlink" title="5.3.2 进阶项目案例"></a>5.3.2 进阶项目案例</h3><p>如果对 EasyX 开发游戏感兴趣，可以参考我做过的一个小项目，其中涉及了 EasyX 图像处理，FMOD 音频处理，以及借助了 TinyXML 的文件处理。此外，也包括一个简陋的游戏引擎。</p><ul><li>CodeBus 上的 <a href="https://codebus.cn/turmoil/dungeon">Dungeon</a></li><li>GitHub 上的 <a href="https://github.com/Lord-Turmoil/Dungeon">Dungeon</a></li><li>Gitee 上的 <a href="https://gitee.com/tonys-studio/dungeon">Dungeon</a></li></ul><h3 id="5-3-3-更多案例"><a href="#5-3-3-更多案例" class="headerlink" title="5.3.3 更多案例"></a>5.3.3 更多案例</h3><p>更多 EasyX 使用案例请访问官网。</p><ul><li><a href="https://codebus.cn/">CodeBus</a></li></ul><hr><p>开发愉快！🥳</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> Game &amp; Hobby </category>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Repo Available </tag>
            
            <tag> C/C++ </tag>
            
            <tag> EasyX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookies in ASP.NET Core</title>
      <link href="/posts/Cookies-in-ASP-NET-Core/"/>
      <url>/posts/Cookies-in-ASP-NET-Core/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In the previous post, we introduced a practical way to enable CORS in ASP.NET Core, in which configuration for cookies is mentioned. If you haven’t see that one, I recommend you spend some time now.</p><ul><li><a href="/posts/ASP-NET-CORS-Walkthrough/">ASP.NET CORS Walkthrough</a></li></ul><p>Not only requests will be affected by CORS policy, Cookies will, too. Or, you can take that Cookies are part of the requests. So in this post, I will breakdown more detail on how to properly handle Cookies in ASP.NET Core Web API.</p><hr><h1 id="1-Configure-CORS"><a href="#1-Configure-CORS" class="headerlink" title="1. Configure CORS"></a>1. Configure CORS</h1><p>Before we use Cookies, we have to configure CORS policy for it, since it is different from regular requests. For details, please refer to the post I mentioned above.</p><ul><li><a href="/posts/ASP-NET-CORS-Walkthrough/">ASP.NET CORS Walkthrough</a></li></ul><p>The only additional configuration that Cookies require is <code>AllowCredentials()</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        services.AddCors(options =&gt; &#123;</span><br><span class="line">            options.AddPolicy(</span><br><span class="line">                name: <span class="comment">/* policy name */</span>,</span><br><span class="line">                policy =&gt; &#123;</span><br><span class="line">                    policy.AllowCredentials(); <span class="comment">// for cookies</span></span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="2-“Make”-Cookies"><a href="#2-“Make”-Cookies" class="headerlink" title="2. “Make” Cookies"></a>2. “Make” Cookies</h1><div class="note info flat"><p>All Cookies operations should be done in Controllers, since it uses <code>Request</code> and <code>Response</code>, or you can pass it to somewhere else.</p></div><h2 id="2-1-Add-Cookies"><a href="#2-1-Add-Cookies" class="headerlink" title="2.1 Add Cookies"></a>2.1 Add Cookies</h2><p>You can declare a utility function to add Cookies into response. It will add a <code>Set-Cookie</code> header in response, resulting in a creation or update of the given Cookie on client side.</p><blockquote><p>Please ignore bad syntax highlight for <code>value</code>. 🥴</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCookie</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span>, <span class="built_in">double</span> expires</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    Response.Cookies.Append(key, <span class="keyword">value</span>, <span class="keyword">new</span> CookieOptions &#123;</span><br><span class="line">            HttpOnly = <span class="literal">true</span>,</span><br><span class="line">            Expires = DateTime.Now.AddDays(expires)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may notice the <code>CookieOptions</code> parameter. Well, this is somehow necessary, and important. Usually, the expire time is assigned here.</p><p>For sensitive information, which we do not want to be easily modified by client side, we can set its <code>HttpOnly</code> to true, so that this Cookie entry can only be modified by the Server with response. In this way, client side could not modify (update, delete or else) it. Although the DevTools of the browser can still do anything it likes. 🤪</p><div class="note warning flat"><p>Once you set <code>HttpOnly</code> to true, you can not modify it on client side. Use it only when necessary.</p></div><h2 id="2-2-Delete-Cookies"><a href="#2-2-Delete-Cookies" class="headerlink" title="2.2 Delete Cookies"></a>2.2 Delete Cookies</h2><p>Similar to add Cookies, you can set the expire date to a previous time in the history to make it invalid. Set <code>HttpOnly</code> correspondingly.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteCookie</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    Response.Cookies.Append(key, <span class="string">&quot;&quot;</span>, <span class="keyword">new</span> CookieOptions &#123;</span><br><span class="line">            HttpOnly = <span class="literal">true</span>,</span><br><span class="line">            Expires = DateTime.Now.AddDays(<span class="number">-1</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or, you can simply call <code>Delete()</code> on <code>Cookies</code>. In this case, we don’t need <code>HttpOnly</code>, and it can apply to both types of Cookies.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DeleteCookie</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">    Response.Cookies.Delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-Get-Cookies"><a href="#2-3-Get-Cookies" class="headerlink" title="2.3 Get Cookies"></a>2.3 Get Cookies</h2><p>Oh, wait a minute! We haven’t say how to get Cookies in requests! 😳 But quite simple, it is.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie = Request.Cookies[key];</span><br></pre></td></tr></table></figure><p>If Cookie with <code>key</code> doesn’t exist, <code>null</code> is returned.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, this is it. Yummy Cookies ~ 😉</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET CORS Walkthrough</title>
      <link href="/posts/ASP-NET-CORS-Walkthrough/"/>
      <url>/posts/ASP-NET-CORS-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><blockquote><p>“<strong>Cross-Origin Resource Sharing</strong> (<a href="https://developer.mozilla.org/en-US/docs/Glossary/CORS">CORS</a>) is an <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP">HTTP</a>-header based mechanism that allows a server to indicate any <a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin">origins</a> (domain, scheme, or port) other than its own from which a browser should permit loading resources… “</p><p style="text-align: right">- <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank">Cross-Origin Resource Sharing (CORS)</a></p></blockquote><p>CORS error is quite common if we use front-end and back-end separation, and it could be really annoying. So in this post, I’d like to introduce to you a practical way to handle this in <a href="https://dotnet.microsoft.com/en-us/apps/aspnet">ASP.NET</a> backend with <a href="https://axios-http.com/">Axios</a> in the front end.</p><hr><h1 id="1-Front-End"><a href="#1-Front-End" class="headerlink" title="1. Front End"></a>1. Front End</h1><p>Well, I guess front end actually does nothing with CORS problems, but here I’ll still show you some occasions that may encounter CORS errors.</p><p>If nothing for CORS is configured in the backend, any requests will likely run into CORS error. Even if you configured some, you may still find that cookies 🥠 are still blocked by CORS, and backend will not be able to use them.</p><p>Well, you should know about <a href="https://axios-http.com/">Axios</a>. For its configuration, you usually need a <code>baseURL</code> for convenience. And if you want to enable cookies, you also need to add <code>withCredentials</code> option.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:5168/api/&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>And… I guess there’s no more for front end.</p><hr><h1 id="2-Back-End"><a href="#2-Back-End" class="headerlink" title="2. Back End"></a>2. Back End</h1><h2 id="2-1-Project-Structure"><a href="#2-1-Project-Structure" class="headerlink" title="2.1 Project Structure"></a>2.1 Project Structure</h2><p>First, you should have your ASP.NET Core Web API project created by Visual Studio. As for the project structure, you can refer to my another post.</p><ul><li><a href="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/">Thoughts on Basic Structure of ASP.NET</a></li></ul><h2 id="2-2-NuGet-Dependency"><a href="#2-2-NuGet-Dependency" class="headerlink" title="2.2 NuGet Dependency"></a>2.2 NuGet Dependency</h2><p>We need this NuGet package to enable CORS policies.</p><img src="/posts/ASP-NET-CORS-Walkthrough/image-20230718174422855.png" alt="image-20230718174422855" style="zoom:80%;"><h2 id="2-3-Add-CORS-Policies"><a href="#2-3-Add-CORS-Policies" class="headerlink" title="2.3 Add CORS Policies"></a>2.3 Add CORS Policies</h2><p>To make options more flexible, it is recommended to add an entry in <code>appsettings.json</code>. Of course, it may vary form override files.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;CorsOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;AllowAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Origins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;http://badge.tonys-studio.top&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;http://82.156.2.152:66&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;http://localhost:66&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Then, we can simply create a class to represent this option.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CorsOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CorsSection = <span class="string">&quot;CorsOptions&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CorsPolicyName = <span class="string">&quot;DefaultPolicy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Enable &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> AllowAny &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; Origins &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Finally, in our <code>Startup.cs</code>, add CORS policy. Here I only showed lines that essentially related to CORS configuration.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">var</span> corsOptions = <span class="keyword">new</span> CorsOptions();</span><br><span class="line">        Configuration.GetRequiredSection(CorsOptions.CorsSection).Bind(corsOptions);</span><br><span class="line">        <span class="keyword">if</span> (corsOptions.Enable) &#123;</span><br><span class="line">            services.AddCors(options =&gt; &#123;</span><br><span class="line">                options.AddPolicy(</span><br><span class="line">                    name: CorsOptions.CorsPolicyName,</span><br><span class="line">                    policy =&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (corsOptions.AllowAny) &#123;</span><br><span class="line">                            policy.AllowAnyOrigin();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">foreach</span> (<span class="keyword">var</span> origin <span class="keyword">in</span> corsOptions.Origins) &#123;</span><br><span class="line">                                policy.WithOrigins(origin);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        policy.AllowAnyHeader()</span><br><span class="line">                            .AllowAnyMethod()</span><br><span class="line">                            .AllowCredentials(); <span class="comment">// if cookies needed</span></span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>For the full context of <code>Startup.cs</code>, please check out this <a href="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/">Thoughts on Basic Structure of ASP.NET</a>.</p></div><p>If you need cookies feature, and your front end request has <code>withCredentials</code> set to <code>true</code>, you have to use <code>AllowCredentials()</code> to make response carry <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials">Access-Control-Allow-Credentials</a> header.</p><div class="note warning flat"><p>If you use <code>AllowCredentials()</code>, then you can not use <code>AllowAnyOrigin()</code>. For detailed reason, please check out here:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSNotSupportingCredentials">Reason: Credential is not supported if the CORS header ‘Access-Control-Allow-Origin’ is ‘*’</a></li></ul></div><h2 id="2-4-Use-CORS-Policies"><a href="#2-4-Use-CORS-Policies" class="headerlink" title="2.4 Use CORS Policies"></a>2.4 Use CORS Policies</h2><p>Usually, it is sufficient to apply CORS policy in global scope. And this is it, just specify the name of the CORS policy you want to use.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        app.UseRouting();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        app.UseCors(CorsOptions.CorsPolicyName);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        app.UseEndpoints(endpoints =&gt; &#123;</span><br><span class="line">            endpoints.MapControllers();</span><br><span class="line">            endpoints.MapSwagger();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger flat"><p>Middlewares must be called in the right order, or some unexpected error may happen!</p></div><blockquote><p>For more information on ASP.NET middleware pipeline order, please refer to its official document:</p><ul><li><a href="https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0#middleware-order">ASP.NET Core Middleware</a></li></ul><p>And, so nice are we that we have brought the essential image here. 😉</p><p><img src="/posts/ASP-NET-CORS-Walkthrough/middleware-pipeline.svg"></p></blockquote><p>Tada! 🥳 Now your backend should be able to handle CORS requests.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>As the project moving on, I’m even more attracted by ASP.NET Core framework.😍 Its elegance, clarity touched me. And of course, with Visual Studio as the ULTIMATE IDE in the universe. 🤩</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> C# </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redirect HTTP to HTTPS via IIS</title>
      <link href="/posts/Redirect-HTTP-to-HTTPS-via-IIS/"/>
      <url>/posts/Redirect-HTTP-to-HTTPS-via-IIS/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In this article, I’ll talk about how to redirect <code>HTTP</code> to <code>HTTPS</code> in IIS. And, a briefing on how to import SSL certificate. 😏</p><hr><h1 id="1-Enable-HTTPS"><a href="#1-Enable-HTTPS" class="headerlink" title="1. Enable HTTPS"></a>1. Enable HTTPS</h1><p>Before we redirect <code>HTTP</code> to <code>HTTPS</code>, we have to acquire a SSL certificate. You can get it from your server provider, or elsewhere. Once you have it, upload it to your server first.</p><h2 id="1-1-Import-SSL-Certificate"><a href="#1-1-Import-SSL-Certificate" class="headerlink" title="1.1 Import SSL Certificate"></a>1.1 Import SSL Certificate</h2><p>Then, open your IIS homepage, and find “Server Certificate” under IIS section.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718111530871.png" alt="image-20230718111530871" style="zoom:50%;"><p>Double-click to open it, and select “Import” to import existing certificate you just uploaded.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718111725965.png" alt="image-20230718111725965" style="zoom:50%;"><p>Then, just find your certificate with suffix <code>.pfx</code>. Usually, there will be a plain text file accompanied, which contains the password for this certificate. Then, just click “OK”, and the certificate will then be imported.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718111858913.png" alt="image-20230718111858913" style="zoom:50%;"><h2 id="1-2-Enable-HTTPS-for-Website"><a href="#1-2-Enable-HTTPS-for-Website" class="headerlink" title="1.2 Enable HTTPS for Website"></a>1.2 Enable <code>HTTPS</code> for Website</h2><p>Now, we can enable <code>HTTPS</code> for our website.</p><div class="note warning flat"><p>Usually, free certificate may only apply to host name of <code>www</code> and port 443.</p></div><p>Open the website you want to use <code>HTTPS</code>, and click “Bind”.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718112438913.png" alt="image-20230718112438913" style="zoom:50%;"><p>Then, in the popup dialog, choose “Add”, and select type of “https” with the certificate you just added. After these, just click “OK”.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718113207017.png" alt="image-20230718113207017" style="zoom:50%;"><p>Now, you can visit this site using <code>https://</code> or port 443.</p><hr><h1 id="2-Configure-Auto-Redirect"><a href="#2-Configure-Auto-Redirect" class="headerlink" title="2. Configure Auto Redirect"></a>2. Configure Auto Redirect</h1><p>After <code>HTTPS</code> enabled, you may found that it could not automatically redirect <code>HTTP</code> request. So, we have to configure it a step further.</p><h2 id="2-1-URL-Rewrite"><a href="#2-1-URL-Rewrite" class="headerlink" title="2.1 URL Rewrite"></a>2.1 URL Rewrite</h2><p>To achieve this, we have to download IIS URL Rewrite tool. You can find download links here.</p><ul><li><a href="https://www.iis.net/downloads/microsoft/url-rewrite">URL Rewrite</a></li></ul><p>Just scroll down to the bottom of the page, and you’ll find plenty of installers. After installation, you will see “URL Rewrite” option in homepage.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718113905623.png" alt="image-20230718113905623" style="zoom:50%;"><h2 id="2-2-Add-Rewrite-Rule"><a href="#2-2-Add-Rewrite-Rule" class="headerlink" title="2.2 Add Rewrite Rule"></a>2.2 Add Rewrite Rule</h2><blockquote><p>Reference: <a href="https://stackoverflow.com/questions/51063815/redirect-http-to-https-via-iis">Redirect HTTP to HTTPS via IIS</a></p></blockquote><p>Open the homepage of your website, and then open “URL Rewrite” and click “Add Rule”, then “Blank Rule”.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718114221232.png" alt="image-20230718114221232" style="zoom:50%;"><h3 id="2-2-1-Matching-URL"><a href="#2-2-1-Matching-URL" class="headerlink" title="2.2.1 Matching URL"></a>2.2.1 Matching URL</h3><p>In the first section, we choose “Matches the pattern”, and using “Wildcards”. And set pattern to <code>*</code>.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718164016543.png" alt="image-20230718164016543" style="zoom: 67%;"><h3 id="2-2-2-Condition"><a href="#2-2-2-Condition" class="headerlink" title="2.2.2 Condition"></a>2.2.2 Condition</h3><p>In condition, we add an <code>HTTPS</code> condition. I don’t know why, but the pattern here should not be <code>*</code>.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718165507592.png" alt="image-20230718165507592" style="zoom:67%;"><div class="note info flat"><p>I really don’t know why the pattern here should not be <code>*</code>. I tried to use that at first, but it won’t work, and even make both  <code>http://</code> and <code>https://</code> unavailable. 🤒</p></div><h3 id="2-2-3-Action"><a href="#2-2-3-Action" class="headerlink" title="2.2.3 Action"></a>2.2.3 Action</h3><p>At last, in action section, set “Redirect” as  action type, and set redirect URL to <code>https://&#123;HTTP_HOST&#125;&#123;REQUEST_URI&#125;</code>. Check “Append Query String”, and select a redirection type.</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230815113638828.png" alt="image-20230815113638828" style="zoom:67%;"><div class="note info flat"><p>301 is a better redirection type when you choose to redirect a <code>http</code> site to a <code>https</code> one. For more information on redirection type, you can refer to this: <a href="https://www.domain.com/blog/what-is-a-redirect/">What Is a 301 or 302 Redirect?</a></p></div><p>At last, your rewrite rule should look like this. And your website will be automatically redirected to <code>https://</code>.🥳</p><img src="/posts/Redirect-HTTP-to-HTTPS-via-IIS/image-20230718170124615.png" alt="image-20230718170124615" style="zoom: 67%;"><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Tada! Enjoy your HTTPS site! 🤪</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Web Servers &amp; Deployment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deployment </tag>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Path Aliases in React/Vue With Vite</title>
      <link href="/posts/Configure-Path-Aliases-in-React-Vue-with-Vite/"/>
      <url>/posts/Configure-Path-Aliases-in-React-Vue-with-Vite/</url>
      
        <content type="html"><![CDATA[<blockquote><p> I learned much from this article:</p><ul><li><a href="https://koha.hashnode.dev/how-to-configure-path-aliases-vite-vue-react#heading-why-path-aliases">How to configure path aliases Vite + Vue&#x2F;React</a></li></ul></blockquote><h1 id="Why-Use-Path-Aliases"><a href="#Why-Use-Path-Aliases" class="headerlink" title="Why Use Path Aliases"></a>Why Use Path Aliases</h1><p>In our React or Vue project, we often import tons  of components in our JavaScript files. It would be nice if we use <code>npm</code> or <code>yarn</code> to manage then, but… when it comes to our custom ones, the import statements will become something like this: <code>../../..</code>. And it would be a nightmare if we want to refactor our file structure.😱</p><p>With path aliases, we can use a simple prefix as the root folder of our project, so that import statements could be simpler, and our refactoring will also be much more easier.</p><hr><h1 id="Configure-Path-Aliases"><a href="#Configure-Path-Aliases" class="headerlink" title="Configure Path Aliases"></a>Configure Path Aliases</h1><p>In React&#x2F;Vue project processed by Vite, things are much easy. And if you create the project with Visual Studio, the front end will be managed by Vite by default.</p><div class="note primary flat"><p>Although it would be better to write front end code in Visual Studio Code, Visual Studio can create projects based on its templates while managing <code>npm</code> packages, which is extremely convenient.</p></div><p>First of all, I’d like to give you a brief look of my project structure, which is quite common. Actually you just need to pay attention to <code>src/</code> folder and <code>vite.config.js</code>.</p><img src="/posts/Configure-Path-Aliases-in-React-Vue-with-Vite/image-20230716213632054.png" alt="image-20230716213632054" style="zoom:67%;"><h2 id="Step-1-Modify-Vite-Configuration"><a href="#Step-1-Modify-Vite-Configuration" class="headerlink" title="Step 1. Modify Vite Configuration"></a>Step 1. Modify Vite Configuration</h2><p>Well, the primary objective is to make Vite recognize our path aliases. So, open <code>vite.config.js</code> in our project root, and replace its default resolve to this. The tilde (<code>~</code>) here is our prefix, and this alias tells Vite to map <code>~/*</code> to <code>src/</code>, while <code>src/</code> is the a path from <code>vite.config.js</code> itself.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: [&#123; <span class="attr">find</span>: <span class="string">&quot;~&quot;</span>, <span class="attr">replacement</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>) &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>Tilde (<code>~</code>) is not the only option, in fact, you can use any thing, e.g. <code>@</code> or whatever you like, as long as it doesn’t mix up with normal pathnames.</p></div><h2 id="Step-2-Use-Path-Aliases"><a href="#Step-2-Use-Path-Aliases" class="headerlink" title="Step 2. Use Path Aliases"></a>Step 2. Use Path Aliases</h2><p>Now that Vite can recognize our path aliases, we can use it in our import statements. For example, here is my <code>src/</code> folder structure, and we’re gonna use this <code>ExpandFab</code> component.</p><img src="/posts/Configure-Path-Aliases-in-React-Vue-with-Vite/image-20230716214522757.png" alt="image-20230716214522757" style="zoom:67%;"><p>With path aliases, as long as component position not change, we can use the same import statement anywhere. And of course, if you configure alias path more precisely, it is possible to change only the alias mapping when doing refactor.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ExpandFab</span> <span class="keyword">from</span> <span class="string">&#x27;~/components/utility/ExpandFab&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="Step-3-Add-VSCode-Configuration"><a href="#Step-3-Add-VSCode-Configuration" class="headerlink" title="Step 3. Add VSCode Configuration"></a>Step 3. Add VSCode Configuration</h2><p>There is a drawback of path aliases, that code intelliSense may not recognize it.🥴But, if you use Visual Studio Code as your editor, there’s an extra bonus for you.</p><p>By simply adding a <code>jsconfig.json</code> file to your project root, Visual Studio Code can understand what we’re doing. It can be really simple. Just remember to replace the prefix and target path with your own. 😉</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;~/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;./src/*&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Now, Visual Studio Code can recognize your custom aliases.</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, this is it. Enjoy coding! 🥳</p><blockquote><p>Why! Why Visual Studio could not support these! At least the auto complete for import… The code could have become more robust with much more powerful intelliSense and analyzer. 😣</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Configuration </tag>
            
            <tag> React </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thoughts on Basic Structure of ASP.NET Core Web API</title>
      <link href="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/"/>
      <url>/posts/Thoughts-on-Basic-Structure-of-ASP-NET/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><blockquote><p> The inspiration of this post comes from this article.</p><ul><li><a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6#a-domain-driven-api">Maybe it’s time to rethink our project structure with .NET 6</a></li></ul></blockquote><p>I’ve been always looking forward to develop backend with ASP.NET Core, but when I’m actually doing this, I found the start up being a little tough. So I decide just write things down as a memo.</p><hr><h1 id="1-Setup-Project"><a href="#1-Setup-Project" class="headerlink" title="1. Setup Project"></a>1. Setup Project</h1><h2 id="1-1-Create-Project"><a href="#1-1-Create-Project" class="headerlink" title="1.1 Create Project"></a>1.1 Create Project</h2><p>Well, of course, we use Visual Studio as our IDE. Create a project using “ASP.NET Core Web API” template. If you want a frontend, just use “React and ASP.NET Core (Preview)”. Although in preview, I think it is quite awesome.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706150158036.png" alt="image-20230706150158036" style="zoom: 50%;"><p>Then, for additional information, just leave it default is OK. Or you can just select another framework.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706150917625.png" alt="image-20230706150917625" style="zoom: 67%;"><p>After creation, you will get a structure like this. But this structure is apparently not what we like.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706151441899.png" alt="image-20230706151441899" style="zoom:80%;"><h2 id="1-2-Essential-NuGet-Packages"><a href="#1-2-Essential-NuGet-Packages" class="headerlink" title="1.2 Essential NuGet Packages"></a>1.2 Essential NuGet Packages</h2><p>Well, you can download these NuGet packages later, but a quick preview of them may help you know what package you can utilize.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706151848530.png" alt="image-20230706151848530" style="zoom:80%;"><p>Well, <code>Microsoft.EntityFrameworkCore</code> packages enables the powerful Entity Framework Core, which is an excellent ORM framework. And then <code>MySql.EntityFrameworkCore</code> add support for MySQL database connection. Then, if you got CORS problem, you’ll need <code>Microsoft.AspNetCore.Cors</code> package. At last, <code>AutoMapper</code> is an extraordinary convenient tool for you to map entity to Data Transfer Object (DTO).</p><hr><h1 id="2-Refactor-Project-Structure"><a href="#2-Refactor-Project-Structure" class="headerlink" title="2. Refactor Project Structure"></a>2. Refactor Project Structure</h1><h2 id="2-1-Application-Entry"><a href="#2-1-Application-Entry" class="headerlink" title="2.1 Application Entry"></a>2.1 Application Entry</h2><p>In .NET 6, the <code>Startup.cs</code> is removed, and replaced by <code>Program.cs</code> alone. But, personally, I don’t prefer this, as it looks messy.</p><p>So first, we refactor <code>Program.cs</code>. Now it looks better.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateHostBuilder(args).Build().Run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Host.CreateDefaultBuilder(args)</span><br><span class="line">            .ConfigureWebHostDefaults(webBuilder =&gt; &#123;</span><br><span class="line">                webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, we create <code>Startup.cs</code> next to <code>Program.cs</code>. An brief overview of this file is like this. And you can expand the complete version.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>Startup.cs</summary><div class="toggle-content"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dependency Injection</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        services.AddCors();</span><br><span class="line"></span><br><span class="line">        ConfigureDatabase&lt;BadgeContext&gt;(services);</span><br><span class="line">        services.AddUnitOfWork&lt;BadgeContext&gt;();</span><br><span class="line">        services.RegisterModules();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Controllers</span></span><br><span class="line">        services.AddControllers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Swagger service</span></span><br><span class="line">        services.AddSwaggerGen(c =&gt; &#123;</span><br><span class="line">            c.SwaggerDoc(<span class="string">&quot;v1&quot;</span>, <span class="keyword">new</span> OpenApiInfo() &#123; Title = <span class="string">&quot;SimpleToDo.Api&quot;</span>, Version = <span class="string">&quot;v1&quot;</span> &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// AutoMapper</span></span><br><span class="line">        <span class="keyword">var</span> autoMapperConfig = <span class="keyword">new</span> MapperConfiguration(config =&gt; &#123;</span><br><span class="line">            config.AddProfile(<span class="keyword">new</span> AutoMapperProfile());</span><br><span class="line">        &#125;);</span><br><span class="line">        services.AddSingleton(autoMapperConfig.CreateMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.IsDevelopment()) &#123;</span><br><span class="line">            app.UseDeveloperExceptionPage();</span><br><span class="line">            app.UseSwagger();</span><br><span class="line">            app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(<span class="string">&quot;/swagger/v1/swagger.json&quot;</span>, <span class="string">&quot;Demo.Api v1&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        app.UseHttpsRedirection();</span><br><span class="line">        app.UseRouting();</span><br><span class="line">        app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Must be placed between UseRouting and UseEndpoints</span></span><br><span class="line">        app.UseCors(policy =&gt; &#123;</span><br><span class="line">            policy.AllowAnyOrigin()</span><br><span class="line">                .AllowAnyMethod()</span><br><span class="line">                .AllowAnyHeader();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        app.UseEndpoints(endpoints =&gt; &#123;</span><br><span class="line">            endpoints.MapControllers();</span><br><span class="line">            endpoints.MapSwagger();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureDatabase</span>&lt;<span class="title">TContext</span>&gt;(<span class="params">IServiceCollection services</span>) <span class="keyword">where</span> TContext : DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> profile = Configuration[<span class="string">&quot;Profile&quot;</span>];</span><br><span class="line">        <span class="keyword">var</span> database = Configuration.GetConnectionString(<span class="string">&quot;Database&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> connection = Configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (database) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;MySQL&quot;</span>:</span><br><span class="line">                services.AddDbContext&lt;TContext&gt;(option =&gt; &#123;</span><br><span class="line">                    option.UseMySQL(connection);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;SQLite&quot;</span>:</span><br><span class="line">                services.AddDbContext&lt;TContext&gt;(option =&gt; &#123;</span><br><span class="line">                    option.UseSqlite(connection);</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">$&quot;Invalid database: <span class="subst">&#123;database&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="2-2-Application-Configuration"><a href="#2-2-Application-Configuration" class="headerlink" title="2.2 Application Configuration"></a>2.2 Application Configuration</h2><p>The configuration for the project is in <code>appsettings.json</code>, and it can be overwritten depends on the environment. So there are actually three configuration files.</p><p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706153839776.png" alt="image-20230706153839776"></p><blockquote><p>You may need to create <code>appsettings.Production.json</code> manually.</p></blockquote><p>The content of the configuration can be like this.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Profile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Development&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Logging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;LogLevel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Information&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Microsoft.AspNetCore&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Warning&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SQLite&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;DefaultConnection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DataSource=Data\\BadgeBoard.db;Cache=Shared&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>And if you use MySQL, the connection string for MySQL could be like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;server=&#123;ip&#125;;database=&#123;database&#125;;user=&#123;user&#125;;password=&#123;password&#125;&quot;</span><br></pre></td></tr></table></figure><p>If you’re not using the default 3306 port, then the connection may look like this.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;server=&#123;ip&#125;;port=&#123;port&#125;;database=&#123;database&#125;;user=&#123;user&#125;;password=&#123;password&#125;&quot;</span><br></pre></td></tr></table></figure><p>Which <code>appsettings.json</code> is used is based on the environment value <code>ASPNETCORE_ENVIRONMENT</code>. That is to say, the application will load <code>appsettings.&#123;ASPNETCORE_ENVIRONMENT&#125;.json</code>. If not set, will load <code>appsettings.json</code>.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20231214234026705.png" alt="image-20231214234026705" style="zoom: 67%;"><p>There’s another configuration file called <code>launchSettings.json</code>, which mainly configures the port of the API.</p><p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706154636480.png" alt="image-20230706154636480"></p><h2 id="2-3-Project-Structure"><a href="#2-3-Project-Structure" class="headerlink" title="2.3 Project Structure"></a>2.3 Project Structure</h2><h3 id="2-3-1-Overview"><a href="#2-3-1-Overview" class="headerlink" title="2.3.1 Overview"></a>2.3.1 Overview</h3><p>Well, according to <a href="https://timdeschryver.dev/blog/maybe-its-time-to-rethink-our-project-structure-with-dot-net-6#a-domain-driven-api">Maybe it’s time to rethink our project structure with .NET 6</a>, we can use module to manage our project. And based on the idea in this article, we can refactor our project like this.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706155559379.png" alt="image-20230706155559379" style="zoom:80%;"><p>Let me have a brief elaboration. <code>Data\</code> is for the SQLite database file, and <code>Migrations\</code> is for the migration files created by EF Core. <code>Extensions\</code> holds all common utils or base classes (I’ll explain this later). And <code>Modules\</code> is where all our business module are placed. For <code>Templates\</code>, I adopted this concept from Django, where template HTML files are saved.</p><h3 id="2-3-2-Extensions"><a href="#2-3-2-Extensions" class="headerlink" title="2.3.2 Extensions"></a>2.3.2 Extensions</h3><p>Well first, an overall glance. The most important and fundamental packages are <code>Module</code> and <code>UnitOfWork</code>.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706162245071.png" alt="image-20230706162245071" style="zoom:67%;"><h4 id="2-3-2-1-Module"><a href="#2-3-2-1-Module" class="headerlink" title="2.3.2.1 Module"></a>2.3.2.1 Module</h4><p><code>Module</code> holds all base classes and interfaces required for our modules. For example, the <code>IModule</code> interface.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IServiceCollection <span class="title">RegisterModule</span>(<span class="params">IServiceCollection services</span>)</span>;</span><br><span class="line">    <span class="function">IEndpointRouteBuilder <span class="title">MapEndpoints</span>(<span class="params">IEndpointRouteBuilder endpoints</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseModule</span> : <span class="title">IModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IEndpointRouteBuilder <span class="title">MapEndpoints</span>(<span class="params">IEndpointRouteBuilder endpoints</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> endpoints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IServiceCollection <span class="title">RegisterModule</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, for web API, we often use MVC pattern, and usually relay actual logic from Controller to Service class. Here is the main place where Dependency Injection (DI) is used.</p><blockquote><p>For more information about Dependency Injection in ASP.NET, see:</p><ul><li><a href="/posts/Dependency-Injection-in-ASP-NET/">Dependency Injection in ASP.NET</a></li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseController</span>&lt;<span class="title">TController</span>&gt; : <span class="title">Controller</span> <span class="keyword">where</span> <span class="title">TController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> ILogger&lt;TController&gt; _logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseController</span>(<span class="params">ILogger&lt;TController&gt; logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IServiceProvider _provider;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IUnitOfWork _unitOfWork;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IMapper _mapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BaseService</span>(<span class="params">IServiceProvider provider, IUnitOfWork unitOfWork, IMapper mapper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _provider = provider;</span><br><span class="line">        _unitOfWork = unitOfWork;</span><br><span class="line">        _mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-Unit-Of-Work"><a href="#2-3-2-2-Unit-Of-Work" class="headerlink" title="2.3.2.2 Unit Of Work"></a>2.3.2.2 Unit Of Work</h4><p>Another important part is Unit of Work Pattern, which often comes along with Repository Pattern. For detailed information, you can refer to <a href="https://learn.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application">Microsoft official documentation</a>.</p><blockquote><p>Here, I use the implementation provided by Arch.</p><p>GitHub: <a href="https://github.com/Arch/UnitOfWork">Arch&#x2F;UnitOfWork</a></p></blockquote><h4 id="2-3-2-3-Response"><a href="#2-3-2-3-Response" class="headerlink" title="2.3.2.3 Response"></a>2.3.2.3 Response</h4><p>You may also want to wrap up your responses. Here I offer a simple but practical way.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiResponse</span> : <span class="title">JsonResult</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ApiResponse</span>(<span class="params"><span class="built_in">int</span> code, <span class="built_in">object</span>? <span class="keyword">value</span></span>) : <span class="title">base</span>(<span class="params"><span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StatusCode = code;<span class="comment">// code is StatusCodes</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With this, you can extend other responses, for example,</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoodResponse</span> : <span class="title">ApiResponse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodResponse</span>(<span class="params"><span class="built_in">object</span>? <span class="keyword">value</span></span>) : <span class="title">base</span>(<span class="params">StatusCodes.Status200OK, <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BadRequestResponse</span> : <span class="title">ApiResponse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestResponse</span>(<span class="params"><span class="built_in">object</span>? <span class="keyword">value</span></span>) : <span class="title">base</span>(<span class="params">StatusCodes.Status400BadRequest, <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, for the <code>value</code>, it can be this, which will later be wrapped as DTO.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiResponseData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ApiResponseMeta Meta &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span>? Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiResponseMeta</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The DTO is extended can be like this.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoodDto</span> : <span class="title">ApiResponseData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodDto</span>(<span class="params"><span class="built_in">string</span> message = <span class="string">&quot;Nice request&quot;</span>, <span class="built_in">object</span>? data = <span class="literal">null</span></span>) : <span class="title">base</span>(<span class="params"><span class="number">0</span>, message, data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Modules"><a href="#2-3-3-Modules" class="headerlink" title="2.3.3 Modules"></a>2.3.3 Modules</h3><p>Again, first an overview. We put all our modules under <code>Modules/</code> packages, and each module has its own models, controllers, services and else.</p><img src="/posts/Thoughts-on-Basic-Structure-of-ASP-NET/image-20230706162649477.png" alt="image-20230706162649477" style="zoom:80%;"><h4 id="2-3-3-1-Database-Context"><a href="#2-3-3-1-Database-Context" class="headerlink" title="2.3.3.1 Database Context"></a>2.3.3.1 Database Context</h4><p>First, is two file outside all modules. There must be a context for database support, as we have already seen above in <code>Startup.ConfigureServices</code>.</p><blockquote><p>The constructor here is not always empty, though. If you use Fluent API to define properties of your entities, you will have to do that. But I prefer data annotation. Read more in my other post.</p><ul><li><a href="/posts/Data-Annotation-of-EF-Core/">Data Annotation in EF Core</a></li></ul></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BadgeContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;User&gt; Users &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;FavoriteUser&gt; FavoriteUsers &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadgeContext</span>(<span class="params">DbContextOptions&lt;BadgeContext&gt; options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-2-Auto-Mapper-Profile"><a href="#2-3-3-2-Auto-Mapper-Profile" class="headerlink" title="2.3.3.2 Auto Mapper Profile"></a>2.3.3.2 Auto Mapper Profile</h4><p>Another global configuration file is <code>AutoMapperProfile.cs</code>. This one defines all mapper from entity to DTO. This is really convenient, since it easily support nested mapping. <code>ReverseMap</code> makes reverse mapping available.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutoMapperProfile</span> : <span class="title">MapperConfigurationExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutoMapperProfile</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateMap&lt;User, UserDto&gt;().ReverseMap();</span><br><span class="line">        CreateMap&lt;UserPreference, UserPreferenceDto&gt;().ReverseMap();</span><br><span class="line">        CreateMap&lt;UserInfo, UserInfoDto&gt;().ReverseMap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-3-Business-Module"><a href="#2-3-3-3-Business-Module" class="headerlink" title="2.3.3.3 Business Module"></a>2.3.3.3 Business Module</h4><p>Now, for our actual modules. Notice that, each module must have a main module file to load corresponding module, as mentioned above. For example, it looks like this. Its main purpose is to link entities with their repositories, and use IoC to prepare services to be injected by DI.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserModule</span> : <span class="title">BaseModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> IServiceCollection <span class="title">RegisterModule</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        services.AddCustomRepository&lt;User, UserRepository&gt;()</span><br><span class="line">            .AddCustomRepository&lt;UserPreference, UserPreferenceRepository&gt;()</span><br><span class="line">            .AddCustomRepository&lt;UserInfo, UserInfoRepository&gt;()</span><br><span class="line">            .AddCustomRepository&lt;FavoriteUser, FavoriteUserRepository&gt;();</span><br><span class="line"></span><br><span class="line">        services.AddTransient&lt;ILoginService, LoginService&gt;()</span><br><span class="line">            .AddTransient&lt;IRegisterService, RegisterService&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, in controller, just relay logic to services.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ApiController</span>]</span><br><span class="line">[<span class="meta">Route(<span class="string">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RegisterController</span> : <span class="title">BaseController</span>&lt;<span class="title">RegisterController</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IRegisterService _service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterController</span>(<span class="params">ILogger&lt;RegisterController&gt; logger, IRegisterService service</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[action]&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ApiResponse&gt; <span class="title">Register</span>(<span class="params">[FromBody] RegisterDto dto</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> _service.Register(dto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Above controller will have a route called <code>api/Register/Register</code> (with upper case). However, you can use custom string instead of <code>[ ]</code>.</p></blockquote><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I’m still a noob, and it is as far as I can describe. So… let it be.</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> ASP.NET </category>
          
          <category> Software Engineering </category>
          
          <category> Best Practices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection in ASP.NET</title>
      <link href="/posts/Dependency-Injection-in-ASP-NET/"/>
      <url>/posts/Dependency-Injection-in-ASP-NET/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><div class="note primary flat"><p>.NET supports the dependency injection (DI) software design pattern, which is a technique for achieving <a href="https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/architectural-principles#dependency-inversion">Inversion of Control (IoC)</a> between classes and their dependencies. Dependency injection in .NET is a built-in part of the framework, along with configuration, logging, and the options pattern.</p></div><a class="btn-beautify block right purple larger" href="https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection" title="Microsoft Learn"><i class="fas fa-up-right-from-square"></i><span>Microsoft Learn</span></a><p>In this article, I’ll talk about the basic use of DI in a .NET Core Web API project.</p><hr><h1 id="Further-Explanation"><a href="#Further-Explanation" class="headerlink" title="Further Explanation"></a>Further Explanation</h1><p>Well, although the concept is easy to understand, but you may still feel confused when coding. For example, let’s take a look at <code>Startup.cs</code>, in this file, you’ll see many interfaces, and yet you never find a place that these parameters are passed to <code>Startup</code> class. How does it work? 😵‍💫</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Well, this is how DI works, but it is more than just DI. Because here, DI is done by .NET framework automatically, so you don’t feel its presence.</p><div class="note warning flat"><p>Here, DI is done automatically, but it doesn’t mean that DI is always done automatically! For your own classes, you still have to manually resolve specific instances for injection.</p></div><hr><h1 id="Configure-DI"><a href="#Configure-DI" class="headerlink" title="Configure DI"></a>Configure DI</h1><p>Dependency Injection is used to achieve IoC, and Microsoft .NET framework already provided us a default implementation, which is the <code>services</code> of type <code>IServiceCollection</code>. Just like its name, it is just the container which holds all “things” to be resolved for injection. When we want to resolve things we’ve put into it, we’ll need its friend <code>IServiceProvider</code>. We can get it by <code>IServiceCollection.BuildServiceProvider()</code> or simply by another DI.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> provider = services.BuildServiceProvider();</span><br></pre></td></tr></table></figure><p>So, since this <code>IServiceCollection</code> is a container, we should put things into it before we get it from it. <del>Of course</del></p><p>As you may have get it before, DI simply get the corresponding implementation of the interface you provided. So what you add into it is actually a mapping from an interface to a concreate implementation class. DI will then create such instance for you when corresponding interface encountered.</p><p>There are three strategies for instantiation - transient, scoped and singleton. Easy to understand, transient instance will be created every time, scoped will only be created once every scope (might be a request), while singleton, you know, only one across the whole application. If you are concerned about thread safety, you’d better choose transient.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// There are many overloads, here is only the common case</span></span><br><span class="line">IServiceCollection IServiceCollection.AddTransient&lt;IClass, Class&gt;();</span><br><span class="line">IServiceCollection IServiceCollection.AddScoped&lt;IClass, Class&gt;(...);</span><br><span class="line">IServiceCollection IServiceCollection.AddSingleton&lt;IClass&gt;(Instance);</span><br></pre></td></tr></table></figure><p>After we registered mapping to the collection, we can then resolve them by its <code>IServiceProvider</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IClass? IServiceProvider.GetService&lt;IClass&gt;();</span><br><span class="line">IClass IServiceProvider.GetRequiredService&lt;IClass&gt;();</span><br></pre></td></tr></table></figure><hr><h1 id="Automatic-DI"><a href="#Automatic-DI" class="headerlink" title="Automatic DI"></a>Automatic DI</h1><p>There are some common classes where DI will be applied automatically - Startup, Controllers and Services. We’ve seen Startup above, so here let’s have a look at Controllers and Services. Some properties and annotations are omitted to simplify the code.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        services.AddTransient&lt;IRegisterService, RegisterService&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RegisterController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;TController&gt; _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IRegisterService _service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterController</span>(<span class="params">ILogger&lt;RegisterController&gt; logger, IRegisterService service</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _service = service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RegisterService</span> : <span class="title">IRegisterService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IServiceProvider _provider;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IUnitOfWork _unitOfWork;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">readonly</span> IMapper _mapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RegisterService</span>(<span class="params">IServiceProvider provider, IUnitOfWork unitOfWork, IMapper mapper</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _provider = provider;</span><br><span class="line">        _unitOfWork = unitOfWork;</span><br><span class="line">        _mapper = mapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controllers are created by .NET framework, and the framework can automatically detect the parameters and use DI to inject correct instance to it. And the <code>IRegisterService</code> here is what we registered in <code>Startup.cs</code>, which will also be resolved automatically then.</p><p>There may be some other default interfaces for injection, but for now, I haven’t met them. So I guess it could be quite sufficient. 😉</p><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Dependency Injection and Inverse of Control are design patterns, not just implementations. So the idea behind them is what matters most. 😌</p><p>I think this is already a good start off. Hope that I can excel later.</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> ASP.NET </category>
          
          <category> Software Engineering </category>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Annotation of EF Core</title>
      <link href="/posts/Data-Annotation-of-EF-Core/"/>
      <url>/posts/Data-Annotation-of-EF-Core/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In this article, I’ll talk about data annotation in Entity Framework Core, including data type, basic use of primary and foreign key. I won’t go too far, just simple usage.</p><blockquote><p>Because what we do in code is designing logical data model, the eventual result may differ depends on the database you use. In this article, the physical database I used is SQLite, by default.</p><p>One more thing, you can also use <a href="https://learn.microsoft.com/en-us/ef/ef6/modeling/code-first/fluent/types-and-properties">Fluent API</a> to achieve the same purpose, but here I’ll only talk about data annotation.</p></blockquote><p>If you want to learn this a step further, I recommend a great place for you.</p><ul><li><a href="https://www.learnentityframeworkcore.com/">Learn Entity Framework Core</a></li></ul><hr><h1 id="Data-Annotation"><a href="#Data-Annotation" class="headerlink" title="Data Annotation"></a>Data Annotation</h1><h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><p>First, we can simply create an entity without any annotation, which is totally OK. But what’s the default behavior?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span>[] PasswordHash &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsAdmin &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For <code>int</code>, <code>bool</code>, these are easy to convert into physical database. However, what about other types? By default, <code>string</code> and <code>byte[]</code> will be mapped to <code>varchar</code> and <code>varbinary</code> of maximum length. And all of the fields are set to <code>NOT NULL</code>. Others including primary key and whatever.</p><p>If you want to configure these by your self, then data annotation is what you want.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>] <span class="comment">// primary key</span></span><br><span class="line">    [<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Identity)</span>] <span class="comment">// auto create</span></span><br><span class="line">    <span class="keyword">public</span> Guid Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Column(TypeName = <span class="string">&quot;varchar(63)&quot;</span>)</span>] <span class="comment">// manual data type</span></span><br><span class="line">    [<span class="meta">Required</span>] <span class="comment">// required field</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Username &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Column(TypeName = <span class="string">&quot;varchar(63)&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">EmailAddress</span>] <span class="comment">// optional option</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// optional field</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Column(TypeName = <span class="string">&quot;varbinary(256)&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">byte</span>[] PasswordHash &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With these, you can declare almost all common types of data.</p><hr><h2 id="Foreign-Key"><a href="#Foreign-Key" class="headerlink" title="Foreign Key"></a>Foreign Key</h2><blockquote><p>Reference: <a href="https://www.learnentityframeworkcore.com/configuration/data-annotation-attributes/foreignkey-attribute">Foreign Key Attribute</a></p></blockquote><p>This is the most confusing part when I first come across EF Core. First of all, you should get to know two properties, <strong>Foreign Key</strong> property and <strong>Reference Navigation</strong> property.</p><p>To put it simple, <strong>Foreign Key</strong> property is the actual column that will appear in the database, it is what we write in creating a table via SQL statement. It is the primary key of another table, or entity here. Then <strong>Reference Navigation</strong> property will not appear in database (actually it cannot since it is an object), and merely a method to navigate through entities, to the table it references.</p><h3 id="One-to-One"><a href="#One-to-One" class="headerlink" title="One-to-One"></a>One-to-One</h3><blockquote><p>Reference: <a href="https://www.learnentityframeworkcore.com/configuration/one-to-one-relationship-configuration">One-to-One Relationship</a></p></blockquote><p>For basic use of foreign key, it comes with two members - one is the referenced key, the other is the reference navigation. It’s OK to only declared in one entity, but it will then become a one-way reference.</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">On Reference Navigation</button><button type="button" class="tab">On Foreign Key</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> AddressId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    [<span class="meta">ForeignKey(<span class="string">&quot;AddressId&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Address Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Street &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> No &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span> &#125;</span><br><span class="line">    [<span class="meta">ForeignKey(<span class="string">&quot;UserId&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> User User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">ForeignKey(<span class="string">&quot;Address&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> AddressId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Address Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Street &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> No &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ForeignKey(<span class="string">&quot;User&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> User User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="One-to-Many"><a href="#One-to-Many" class="headerlink" title="One-to-Many"></a>One-to-Many</h3><blockquote><p>Reference: <a href="https://www.learnentityframeworkcore.com/configuration/one-to-many-relationship-configuration">One-to-Many Relationship</a></p></blockquote><p>One to many relationship usually requires no extra configurations.</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">One Way</button><button type="button" class="tab">Both Way</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Address&gt; Addresses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Street &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> No &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;Address&gt; Addresses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Address</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Key</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Street &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> No &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span> &#125;</span><br><span class="line">    [<span class="meta">ForeignKey(<span class="string">&quot;UserId&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> User User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="Many-to-Many"><a href="#Many-to-Many" class="headerlink" title="Many-to-Many"></a>Many-to-Many</h3><blockquote><p>Reference: <a href="https://www.learnentityframeworkcore.com/configuration/many-to-many-relationship-configuration">Many-to-Many Relationship</a></p></blockquote><p>Well, this is a little complicated, and should be configured with Fluent API.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> BookId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Author Author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;BookCategory&gt; BookCategories &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Category</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CategoryId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CategoryName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> ICollection&lt;BookCategory&gt; BookCategories &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookCategory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> BookId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Book Book &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CategoryId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Category Category &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, in your custom <code>DbContext</code>, create this method.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// joint primary key</span></span><br><span class="line">    modelBuilder.Entity&lt;BookCategory&gt;()</span><br><span class="line">        .HasKey(bc =&gt; <span class="keyword">new</span> &#123; bc.BookId, bc.CategoryId &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assign relation manually</span></span><br><span class="line">    modelBuilder.Entity&lt;BookCategory&gt;()</span><br><span class="line">        .HasOne(bc =&gt; bc.Book)</span><br><span class="line">        .WithMany(b =&gt; b.BookCategories)</span><br><span class="line">        .HasForeignKey(bc =&gt; bc.BookId);</span><br><span class="line">    modelBuilder.Entity&lt;BookCategory&gt;()</span><br><span class="line">        .HasOne(bc =&gt; bc.Category)</span><br><span class="line">        .WithMany(c =&gt; c.BookCategories)</span><br><span class="line">        .HasForeignKey(bc =&gt; bc.CategoryId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Data-Creation"><a href="#Data-Creation" class="headerlink" title="Data Creation"></a>Data Creation</h1><p>Well, it is not enough just declare the entities. Then how to actually instantiate them?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume we use the One-to-One relationship example</span></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> context = <span class="keyword">new</span> YourDbContext())</span><br><span class="line">&#123;     </span><br><span class="line">    <span class="keyword">var</span> address = context.Add(<span class="keyword">new</span> Address &#123;Street = <span class="string">&quot;St. A&quot;</span>, No = <span class="number">1</span>&#125;).Entity;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User &#123; Address = Address &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or it could be simpler if you use Repository and Unit of Work Pattern.</p><p>Just one more thing, unlike Django ORM, EF Core will <strong>NOT</strong> get reference navigation properties by default. Which means, when you get a fresh data from <code>DbContext</code>, all navigation properties are <code>null</code>. You have to get them manually, or use eager loading when you query them.</p><div class="note info flat"><p>Check out <a href="https://learn.microsoft.com/en-us/ef/core/querying/related-data/eager">Eager Loading of Related Data</a> for more information. 😶‍🌫️</p></div><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>This is hard to understand… Just a beginning. Will update when I have new ideas. 🤡</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> C# </tag>
            
            <tag> EF Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Troubleshoot High CPU Usage by the &quot;System&quot; Process</title>
      <link href="/posts/Troubleshoot-High-CPU-Usage-by-the-System-Process/"/>
      <url>/posts/Troubleshoot-High-CPU-Usage-by-the-System-Process/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>If you pay more attention when using your computer or laptop, you might notice that, the fan keeps working fast even though you open no application. If you have ever encountered this, then congratulations 🎊, and you can then skip this boring post. However, if you do notice such abnormal behavior of your lovely computer, then this article might be of help.</p><div class="note info flat"><p>This problem may result from various possible reasons, and this post does not guarantee to solve all of them.</p></div><p>Another abnormal behavior that comes with it is the green loading bar of File Explorer, which may take too long to complete. But I’m not sure is it really related to this.</p><hr><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>First, the direct reason that the fan keeps working hard is the CPU or GPU temperature. And the direct cause of high temperature of them is heavy work. e.g. Playing 3A game. But in this case, we didn’t do anything! 😕 So, who is it?</p><p>Let’s open Task Manager, and have a look of all tasks. Locate these two and monitor them for a while, check if they take much CPU resources. For me, the regular occupation of CPU of these two is below 10%, or even 1%. If this value is too high, consider there’s some thing wrong. If not, then this article may not be useful to you.</p><p><img src="/posts/Troubleshoot-High-CPU-Usage-by-the-System-Process/image-20230706142603254.png" alt="image-20230706142603254"></p><blockquote><p>Here, I already solved the problem, so the value is normal in the screenshot.</p></blockquote><p>Then how? Why these two takes up so much CPU resources? If you are more careful to your computer, you may also notice the indicator light for disk access flashes frequently, meaning there is constant accessing for hard disk. Then, we can assume that something went wrong with file system, or related drivers.</p><blockquote><p>Well, since loading data from disk requires system call, which, involves both system interrupts and that, indicator light, it is the first we can come up with.</p></blockquote><hr><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Then how? You can use <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chkdsk?tabs=event-viewer"><code>chkdsk</code></a> command to check your volumes, but in most cases, I think, the result will be OK.</p><p>Well, it reminds me of a configuration I’ve done before - folder optimization. And, at least for me, it is the root of the trouble. I guess, different option of subfolders will result in too much operations when loading the disk, especially in case that I install almost all applications and documents in this volume. So, you just select “General items”, and remember to apply this to all subfolders.</p><img src="/posts/Troubleshoot-High-CPU-Usage-by-the-System-Process/image-20230706144357295.png" alt="image-20230706144357295" style="zoom: 67%;"><p>After this, the CPU usage of “System interrupts” and “System” drops almost immediately. And the fan could finally have a break. 😀</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Troubleshooting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Troubleshoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab 6 Challenge</title>
      <link href="/posts/Lab-6-Challenge/"/>
      <url>/posts/Lab-6-Challenge/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-2023-Spring-OS"><a href="#BUAA-2023-Spring-OS" class="headerlink" title="BUAA 2023 Spring OS"></a>BUAA 2023 Spring OS</h1><img src="/posts/Lab-6-Challenge/image-20230618215842372.png" alt="image-20230618215842372" style="zoom: 80%;"><p>Primary architecture based on <a href="https://github.com/Lord-Turmoil/PassBashPro">PassBash</a>. Code available at:</p><ul><li><a href="https://github.com/Lord-Turmoil/2023-Spring-OS/tree/lab6-challenge">GitHub</a></li><li><a href="https://gitee.com/tonys-studio/2023-spring-os/tree/lab6-challenge/">Gitee</a></li></ul><p>Copyright © Tony’s Studio 2023</p><hr><h1 id="1-Overall-Design"><a href="#1-Overall-Design" class="headerlink" title="1. Overall Design"></a>1. Overall Design</h1><h2 id="1-1-Demand-Analysis"><a href="#1-1-Demand-Analysis" class="headerlink" title="1.1 Demand Analysis"></a>1.1 Demand Analysis</h2><p>The guiding book may differ each year, and right now, as I’m writing, is 2023. However, the basic requirements for a Shell 🐚  are generally the same.</p><ol><li>Friendly user interaction.</li><li>Command &amp; <del>Conquer</del> argument parsing.</li><li>Job scheduling.</li></ol><p>I think the first one is quite comprehensive, since it is always difficult to provide better user experiences. Here, my understanding of a friendly Shell is that it must at least support free editing, history command and, completion perhaps.</p><p>So, I implemented Pash, with primary features as follows.</p><ol><li>Free editing experience. Not only direction key, but also Home, End, Delete, even Ctrl.</li><li>Enhanced user experience. Provide clear error info, support command history, and auto-completion on Tab.</li><li>Complete redirection. Add support for <code>&gt;&gt;</code>.</li><li>Beautiful interface with ANSI colors.</li><li>Clean and tidy directory structure.</li></ol><h2 id="1-2-Architecture"><a href="#1-2-Architecture" class="headerlink" title="1.2 Architecture"></a>1.2 Architecture</h2><p>The original shell looks like this.</p><img src="/posts/Lab-6-Challenge/shell_old.svg" alt="shell_old" style="zoom:80%;"><p>And Pash, is like this. Only better. With internal command and external command unified, we can parse them altogether, and enable redirection and pipe for internal commands.</p><p><img src="/posts/Lab-6-Challenge/shell_new.svg" alt="shell_new"></p><p>Here is another figure showing all modules of Pash.</p><p><img src="/posts/Lab-6-Challenge/module.svg" alt="module"></p><hr><h1 id="2-Implementation"><a href="#2-Implementation" class="headerlink" title="2. Implementation"></a>2. Implementation</h1><blockquote><p>All functions that are exclusive to Pash are declared in <code>user/include/pash.h</code>, and the definition of Pash is in <code>user/pash.c</code>, while auxiliary functions and other modules are in <code>user/lib/pashlib.c</code>.</p></blockquote><h2 id="2-1-Input-Module"><a href="#2-1-Input-Module" class="headerlink" title="2.1 Input Module"></a>2.1 Input Module</h2><h3 id="2-1-1-Raw-Input"><a href="#2-1-1-Raw-Input" class="headerlink" title="2.1.1 Raw Input"></a>2.1.1 Raw Input</h3><p>Input module is what I considered most well designed. It is powerful and flexible. For low-level input, it uses <code>getch</code> function that is similar to function with the same name in Windows <code>conio.h</code>. It rely on a system call.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kern/syscall_all.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_getch</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> scancharc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user/lib/syscall_lib.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">syscall_getch</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = msyscall(SYS_getch)) == <span class="number">0</span>)</span><br><span class="line">        syscall_yield();</span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-Input-Recognition"><a href="#2-1-2-Input-Recognition" class="headerlink" title="2.1.2 Input Recognition"></a>2.1.2 Input Recognition</h3><p>Well, in MOS, special keys are in form of ANSI code, just like what in Linux. So it could be a little annoying to recognize these keys. However, with finite state machine, it would be a problem no more. The state machine looks just like what is shown below, but some layers are omitted since there is only one node in those layers. Each leaf node is registered with a event handler corresponding to the input, and non-leaf node with a handler to determine the next node.</p><p><img src="/posts/Lab-6-Challenge/lab6-challenge-input.svg" alt="lab6-challenge-input"></p><p>Well, in code, this state machine consists of these two types of functions. And to maintain a consistent input state, I use a input context structure. <code>input_opt_t</code> will be elaborated later.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/pashlib.c</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> <span class="type">_input_action_t</span>(<span class="type">const</span> <span class="type">input_opt_t</span>* opt, <span class="type">input_ctx_t</span>* ctx);</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">_input_handler_t</span>(<span class="type">const</span> <span class="type">input_opt_t</span>* opt, <span class="type">input_ctx_t</span>* ctx);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">input_ctx_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span>* buffer; <span class="comment">// input buffer</span></span><br><span class="line">    <span class="type">int</span> pos;      <span class="comment">// current cursor position</span></span><br><span class="line">    <span class="type">int</span> length;   <span class="comment">// total input length</span></span><br><span class="line">    <span class="type">int</span> ch;      <span class="comment">// next character to put into buffer</span></span><br><span class="line">    <span class="type">int</span> index;    <span class="comment">// current history record index</span></span><br><span class="line">    <span class="type">int</span> count;    <span class="comment">// total number of history records</span></span><br><span class="line">&#125; <span class="type">input_ctx_t</span> __attribute__((aligned(<span class="number">32</span>)));</span><br></pre></td></tr></table></figure><blockquote><p><strong>Important:</strong> One thing to notice is that, for this struct, we have to use <code>__attribute__((aligned(32)))</code>, or unexpected error will raise. It is sure to be a problem of byte alignment, but I could not explain it yet.</p></blockquote><h3 id="2-1-3-Input-Options"><a href="#2-1-3-Input-Options" class="headerlink" title="2.1.3 Input Options"></a>2.1.3 Input Options</h3><p>One of the primary features of this input module is that is support custom options. This is the part I’m most satisfied with.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">input_history_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> (*init)(<span class="type">int</span>*);           <span class="comment">// initialize number of history records</span></span><br><span class="line">    <span class="type">int</span> (*append)(<span class="type">const</span> <span class="type">char</span>*);  <span class="comment">// append new history record</span></span><br><span class="line">    <span class="type">int</span> (*get)(<span class="type">int</span>, <span class="type">char</span>*);      <span class="comment">// get specific history record</span></span><br><span class="line">&#125; <span class="type">input_history_t</span> __attribute__((aligned(<span class="number">16</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// current input, completion, revert distance</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*<span class="type">input_competer_t</span>)</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">char</span>*, <span class="type">int</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">input_opt_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> minLen;                  <span class="comment">// minimum input length</span></span><br><span class="line">    <span class="type">int</span> maxLen;                  <span class="comment">// maximum input length</span></span><br><span class="line">    <span class="type">int</span> interruptible;           <span class="comment">// whether can be interrupted if minimum length not satisfied</span></span><br><span class="line">    <span class="type">input_history_t</span>* history;    <span class="comment">// history service callback</span></span><br><span class="line">    <span class="type">input_completer_t</span> completer; <span class="comment">// completion service callback</span></span><br><span class="line">&#125; <span class="type">input_opt_t</span> __attribute__((aligned(<span class="number">32</span>)));</span><br></pre></td></tr></table></figure><p>Here, I’d like to show you some examples. Expand it as you wish.</p><details class="toggle"><summary class="toggle-button" style>Input Option Example</summary><div class="toggle-content"><p>This is a piece of code extracted from history handling part of input. Some extra checks are removed to reduce passage length.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// command starts with white space will not be saved (like Linux)</span></span><br><span class="line"><span class="keyword">if</span> (opt.history &amp;&amp; (!(*buffer == <span class="string">&#x27;\0&#x27;</span> || *buffer == <span class="string">&#x27; &#x27;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    strstripr(buffer, <span class="string">&#x27; &#x27;</span>);                <span class="comment">// remove trailing white spaces</span></span><br><span class="line">    <span class="keyword">if</span> (!is_the_same(buffer, last_record)) <span class="comment">// do not record repeated command</span></span><br><span class="line">    &#123;</span><br><span class="line">        opt.history-&gt;append(buffer);</span><br><span class="line">        <span class="built_in">strcpy</span>(last_record, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And another one is about completion. It is registered to Tab key.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> _input_tab(<span class="type">const</span> <span class="type">input_opt_t</span>* opt, <span class="type">input_ctx_t</span>* ctx)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!opt-&gt;completer)  <span class="comment">// no completion service registered</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[MAXPATHLEN];</span><br><span class="line">    <span class="type">int</span> revert;</span><br><span class="line">    <span class="type">int</span> ret = opt-&gt;completer(ctx-&gt;buffer, buffer, &amp;revert);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">0</span>)  <span class="comment">// no available completions</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    _input_end(opt, ctx);  <span class="comment">// set cursor to the end of input</span></span><br><span class="line">    <span class="keyword">while</span> (revert-- &gt; <span class="number">0</span>)</span><br><span class="line">        _input_backspace(opt, ctx);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* completion = buffer;</span><br><span class="line">    <span class="keyword">while</span> (*completion)</span><br><span class="line">    &#123;</span><br><span class="line">        ctx-&gt;ch = *completion;</span><br><span class="line">        _input_char(opt, ctx);</span><br><span class="line">        completion++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><blockquote><p>For the concrete implementation of history and completion service, please refer to my git repository. 😉</p></blockquote><h2 id="2-2-Command-Resolving"><a href="#2-2-Command-Resolving" class="headerlink" title="2.2 Command Resolving"></a>2.2 Command Resolving</h2><h3 id="2-2-1-Command-Parsing"><a href="#2-2-1-Command-Parsing" class="headerlink" title="2.2.1 Command Parsing"></a>2.2.1 Command Parsing</h3><p>Basic command parsing remains almost the same. However, it no longer do this in a forked child process. And the execution flow changes slightly for <code>;</code> and <code>&amp;</code> support. Mainly use <code>hasNext</code> and <code>needWait</code> flags to tell Shell to continue parsing, or end. Here, I only showed code essentially related to <code>;</code> and <code>&amp;</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> _runcmd(<span class="type">char</span>* cmd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> hasNext;</span><br><span class="line">    <span class="type">int</span> needWait;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        hasNext = <span class="number">0</span>;</span><br><span class="line">        needWait = <span class="number">1</span>;</span><br><span class="line">        ret = _parsecmd(cmd, &amp;argc, argv, &amp;rightpipe);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)       <span class="comment">// ; or &amp;</span></span><br><span class="line">        &#123;</span><br><span class="line">            hasNext = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="number">2</span>)  <span class="comment">// &amp;</span></span><br><span class="line">                needWait = <span class="number">0</span>;</span><br><span class="line">            cmd = <span class="literal">NULL</span>; <span class="comment">// next turn will continue parse on previous cmd</span></span><br><span class="line">        &#125;</span><br><span class="line">        argv[argc] = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> child = _execv(argv[<span class="number">0</span>], argv);</span><br><span class="line">        <span class="keyword">if</span> ((child &gt; <span class="number">0</span>) &amp;&amp; needWait)</span><br><span class="line">            wait(child);</span><br><span class="line">        <span class="keyword">if</span> (rightpipe)</span><br><span class="line">            wait(rightpipe);</span><br><span class="line">    &#125; <span class="keyword">while</span> (hasNext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _parsecmd(<span class="type">char</span>* cmd, <span class="type">int</span>* argc, <span class="type">char</span>* argv[], <span class="type">int</span>* rightpipe)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (; ; )</span><br><span class="line">    &#123;</span><br><span class="line">        type = get_token(<span class="literal">NULL</span>, &amp;token);</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">case</span> TK_SEMI_COLON:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> TK_AMPERSAND:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, the process of getting token in command also uses a state machine. (It is a good thing.)</p><img src="/posts/Lab-6-Challenge/lab6-challenge-parse.svg" alt="lab6-challenge-parse" style="zoom:80%;"><h3 id="2-2-2-Command-Execution"><a href="#2-2-2-Command-Execution" class="headerlink" title="2.2.2 Command Execution"></a>2.2.2 Command Execution</h3><p>After parsing, shell will then execute the command. Here, both internal and external command are first handled in <code>_execv</code> of Pash itself. If it is not a internal command, Pash will use library function <code>execv</code> to execute the command.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/pash.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _execv(<span class="type">char</span>* cmd, <span class="type">char</span>* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = execvi(cmd, argv);  <span class="comment">// return -1 if internal command not exists</span></span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> execv(cmd, argv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user/lib/lib.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> prog[<span class="number">1024</span>] = <span class="string">&quot;/bin/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strchr</span>(path, <span class="string">&#x27;/&#x27;</span>))  <span class="comment">// user directory to call command</span></span><br><span class="line">        <span class="built_in">strcpy</span>(prog, path);</span><br><span class="line">    <span class="keyword">else</span>                    <span class="comment">// default command will be looked up in /bin</span></span><br><span class="line">        <span class="built_in">strcat</span>(prog, path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_ends_with(prog, <span class="string">&quot;.sh&quot;</span>))<span class="comment">// auto-recognize .sh script</span></span><br><span class="line">        <span class="keyword">return</span> execl(<span class="string">&quot;pash&quot;</span>, <span class="string">&quot;pash&quot;</span>, prog, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!is_ends_with(prog, <span class="string">&quot;.b&quot;</span>))  <span class="comment">// auto-complete .b extention</span></span><br><span class="line">        <span class="built_in">strcat</span>(prog, <span class="string">&quot;.b&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> spawn(prog, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-Patch-for-Redirection"><a href="#2-2-3-Patch-for-Redirection" class="headerlink" title="2.2.3 Patch for Redirection"></a>2.2.3 Patch for Redirection</h3><p>Since we moved command parsing in Pash process, and internal command also support redirection, so Pash it self will be affected by commands with redirection and pipe. Therefore, the standard input and output must be reset after the execution of these commands.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/pash.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (!interactive)  <span class="comment">// backup original I/O</span></span><br><span class="line">    &#123;</span><br><span class="line">        backupfd[<span class="number">0</span>] = dup(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        panic_on(backupfd[<span class="number">0</span>] &lt; <span class="number">0</span>);</span><br><span class="line">        backupfd[<span class="number">1</span>] = dup(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        panic_on(backupfd[<span class="number">1</span>] &lt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> _restore_stream()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!redirect)  <span class="comment">// redirect flag</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!interactive)  <span class="comment">// restore redirected I/O</span></span><br><span class="line">    &#123;</span><br><span class="line">        dup(backupfd[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">        dup(backupfd[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>               <span class="comment">// restore standard console I/O</span></span><br><span class="line">    &#123;</span><br><span class="line">        close(<span class="number">0</span>);</span><br><span class="line">        panic_on(opencons() != <span class="number">0</span>);</span><br><span class="line">        panic_on(dup(<span class="number">0</span>, <span class="number">1</span>) &lt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-Argument-Parsing"><a href="#2-2-4-Argument-Parsing" class="headerlink" title="2.2.4 Argument Parsing"></a>2.2.4 Argument Parsing</h3><p>The original MOS uses an argument parsing macro from Plan 9… It is good, but is almost unreadable. So here, I implemented <code>getopt</code> function to resemble the one in Linux. It’s a little long, so just refer to my repository. Here I just give you a simple example of how it is used. (Error handling are removed to reduce passage length.)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/tree.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">parse_args</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> opt;</span><br><span class="line">    <span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">&quot;dh&quot;</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                dirOnly = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                showHelp = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>:</span><br><span class="line">                <span class="built_in">strcpy</span>(targetPath, optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                printfc(ERROR_COLOR, <span class="string">&quot;Unknown parameter \&quot;-%c\&quot;\n&quot;</span>, optopt);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-File-System"><a href="#2-3-File-System" class="headerlink" title="2.3 File System"></a>2.3 File System</h2><h3 id="2-3-1-Present-Working-Directory"><a href="#2-3-1-Present-Working-Directory" class="headerlink" title="2.3.1 Present Working Directory"></a>2.3.1 Present Working Directory</h3><p>This is simple, just place this stuff to PCB is OK.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="type">char</span> env_pwd[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then, just implement some functions to handle this.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">access</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">int</span> type)</span>; <span class="comment">// type is used to perform extra check if exists</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getcwd</span><span class="params">(<span class="type">char</span>* path)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">chdir</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// kern/syscall_all.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sys_set_pwd</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(curenv-&gt;env_pwd, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sys_get_pwd</span><span class="params">(<span class="type">char</span>* path)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(path, curenv-&gt;env_pwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-Absolute-Path"><a href="#2-3-2-Absolute-Path" class="headerlink" title="2.3.2 Absolute Path"></a>2.3.2 Absolute Path</h3><p>Once we have complicated path, it comes the problem that, how to get absolute path? It is impossible (at least for not) for a file to get its parent, even worse, we have to deal with path that looks like <code>home/../../opt/./el...</code>. So we have to request file system process to do this for us.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/file.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fullpath</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">char</span>* path)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> dir[MAXPATHLEN] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">    _make_fullpath(filename, dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fsipc_fullpath(dir, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_fullpath</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">char</span>* fullpath)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> walk_fullpath(path, fullpath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Actually, we can get the parent of a <code>struct File</code> using <code>File::f_dir</code>. But I failed to do so in user library function. I didn’t have time to figure out why, perhaps you can do it. 🧐</p><p>Anyway, when we only have filename, isn’t it more simpler to directly get the absolute path than open a directory, then traverse its parent?</p></blockquote><h3 id="2-3-3-Open-Mode"><a href="#2-3-3-Open-Mode" class="headerlink" title="2.3.3 Open Mode"></a>2.3.3 Open Mode</h3><p>To realize <code>&gt;&gt;</code>, and history function, we have to implement <code>O_APPEND</code> mode for opening file, and of course, <code>O_CREAT</code> also. What’s more, a detail when open with <code>O_WRONLY</code>, we should clear the content of the file.</p><h2 id="2-4-Extra"><a href="#2-4-Extra" class="headerlink" title="2.4 Extra"></a>2.4 Extra</h2><h3 id="2-4-1-Directory-Structure"><a href="#2-4-1-Directory-Structure" class="headerlink" title="2.4.1 Directory Structure"></a>2.4.1 Directory Structure</h3><p>To make everything in place, I refactored file structure of MOS to resemble Linux. Isn’t it tidy?</p><img src="/posts/Lab-6-Challenge/image-20230618230931509.png" alt="image-20230618230931509" style="zoom: 67%;"><p>And we have to change how we burn files into MOS disk in <code>fs/Makefile</code>.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FSIMGFILES := rootfs/init.b  \</span><br><span class="line">              rootfs/bin/    \</span><br><span class="line">              rootfs/home/   \</span><br><span class="line">              rootfs/etc/    \</span><br><span class="line">              $(fs-files)</span><br><span class="line"></span><br><span class="line"><span class="section">image: <span class="variable">$(tools_dir)</span>/fsformat</span></span><br><span class="line">    dd if=/dev/zero of=../target/fs.img bs=4096 count=1024 2&gt;/dev/null</span><br><span class="line">    mkdir -p rootfs/home/mos/</span><br><span class="line">    mkdir -p rootfs/bin</span><br><span class="line">    </span><br><span class="line">    cp -vf <span class="variable">$(USERAPPS)</span> -t rootfs/home/mos/</span><br><span class="line">    cp -vf <span class="variable">$(USERBINS)</span> -t rootfs/bin</span><br><span class="line">    mv -vf rootfs/bin/init.b rootfs/init.b</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$(tools_dir)</span>/fsformat ../target/fs.img $<span class="variable">$(printf &#x27;%s\n&#x27; <span class="variable">$(FSIMGFILES)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-User-Profile"><a href="#2-4-2-User-Profile" class="headerlink" title="2.4.2 User Profile"></a>2.4.2 User Profile</h3><p>In Pash, we stored user profile in file, rather than hard code. And uses a library function to get this.</p><p><img src="/posts/Lab-6-Challenge/image-20230618231304158.png" alt="image-20230618231304158"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">profile</span><span class="params">(<span class="type">char</span>* username, <span class="type">char</span>* path, <span class="type">int</span> create)</span>;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-Colorful-Output"><a href="#2-4-3-Colorful-Output" class="headerlink" title="2.4.3 Colorful Output"></a>2.4.3 Colorful Output</h3><p>Here, we also use ANSI code to output colorful characters. And we wrapped it in <code>printfc</code>. (I renamed previous <code>user/lib/fprintf.c</code> to <code>user/lib/printf.c</code>.)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/printf.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">printfc</span><span class="params">(<span class="type">int</span> color, <span class="type">const</span> <span class="type">char</span>* fmt, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[%dm&quot;</span>, color);<span class="comment">// set color</span></span><br><span class="line">    va_list ap;</span><br><span class="line">    va_start(ap, fmt);</span><br><span class="line">    <span class="type">int</span> r = <span class="built_in">vfprintf</span>(<span class="number">1</span>, fmt, ap);</span><br><span class="line">    va_end(ap);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\033[0m&quot;</span>);<span class="comment">// reset color</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLACK   0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RED     1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ...     ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOREGROUND(COLOR) ((COLOR) + 30)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BACKGROUND(COLOR) ((COLOR) + 40)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOREGROUND_INTENSE(COLOR) (FOREGROUND(COLOR) + 60)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BACKGROUND_INTENSE(COLOR) (BACKGROUND(COLOR) + 60)</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-Epilogue"><a href="#3-Epilogue" class="headerlink" title="3. Epilogue"></a>3. Epilogue</h1><p>Well, I guess this is a general overview of Pash. However, there are a lot pitfalls that I didn’t mention. Some of them were really obscure that I could not fully comprehend. But, it is truly exciting to see Pash running on MOS. 😁</p><img src="/posts/Lab-6-Challenge/image-20230618215754490.png" alt="image-20230618215754490" style="zoom: 50%;"><p style="text-align: center"><i>"When I left you, I was but the learner. Next time, I will be, the master."</i></p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab 6 Reflection</title>
      <link href="/posts/Lab-6-Reflection/"/>
      <url>/posts/Lab-6-Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-2023-Spring-OS"><a href="#BUAA-2023-Spring-OS" class="headerlink" title="BUAA 2023 Spring OS"></a>BUAA 2023 Spring OS</h1><hr><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Well, we finally came to the last lab. To be honest, this one is quite easy.</p><hr><h1 id="1-Pipe"><a href="#1-Pipe" class="headerlink" title="1. Pipe"></a>1. Pipe</h1><p>The first thing to deal with is pipe. You know, in Linux, we can use <code>|</code> operator to redirect one process’s output to another process’s input, which is quite important for shell. So… Here, let’s do it.</p><h2 id="1-1-Pipe-Structure"><a href="#1-1-Pipe-Structure" class="headerlink" title="1.1 Pipe Structure"></a>1.1 Pipe Structure</h2><p>Well, pipe is not a actual file, it is, a circular queue. Write end keeps writing things to the back, while read end keeps reading things from the front. Both will yield when the pipe is empty or full. So here is how it looks like.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pipe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u_int p_rpos;       <span class="comment">// read position</span></span><br><span class="line">    u_int p_wpos;       <span class="comment">// write position</span></span><br><span class="line">    u_char p_buf[BY2PIPE]; <span class="comment">// data buffer</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _pipe_is_empty(<span class="keyword">struct</span> Pipe* p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;p_rpos &gt;= p-&gt;p_wpos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> _pipe_is_full(<span class="keyword">struct</span> Pipe* p)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;p_wpos - p-&gt;p_rpos &gt;= BY2PIPE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-Create-Pipe"><a href="#1-2-Create-Pipe" class="headerlink" title="1.2 Create Pipe"></a>1.2 Create Pipe</h2><p>So, how to create a pipe? First, let’s make it clear that, the pipe we create here, is <strong>anonymous</strong>. When I say anonymous, I mean, anonymous. :P</p><p>The difference of pipe and regular file is that, the data part of pipe is not raw data, it is what I just mentioned above, the so called <code>struct Pipe</code>. So this is it, a small buffer, which only takes up one page. (Actually not one page, but we don’t divide a page into several parts.)</p><p>Then, considering the nature of sharing, the data part of pipe file is shared by two file descriptors. So we just map the same page of physical memory to both read end and write end. A little confusing, huh? Here are some figure to further demonstrate this.</p><p>First, we use <code>pipe</code> to create a pipe in parent process. We can see that two file descriptors are mapped to two different pages, but both of theirs data are mapped to the same, pipe page.</p><blockquote><p>Green is for read and red is for write. If you feel not familiar with this layout, check my previous post.</p><ul><li><a href="/posts/Lab-5-Reflection/#2-4-2-File-Descriptor">Lab 5 Reflection: 2.4.2 File Descriptor</a></li></ul></blockquote><img src="/posts/Lab-6-Reflection/create_01.svg" alt="create_01" style="zoom:80%;"><p>Well, pipe always comes with fork. So let’s see how it changes after fork. So… like a mirror, so symmetrical, isn’t it? Now we can see that all physical pages’ references doubled.</p><blockquote><p><strong>Notice:</strong> Here, the file descriptor and file data memory are marked <code>PTE_LIBRARY</code>, so they won’t be affected by COW mechanism.</p></blockquote><img src="/posts/Lab-6-Reflection/create_02.svg" alt="create_02" style="zoom:80%;"><p>Then, assume that parent process writes and child process reads. And below is the final (almost final) form of pipe. The grey hatch means the file descriptor was closed.</p><blockquote><p><strong>Important!</strong> So are we getting it? Are we getting it? The sum of <code>pageref</code> of read end file descriptor and write end one, is exactly the <code>pageref</code> of the pipe page!</p></blockquote><img src="/posts/Lab-6-Reflection/create_03.svg" alt="create_03" style="zoom:80%;"><p>If you care about source code, then here it is.</p><details class="toggle"><summary class="toggle-button" style>pipe</summary><div class="toggle-content"><blockquote><p>Here, it uses many <code>goto</code> for error handling. Well, not bad.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pfd[<span class="number">2</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">void</span>* va;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd0</span>, * <span class="title">fd1</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Allocate the file descriptors. */</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_alloc(&amp;fd0)) &lt; <span class="number">0</span> || (r = syscall_mem_alloc(<span class="number">0</span>, fd0, PTE_D | PTE_LIBRARY)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_alloc(&amp;fd1)) &lt; <span class="number">0</span> || (r = syscall_mem_alloc(<span class="number">0</span>, fd1, PTE_D | PTE_LIBRARY)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> err1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 2: Allocate and map the page for the &#x27;Pipe&#x27; structure. */</span></span><br><span class="line">    va = fd2data(fd0);</span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_mem_alloc(<span class="number">0</span>, (<span class="type">void</span>*)va, PTE_D | PTE_LIBRARY)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> err2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span>*)va, <span class="number">0</span>, (<span class="type">void</span>*)fd2data(fd1), PTE_D | PTE_LIBRARY)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">goto</span> err3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Set up &#x27;Fd&#x27; structures. */</span></span><br><span class="line">    fd0-&gt;fd_dev_id = devpipe.dev_id;</span><br><span class="line">    fd0-&gt;fd_omode = O_RDONLY;</span><br><span class="line"></span><br><span class="line">    fd1-&gt;fd_dev_id = devpipe.dev_id;</span><br><span class="line">    fd1-&gt;fd_omode = O_WRONLY;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> MOS_VERBOSE</span></span><br><span class="line">    debugf(<span class="string">&quot;[%08x] pipecreate \n&quot;</span>, env-&gt;env_id, vpt[VPN(va)]);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 4: Save the result. */</span></span><br><span class="line">    pfd[<span class="number">0</span>] = fd2num(fd0);</span><br><span class="line">    pfd[<span class="number">1</span>] = fd2num(fd1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">err3:</span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)va);</span><br><span class="line">err2:</span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, fd1);</span><br><span class="line">err1:</span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, fd0);</span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="1-3-Read-Write-Pipe"><a href="#1-3-Read-Write-Pipe" class="headerlink" title="1.3 Read &amp; Write Pipe"></a>1.3 Read &amp; Write Pipe</h2><p>Before we start reading and writing, there’s one problem remaining - how to determine our writing has a receiver, or we are not waiting for nobody?</p><p>So we have to figure out a way to determine whether the other end of pipe is closed or not. Any idea? Correct, the equation we mentioned just now.<br>$$<br>pageref(read \space fd) + pageref(write \space fd) \equiv  pageref(pipe)<br>$$<br>When we are at write end, if $ pageref(write fd) &#x3D; pageref(pipe) $, it means the read end is closed. It looks just like this, and one physical page is freed, too. The same goes with write end.</p><img src="/posts/Lab-6-Reflection/create_04.svg" alt="create_04" style="zoom:80%;"><p>So we can write a test function as below.</p><blockquote><p>You know, pipe only works between two process, parent and child. So there shouldn’t be a third party. And yet another thing to notice is that, we must make sure this check is an atomic operation, because it is in user space, and schedule will happen anytime.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> _pipe_is_closed(<span class="keyword">struct</span> Fd* fd, <span class="keyword">struct</span> Pipe* p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fd_ref, pipe_ref, runs;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">runs = env-&gt;env_runs;</span><br><span class="line">fd_ref = pageref(fd);</span><br><span class="line">pipe_ref = pageref(p);</span><br><span class="line">&#125; <span class="keyword">while</span> (runs != env-&gt;env_runs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fd_ref == pipe_ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Reminder, this <code>env</code> is a global volatile variable in user space.</p></blockquote><p>With these in mind, it will be relatively easier to understand pipe read and write.</p><details class="toggle"><summary class="toggle-button" style>pipe read/write</summary><div class="toggle-content"><blockquote><p>Notice that, even if one end is closed, the other end can still access pipe data. So it is OK to use <code>_pipe_is_empty</code> or <code>_pipe_is_full</code>, though the pipe is sure to be empty after the last read.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pipe_read</span><span class="params">(<span class="keyword">struct</span> Fd* fd, <span class="type">void</span>* vbuf, u_int n, u_int offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pipe</span>* <span class="title">p</span> =</span> (<span class="keyword">struct</span> Pipe*)fd2data(fd);</span><br><span class="line">    <span class="type">int</span> nbytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; ; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!_pipe_is_empty(p) &amp;&amp; nbytes &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            *(u_char*)(vbuf + nbytes++) = p-&gt;p_buf[p-&gt;p_rpos++ % BY2PIPE];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((nbytes &gt; <span class="number">0</span>) || _pipe_is_closed(fd, p))</span><br><span class="line">            <span class="keyword">return</span> nbytes;</span><br><span class="line">        syscall_yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pipe_write</span><span class="params">(<span class="keyword">struct</span> Fd* fd, <span class="type">const</span> <span class="type">void</span>* vbuf, u_int n, u_int offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Pipe</span>* <span class="title">p</span> =</span> (<span class="keyword">struct</span> Pipe*)fd2data(fd);</span><br><span class="line">    <span class="type">int</span> nbytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; ; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!_pipe_is_full(p) &amp;&amp; nbytes &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;p_buf[p-&gt;p_wpos++ % BY2PIPE] = *(u_char*)(vbuf + nbytes++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nbytes == n || _pipe_is_closed(fd, p))</span><br><span class="line">            <span class="keyword">return</span> nbytes;</span><br><span class="line">        syscall_yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="2-Spawn"><a href="#2-Spawn" class="headerlink" title="2. Spawn"></a>2. Spawn</h1><p>Remember, our ultimate goal is to make a Shell. So it is essential to load executables from disk, and <code>spawn</code> is what makes it possible.</p><p>This part is… a little complicated. But basic principle is simple: load each segment of ELF file into memory. What to notice is that we have to initialize the calling stack for target <code>main</code> function, and map those pages with <code>PTE_LIBRARY</code> flags.</p><blockquote><p>Interestingly, memory segment <code>UTEMP</code> is used here. :)</p></blockquote><details class="toggle"><summary class="toggle-button" style>spawn</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">spawn</span><span class="params">(<span class="type">char</span>* prog, <span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: Open the file &#x27;prog&#x27; (the path of the program).</span></span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span> ((fd = open(prog, O_RDONLY)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Read the ELF header (of type &#x27;Elf32_Ehdr&#x27;) from the file into</span></span><br><span class="line">    <span class="comment">// &#x27;elfbuf&#x27; using &#x27;readn()&#x27;.</span></span><br><span class="line">    <span class="comment">// If that fails (where &#x27;readn&#x27; returns a different size than expected),</span></span><br><span class="line">    <span class="comment">// set &#x27;r&#x27; and &#x27;goto err&#x27; to close the file and return the error.</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    u_char elfbuf[<span class="number">512</span>];</span><br><span class="line">    <span class="keyword">if</span> (readn(fd, elfbuf, <span class="keyword">sizeof</span>(Elf32_Ehdr)) != <span class="keyword">sizeof</span>(Elf32_Ehdr))</span><br><span class="line">    &#123;</span><br><span class="line">        r = -E_NOT_EXEC;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> Elf32_Ehdr* ehdr = elf_from(elfbuf, <span class="keyword">sizeof</span>(Elf32_Ehdr));</span><br><span class="line">    <span class="keyword">if</span> (!ehdr)</span><br><span class="line">    &#123;</span><br><span class="line">        r = -E_NOT_EXEC;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    u_long entrypoint = ehdr-&gt;e_entry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: Create a child using &#x27;syscall_exofork()&#x27; and store its envid in</span></span><br><span class="line">    <span class="comment">// &#x27;child&#x27;. If the syscall fails, set &#x27;r&#x27; and &#x27;goto err&#x27;.</span></span><br><span class="line">    u_int child;</span><br><span class="line">    r = syscall_exofork();</span><br><span class="line">    <span class="keyword">if</span> (r &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    child = r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: Use &#x27;init_stack(child, argv, &amp;sp)&#x27; to initialize the stack of the</span></span><br><span class="line">    <span class="comment">// child. &#x27;goto err1&#x27; if that fails.</span></span><br><span class="line">    u_int sp;</span><br><span class="line">    <span class="keyword">if</span> ((r = init_stack(child, argv, &amp;sp)) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> err1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 5: Load the ELF segments in the file into the child&#x27;s memory.</span></span><br><span class="line">    <span class="comment">// This is similar to &#x27;load_icode()&#x27; in the kernel.</span></span><br><span class="line">    <span class="type">size_t</span> ph_off;</span><br><span class="line">    ELF_FOREACH_PHDR_OFF(ph_off, ehdr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Read the program header in the file with offset &#x27;ph_off&#x27; and length</span></span><br><span class="line">        <span class="comment">// &#x27;ehdr-&gt;e_phentsize&#x27; into &#x27;elfbuf&#x27;.</span></span><br><span class="line">        <span class="comment">// &#x27;goto err1&#x27; on failure.</span></span><br><span class="line">        seek(fd, ph_off);</span><br><span class="line">        <span class="keyword">if</span> (readn(fd, elfbuf, ehdr-&gt;e_phentsize) != ehdr-&gt;e_phentsize)</span><br><span class="line">        &#123;</span><br><span class="line">            r = -E_NOT_EXEC;</span><br><span class="line">            <span class="keyword">goto</span> err1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Elf32_Phdr* ph = (Elf32_Phdr*)elfbuf;</span><br><span class="line">        <span class="keyword">if</span> (ph-&gt;p_type == PT_LOAD)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">void</span>* bin;</span><br><span class="line">            <span class="comment">// Read and map the ELF data in the file at &#x27;ph-&gt;p_offset&#x27; into our</span></span><br><span class="line">            <span class="comment">// memory using &#x27;read_map()&#x27;. &#x27;goto err1&#x27; if that fails.</span></span><br><span class="line">            <span class="keyword">if</span> ((r = read_map(fd, ph-&gt;p_offset, &amp;bin)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> err1;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Load the segment &#x27;ph&#x27; into the child&#x27;s memory using &#x27;elf_load_seg()&#x27;.</span></span><br><span class="line">            <span class="comment">// Use &#x27;spawn_mapper&#x27; as the callback, and &#x27;&amp;child&#x27; as its data.</span></span><br><span class="line">            <span class="comment">// &#x27;goto err1&#x27; if that fails.</span></span><br><span class="line">            <span class="keyword">if</span> ((r = elf_load_seg(ph, bin, spawn_mapper, &amp;child)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> err1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Trapframe</span> <span class="title">tf</span> =</span> envs[ENVX(child)].env_tf;</span><br><span class="line">    tf.cp0_epc = entrypoint;</span><br><span class="line">    tf.regs[<span class="number">29</span>] = sp;</span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_set_trapframe(child, &amp;tf)) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> err2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pages with &#x27;PTE_LIBRARY&#x27; set are shared between the parent and the child.</span></span><br><span class="line">    <span class="keyword">for</span> (u_int pdeno = <span class="number">0</span>; pdeno &lt;= PDX(USTACKTOP); pdeno++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(vpd[pdeno] &amp; PTE_V))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (u_int pteno = <span class="number">0</span>; pteno &lt;= PTX(~<span class="number">0</span>); pteno++)</span><br><span class="line">        &#123;</span><br><span class="line">            u_int pn = (pdeno &lt;&lt; <span class="number">10</span>) + pteno;</span><br><span class="line">            u_int perm = vpt[pn] &amp; ((<span class="number">1</span> &lt;&lt; PGSHIFT) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((perm &amp; PTE_V) &amp;&amp; (perm &amp; PTE_LIBRARY))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">void</span>* va = (<span class="type">void</span>*)(pn &lt;&lt; PGSHIFT);</span><br><span class="line">                <span class="keyword">if</span> ((r = syscall_mem_map(<span class="number">0</span>, va, child, va, perm)) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    debugf(<span class="string">&quot;spawn: syscall_mem_map %x %x: %d\n&quot;</span>, va, child, r);</span><br><span class="line">                    <span class="keyword">goto</span> err2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_set_env_status(child, ENV_RUNNABLE)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        debugf(<span class="string">&quot;spawn: syscall_set_env_status %x: %d\n&quot;</span>, child, r);</span><br><span class="line">        <span class="keyword">goto</span> err2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line"></span><br><span class="line">err2:</span><br><span class="line">    syscall_env_destroy(child);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">err1:</span><br><span class="line">    syscall_env_destroy(child);</span><br><span class="line">err:</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>One important procedure is to initialize stack.</p><details class="toggle"><summary class="toggle-button" style>init_stack</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">init_stack</span><span class="params">(u_int child, <span class="type">char</span>** argv, u_int* init_sp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> argc, i, r, tot;</span><br><span class="line">    <span class="type">char</span>* strings;</span><br><span class="line">    u_int* args;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Count the number of arguments (argc)</span></span><br><span class="line">    <span class="comment">// and the total amount of space needed for strings (tot)</span></span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (argc = <span class="number">0</span>; argv[argc]; argc++)</span><br><span class="line">        tot += <span class="built_in">strlen</span>(argv[argc]) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure everything will fit in the initial stack page</span></span><br><span class="line">    <span class="keyword">if</span> (ROUND(tot, <span class="number">4</span>) + <span class="number">4</span> * (argc + <span class="number">3</span>) &gt; BY2PG)</span><br><span class="line">        <span class="keyword">return</span> -E_NO_MEM;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine where to place the strings and the args array</span></span><br><span class="line">    strings = (<span class="type">char</span>*)(UTEMP + BY2PG) - tot;</span><br><span class="line">    args = (u_int*)(UTEMP + BY2PG - ROUND(tot, <span class="number">4</span>) - <span class="number">4</span> * (argc + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_mem_alloc(<span class="number">0</span>, (<span class="type">void</span>*)UTEMP, PTE_D)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the argument strings into the stack page at &#x27;strings&#x27;</span></span><br><span class="line">    <span class="type">char</span>* ctemp, * argv_temp;</span><br><span class="line">    u_int j;</span><br><span class="line">    ctemp = strings;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        argv_temp = argv[i];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(argv[i]); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            *ctemp = *argv_temp;</span><br><span class="line">            ctemp++;</span><br><span class="line">            argv_temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        *ctemp = <span class="number">0</span>;</span><br><span class="line">        ctemp++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize args[0 ... argc - 1] to be pointers to these strings</span></span><br><span class="line">    <span class="comment">// that will be valid addresses for the child environment</span></span><br><span class="line">    <span class="comment">// (for whom this page will be at USTACKTOP-BY2PG!).</span></span><br><span class="line">    ctemp = (<span class="type">char</span>*)(USTACKTOP - UTEMP - BY2PG + (u_int)strings);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        args[i] = (u_int)ctemp;</span><br><span class="line">        ctemp += <span class="built_in">strlen</span>(argv[i]) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set args[argc] to 0 to null-terminate the args array.</span></span><br><span class="line">    ctemp--;</span><br><span class="line">    args[argc] = (u_int)ctemp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Push two more words onto the child&#x27;s stack below &#x27;args&#x27;,</span></span><br><span class="line">    <span class="comment">// containing the argc and argv parameters to be passed</span></span><br><span class="line">    <span class="comment">// to the child&#x27;s main() function.</span></span><br><span class="line">    u_int* pargv_ptr;</span><br><span class="line">    pargv_ptr = args - <span class="number">1</span>;</span><br><span class="line">    *pargv_ptr = USTACKTOP - UTEMP - BY2PG + (u_int)args;</span><br><span class="line">    pargv_ptr--;</span><br><span class="line">    *pargv_ptr = argc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set *init_sp to the initial stack pointer for the child</span></span><br><span class="line">    *init_sp = USTACKTOP - UTEMP - BY2PG + (u_int)pargv_ptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span>*)UTEMP, child, (<span class="type">void</span>*)(USTACKTOP - BY2PG), PTE_D)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    <span class="keyword">if</span> ((r = syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)UTEMP)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)UTEMP);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Also, we need a special <code>spawn_mapper</code> here.</p><details class="toggle"><summary class="toggle-button" style>spawn_mapper</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">spawn_mapper</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">void</span>* data,</span></span><br><span class="line"><span class="params">    u_long va,</span></span><br><span class="line"><span class="params">    <span class="type">size_t</span> offset,</span></span><br><span class="line"><span class="params">    u_int perm,</span></span><br><span class="line"><span class="params">    <span class="type">const</span> <span class="type">void</span>* src,</span></span><br><span class="line"><span class="params">    <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    u_int child_id = *(u_int*)data;</span><br><span class="line">    try(syscall_mem_alloc(child_id, (<span class="type">void</span>*)va, perm));</span><br><span class="line">    <span class="keyword">if</span> (src != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r = syscall_mem_map(child_id, (<span class="type">void</span>*)va, <span class="number">0</span>, (<span class="type">void</span>*)UTEMP, perm | PTE_D);</span><br><span class="line">        <span class="keyword">if</span> (r)</span><br><span class="line">        &#123;</span><br><span class="line">            syscall_mem_unmap(child_id, (<span class="type">void</span>*)va);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>((<span class="type">void</span>*)(UTEMP + offset), src, len);</span><br><span class="line">        <span class="keyword">return</span> syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)UTEMP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>So this is <code>spawn</code>, sorry for few details. :(</p><hr><h1 id="3-Shell"><a href="#3-Shell" class="headerlink" title="3. Shell"></a>3. Shell</h1><p>Well, shell is actually a external program, that can access certain system APIs. The original MOS Shell is really shabby, so I don’t want to talk much about it.</p><p>But there is one thing, that inspired me. That is, we can parse pipe operator <code>|</code> by a recursive parsing.</p><p>I chose Lab 6 Challenge, so refer to that post for more detailed information on Shell. :)</p><ul><li><a href="/posts/Lab-6-Challenge">Lab 6 Challenge</a></li></ul><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, this is the last Lab of OS. (Or the one but last?) So much to say, but only at the tip of tongue. I had to admit, a nice experience, it is, to make a clumsy operating system from… not totally scratch. But… It is really torturing sometimes, since there are so many obscure bugs. 🤕</p><p>So, I guess, this is it. At least it contribute some good articles to my blog. 😳</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Serialization in Python</title>
      <link href="/posts/JSON-Serialization-in-Python/"/>
      <url>/posts/JSON-Serialization-in-Python/</url>
      
        <content type="html"><![CDATA[<p>In C#, it is really easy to convert between class and JSON object, which brings tremendous convenience for Web development. Recently, I have to use a Python framework Django, and found that there’s no such feature as C#, so I implemented a shabby replica for that by myself.</p><blockquote><p><strong>What you will learn</strong></p><p>In this article, you will get both a serializer and a de-serializer in Python to convert JSON string or <code>dict</code> object into or from a Python object. 😋</p></blockquote><hr><h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h1><p>To start with, you must keep one concept in mind,</p><p style="text-align:center"><i>"Python object is merely a dictionary!"</i></p><p>Not that absolute, but generally speaking, yes.</p><p>We do not begin with scratch, and Python already make <code>json</code> package part of its standard. So we just use it for fundamental parsing.</p><p>So… Let’s start serialization! 😆</p><hr><h1 id="1-JSON-Encoder-Decoder"><a href="#1-JSON-Encoder-Decoder" class="headerlink" title="1. JSON Encoder &amp; Decoder"></a>1. JSON Encoder &amp; Decoder</h1><h2 id="1-1-JSON-Encoder"><a href="#1-1-JSON-Encoder" class="headerlink" title="1.1 JSON Encoder"></a>1.1 JSON Encoder</h2><p>For basic conversion between JSON string and Python <code>dict</code>, we can simply use <code>json</code> module to do the stuffs. However, if you have <code>datetime</code> field in your Python object, you have to manually convert it to string, as JSON doesn’t have corresponding datetime value.</p><p>When you use <code>json.dump</code>, you need a custom encoder to handle <code>datetime</code> field.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedEncoder</span>(json.JSONEncoder):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, datetime.datetime):</span><br><span class="line">            <span class="keyword">return</span> obj.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(obj, datetime.date):</span><br><span class="line">            <span class="keyword">return</span> obj.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> obj.__dict__</span><br></pre></td></tr></table></figure><blockquote><p> Notice that, <code>datetime</code> is derived from <code>date</code>, so you should place instance check of <code>datetime</code> ahead of <code>date</code>. And the format is custom, just make sure they corresponds each other  in Encoder and Decoder. 🫡</p></blockquote><p>If you are time zone aware, for example in  Django project with <code>USE_TZ</code> true, you may need to add an extra conversion. Just add a <code>astimezone</code> method before <code>strftime</code> for <code>datetime.datetime</code> class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.astimezone(datetime.timezone(datetime.timedelta(hours=<span class="number">8</span>))).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Emm… <code>datetime.date</code> doesn’t seem to have such a method. Perhaps because it does not support timezone.</p></blockquote><h2 id="1-2-JSON-Decoder"><a href="#1-2-JSON-Decoder" class="headerlink" title="1.2 JSON Decoder"></a>1.2 JSON Decoder</h2><p>Then, correspondingly, when you use <code>json.loads</code>, you need a custom decoder. However, what is different is that we need to override its <code>object_hook</code> to tell it to try convert <code>str</code> into <code>datetime</code> object. (It seems, in previous version, it is a method, instead of a member.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">object_hook</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> obj.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d\d:\d\d:\d\d$&#x27;</span>, value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    obj[key] = datetime.datetime.strptime(value, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$&#x27;</span>, value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    _date = datetime.datetime.strptime(value, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">                    obj[key] = datetime.date(_date.year, _date.month, _date.day)</span><br><span class="line">                <span class="keyword">except</span> ValueError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>After you spot a <code>str</code> member, you should first check the format of it. Because <code>strptime(value, &#39;%Y-%m-%d %H:%M:%S&#39;)</code> will also treat <code>2023-06-20</code> as a valid one and return <code>2023-06-20 00:00:00</code>, which will leave no chance for <code>datetime.date</code>.</p><p>And if you find out that the <code>str</code> should be a <code>datetime.date</code>, you still have to parse it with <code>datetime.datetime</code>, because the other doesn’t support this method. Then, you need to convert it do <code>datetime.date</code> manually.</p><hr><h1 id="2-Serialization"><a href="#2-Serialization" class="headerlink" title="2. Serialization"></a>2. Serialization</h1><p>Then, with <code>JSONEncoder</code>, you can simply serialize a object into JSON string.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">serialize</span>(<span class="params">obj</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> json.dumps(obj, cls=AdvancedEncoder)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">raise</span> JsonSerializeException(<span class="string">&quot;Failed to serialize&quot;</span>, obj)</span><br></pre></td></tr></table></figure><blockquote><p>Serialization related exceptions will be talked about at the end, since they are not the main topic.</p></blockquote><p>If you don’t want to serialize a object into raw string, you can also serialize it into a <code>dict</code>. Here I use <code>deserialize</code> that will be elaborated later.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">serialize_as_dict</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">return</span> deserialize(serialize(obj))</span><br></pre></td></tr></table></figure><h1 id="3-Deserialization"><a href="#3-Deserialization" class="headerlink" title="3. Deserialization"></a>3. Deserialization</h1><h2 id="3-1-Deserialization"><a href="#3-1-Deserialization" class="headerlink" title="3.1 Deserialization"></a>3.1 Deserialization</h2><p>Compared to serialization, deserialization got one more problem - how to deserialize a JSON object into a object with desired class type? And this is the key point of this article.</p><p>Then, the deserialization can be implemented as such. If <code>cls</code> is assigned, it will try to convert JSON string or object into the given class, and raise exception if type mismatch. Otherwise, it will simply return a <code>dict</code> object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>(<span class="params">obj, cls=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">dict</span>):</span><br><span class="line">        dict_obj = obj</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dict_obj = json.loads(obj, cls=AdvancedDecoder)</span><br><span class="line">        <span class="keyword">except</span> JSONDecodeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> JsonDeserializeException(<span class="string">f&quot;Failed to deserialize!\n\t<span class="subst">&#123;e&#125;</span>&quot;</span>, obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> dict_obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _check_type(dict_obj, cls)</span><br><span class="line">        obj = _construct_cls(dict_obj, cls)</span><br><span class="line">    <span class="keyword">except</span> AttributeError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> JsonDeserializeException(<span class="string">f&quot;Type mismatch, should be <span class="subst">&#123;cls.__name__&#125;</span>\n\t<span class="subst">&#123;e&#125;</span>&quot;</span>, obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>There are two functions that play an important role here, <code>_check_type</code> and <code>_construct_cls</code>. They make sure the JSON object strictly match the given class, and try to build such a class from the JSON object. The implementation of them may be a little hard to understand, though. 😣</p><h2 id="3-2-Check-Type"><a href="#3-2-Check-Type" class="headerlink" title="3.2 Check Type"></a>3.2 Check Type</h2><p>Well, although we can just construct class directly, and raise exception if anything wrong happens, we check the type first to give more detailed information if type mismatch occurs. The principle of this process is to convert target class into <code>dict</code> first, and then compare all fields recursively. You just need to pay more attention to <code>dict</code> and <code>list</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_check_type</span>(<span class="params">src, cls</span>):</span><br><span class="line">    __check_type(src, serialize_as_dict(cls()))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__check_type</span>(<span class="params">src, model</span>):</span><br><span class="line">    t = <span class="built_in">type</span>(model)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">issubclass</span>(t, <span class="built_in">dict</span>):   <span class="comment"># can be simpler as t == dict</span></span><br><span class="line">        __check_type_dict(src, model)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">issubclass</span>(t, <span class="built_in">list</span>): <span class="comment"># can be simpler as t == list</span></span><br><span class="line">        __check_type_list(src, model)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># So ugly</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(src, t) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(model, datetime.date):</span><br><span class="line">            hint = <span class="string">f&quot;Value &#x27;<span class="subst">&#123;src&#125;</span>&#x27; type mismatch:\n\t&quot;</span></span><br><span class="line">            hint += <span class="string">f&quot;Expected: <span class="subst">&#123;<span class="built_in">type</span>(model)&#125;</span>\n\t&quot;</span></span><br><span class="line">            hint += <span class="string">f&quot;     Got: <span class="subst">&#123;<span class="built_in">type</span>(src)&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">raise</span> AttributeError(hint)</span><br></pre></td></tr></table></figure><p>And here is how exactly <code>dict</code> and <code>list</code> are handled here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__check_type_dict</span>(<span class="params">src, model</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(src, <span class="built_in">dict</span>):</span><br><span class="line">        hint = <span class="string">f&quot;Type mismatch, &#x27;<span class="subst">&#123;src&#125;</span>&#x27; should be &#x27;dict&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(hint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> src.keys() == model.keys():</span><br><span class="line">        hint = <span class="string">&quot;Attribute set does not match:\n\t&quot;</span></span><br><span class="line">        hint += <span class="string">f&quot;Expected: <span class="subst">&#123;model.keys()&#125;</span>\n\t&quot;</span></span><br><span class="line">        hint += <span class="string">f&quot;     Got: <span class="subst">&#123;src.keys()&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(hint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> model.keys():</span><br><span class="line">        __check_type(src[key], model[key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__check_type_list</span>(<span class="params">src, model</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(src, <span class="built_in">list</span>):</span><br><span class="line">        hint = <span class="string">f&quot;Type mismatch, &#x27;<span class="subst">&#123;src&#125;</span>&#x27; should be &#x27;list&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(hint)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = model[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;Missing default value for &#x27;<span class="subst">&#123;src&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> src:</span><br><span class="line">        __check_type(v, m)</span><br></pre></td></tr></table></figure><p>Now, you can check if a <code>dict</code> is exactly a desired class or not.</p><h2 id="3-3-Construct-Class"><a href="#3-3-Construct-Class" class="headerlink" title="3.3 Construct Class"></a>3.3 Construct Class</h2><p>After you check the type, you can go build a class from it. This is a little tricky, and <strong>was buggy</strong>. I refined it many times, and I guess it now should work in <strong>most</strong> cases. At least, no bug encountered ever after.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_construct_cls</span>(<span class="params">src, cls</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> __construct_cls(src, cls, cls())</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;Unexpected error: &#x27;<span class="subst">&#123;e&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__construct_cls</span>(<span class="params">src, cls, model</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">issubclass</span>(cls, <span class="built_in">list</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(src, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        obj = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _<span class="built_in">type</span> = <span class="built_in">type</span>(model[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">f&quot;Missing default value for &#x27;<span class="subst">&#123;cls&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> src:</span><br><span class="line">            obj.append(__construct_cls(v, _<span class="built_in">type</span>, model[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(src, cls):</span><br><span class="line">        obj = src</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(src, <span class="built_in">dict</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="keyword">for</span> (k, v) <span class="keyword">in</span> model.__dict__.items():</span><br><span class="line">            obj.__dict__[k] = __construct_cls(src.get(k), <span class="built_in">type</span>(v), v)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>So… again, Python object is just a <code>dict</code> with some extra fields. Emm… Hope it could make it easier for you to understand the code. 🥺</p><hr><h1 id="4-Exception-Declaration"><a href="#4-Exception-Declaration" class="headerlink" title="4. Exception Declaration"></a>4. Exception Declaration</h1><p>At last, I present to you the definition of custom exceptions that I used, to fit the last piece.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JsonException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg</span>):</span><br><span class="line">        self.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;JSON Error: <span class="subst">&#123;self.msg&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonSerializeException</span>(<span class="title class_ inherited__">JsonException</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(msg)</span><br><span class="line">        self.obj = obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        _<span class="built_in">str</span> = <span class="built_in">super</span>().__str__()</span><br><span class="line">        _<span class="built_in">str</span> += <span class="string">f&quot;\n\tOn object: <span class="subst">&#123;<span class="string">&#x27;None&#x27;</span> <span class="keyword">if</span> self.obj <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> self.obj.__dict__&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> _<span class="built_in">str</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JsonDeserializeException</span>(<span class="title class_ inherited__">JsonException</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(msg)</span><br><span class="line">        self.obj = obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        _<span class="built_in">str</span> = <span class="built_in">super</span>().__str__()</span><br><span class="line">        _<span class="built_in">str</span> += <span class="string">f&quot;\n\tOn string: <span class="subst">&#123;<span class="string">&#x27;None&#x27;</span> <span class="keyword">if</span> self.obj <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> self.obj&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> _<span class="built_in">str</span></span><br></pre></td></tr></table></figure><hr><p>So, this is it. And… I guess that Python is not that diabolical. It can be convenient sometimes. Only, some times. 😶‍🌫️</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Remote Interpreter in PyCharm</title>
      <link href="/posts/Configure-Remote-Interpreter-in-PyCharm/"/>
      <url>/posts/Configure-Remote-Interpreter-in-PyCharm/</url>
      
        <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>Although Python is a cross-platform language, sometimes ya know, the package for Linux and Windows are not the same. This will be really annoying.</p><p>For example, when you write a Django project, you may use <code>pymysql</code> for MySQL database connection, which depends on <code>mysqlclient</code>, and then <code>django-cors-headers</code>, even <code>uwsgi</code>. However, for Windows, official package of <code>mysqlclient</code> doesn’t support Python 3.8+, while <code>uwsgi</code> doesn’t support Python 3.7-… 🤬 Therefore, we have to use Linux interpreter.</p><p>But we can only develop on Windows! That’s why this article is here.</p><hr><h1 id="Procedure"><a href="#Procedure" class="headerlink" title="Procedure"></a>Procedure</h1><h2 id="Step-1-Add-SSH-Interpreter"><a href="#Step-1-Add-SSH-Interpreter" class="headerlink" title="Step 1. Add SSH Interpreter"></a>Step 1. Add SSH Interpreter</h2><p>In project settings, click ‘Add Interpreter’ to add a new Python Interpreter, and choose ‘On SSH’.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514223454414.png" alt="image-20230514223454414" style="zoom: 50%;"><p>Then, just enter the host, port, username and password of your remote Linux server. If everything goes well, you can see the output panel of introspect like this.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514223810971.png" alt="image-20230514223810971" style="zoom:50%;"><h2 id="Step-2-Select-Remote-Interpreter"><a href="#Step-2-Select-Remote-Interpreter" class="headerlink" title="Step 2. Select Remote Interpreter"></a>Step 2. Select Remote Interpreter</h2><p>After introspecting, you should then select interpreter on the remote server. Yeah, <code>conda</code>, of course. And leave auto upload choice empty, since we won’t need this.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514224743379.png" alt="image-20230514224743379" style="zoom: 50%;"><blockquote><p><strong>Notice:</strong> The interpreter <strong>must</strong> be the exact Python executable file!</p></blockquote><p>Then, just click ‘Create’, and then ‘Apply’, maybe.</p><h2 id="Step-3-Configure-Deployment"><a href="#Step-3-Configure-Deployment" class="headerlink" title="Step 3. Configure Deployment"></a>Step 3. Configure Deployment</h2><p>Now that we have a remote interpreter, but could not actually run on the remote server. So we have to deploy our project to the remote server.</p><p>Go to settings, go to ‘Deployment’ &gt; ‘Mappings’, select the SSH server you just added, then your favorite deployment path. This is the absolute path on your remote server. You can simply ignore ‘Web path’. Finally, click ‘Apply’ to save the changes.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514231259971.png" alt="image-20230514231259971" style="zoom:50%;"><p>Then, if you have some other requirements, you can go to ‘Options’ section to modify detailed deployment preference.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514230801653.png" alt="image-20230514230801653" style="zoom:50%;"><p>At last, set the project’s remote server to what you just configured.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514231549584.png" alt="image-20230514231549584" style="zoom:67%;"><h2 id="Step-4-Sync-with-Remote-Server"><a href="#Step-4-Sync-with-Remote-Server" class="headerlink" title="Step 4. Sync with Remote Server"></a>Step 4. Sync with Remote Server</h2><p>Now that you have configured everything, you can upload your project to the remote server. Right click on your project, then ‘Deployment’  &gt; ‘Upload to ……’.</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514231756938.png" alt="image-20230514231756938" style="zoom:50%;"><p>Then, you can open the SSH terminal of your remote server and check those files. See, they’re there!</p><img src="/posts/Configure-Remote-Interpreter-in-PyCharm/image-20230514232044799.png" alt="image-20230514232044799" style="zoom:50%;"><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, actually not that complicated, right? Hmm… I have to admit, that, 🙁, that PyCharm… does have its… Err… advantages. But, of course, still no match for Visual Studio. 🥰</p>]]></content>
      
      
      <categories>
          
          <category> Programming Languages </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Configuration </tag>
            
            <tag> Python </tag>
            
            <tag> PyCharm </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Moving WSL to Another Drive</title>
      <link href="/posts/Moving-WSL-to-Another-Drive/"/>
      <url>/posts/Moving-WSL-to-Another-Drive/</url>
      
        <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>WSL is a great stuff! 😍 But sometimes, it may take up too much space in C drive, especially its <code>ext4</code> file system. So in this article, I’d like to show how to move it to another drive so as to release drive storage pressure.</p><img src="/posts/Moving-WSL-to-Another-Drive/image-20230512194401252.png" alt="image-20230512194401252" style="zoom: 67%;"><blockquote><p>Reference: <a href="https://woshub.com/move-wsl-another-drive-windows/">https://woshub.com/move-wsl-another-drive-windows/</a></p></blockquote><hr><h1 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h1><h2 id="Step-1-Preparation"><a href="#Step-1-Preparation" class="headerlink" title="Step 1. Preparation"></a>Step 1. Preparation</h2><p>First, you should make sure you know your username and password of WSL. If not, just open it, and use <code>whoami</code> command to find it out. Then, your WSL should be <strong>shutdown</strong>. In PowerShell, run the following command to make sure your WSL is down.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--list</span> <span class="literal">--verbose</span></span><br><span class="line">wsl <span class="literal">--shutdown</span></span><br></pre></td></tr></table></figure><p>If the output is like , it means your WSL is down. If not, run <code>wsl --shutdown</code> to … shut it down. 😌</p><img src="/posts/Moving-WSL-to-Another-Drive/image-20230512194650823.png" alt="image-20230512194650823" style="zoom: 67%;"><blockquote><p><strong>Notice:</strong> Here, remember the name of your distribution. :)</p></blockquote><p>Then, create some directories. For example, here, I created <code>Backup\</code> for intermediate file backup, and <code>Storage\</code> for the final location.</p><img src="/posts/Moving-WSL-to-Another-Drive/image-20230512200221001.png" alt="image-20230512200221001" style="zoom:67%;"><h2 id="Step-2-Export-WSL-File-System"><a href="#Step-2-Export-WSL-File-System" class="headerlink" title="Step 2. Export WSL File System"></a>Step 2. Export WSL File System</h2><p>Now, it’s time to export WSL to another place. So, open your PowerShell, and execute the following command. Remember to replace the directory with your own.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--export</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> E:\IDE\WSL\Backup\ubuntu.tar</span><br></pre></td></tr></table></figure><p>If everything goes well, you will see this.</p><img src="/posts/Moving-WSL-to-Another-Drive/image-20230512201119392.png" alt="image-20230512201119392" style="zoom: 67%;"><h2 id="Step-3-Import-WSL-File-System"><a href="#Step-3-Import-WSL-File-System" class="headerlink" title="Step 3. Import WSL File System"></a>Step 3. Import WSL File System</h2><p>Before your import stuffs, there are few steps to go. First, you got to unregister your WSL temporarily.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--unregister</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p>And you will see the following output.</p><img src="/posts/Moving-WSL-to-Another-Drive/image-20230512201229395.png" alt="image-20230512201229395" style="zoom:67%;"><p>Then, you can start import. Remember the directory we created before? Will place our file system there.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wsl --import distro destination source</span></span><br><span class="line">wsl <span class="literal">--import</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> E:\IDE\WSL\Storage E:\IDE\WSL\Backup\ubuntu.tar</span><br></pre></td></tr></table></figure><p>And you will se this.</p><img src="/posts/Moving-WSL-to-Another-Drive/image-20230512201755671.png" alt="image-20230512201755671" style="zoom: 67%;"><h2 id="Step-4-Finishing-up"><a href="#Step-4-Finishing-up" class="headerlink" title="Step 4. Finishing up"></a>Step 4. Finishing up</h2><p>Now, finally, we got to set up our WSL again. There won’t be any output on success.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$env:USERPROFILE</span>\AppData\Local\Microsoft\WindowsApps</span><br><span class="line">.\ubuntu2004.exe config <span class="literal">--default-user</span> your_username</span><br></pre></td></tr></table></figure><blockquote><p><strong>Notice:</strong> If you’re using Ubuntu 20.04, the executable file should be <code>ubuntu2004.exe</code>. Otherwise, please use <code>ls</code> command to check it by yourself.</p></blockquote><p>Ta-da!🎉 Now you can run WSL again!</p><hr><p>Easy, huh? :)</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Extract C&amp;C3 Unit Voices</title>
      <link href="/posts/Extract-CnC3-Unit-Voices/"/>
      <url>/posts/Extract-CnC3-Unit-Voices/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>Command &amp; Conquer!!! 🥰 Truly classic RTS game. All units have distinctive voice with them. <del>There voices are so charming 😍.</del> </p><p>In this article, I’ll show you how to extract these awesome voices from Command &amp; Conquer 3: Kane’s Wrath. This can also be applied to C&amp;C3, Read Alert 3.</p><p>Check out <a href="https://www.ea.com/games/command-and-conquer">Command &amp; Conquer - Official EA Site</a>!</p><hr><h1 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h1><h2 id="Step-1-Prepare-Tools"><a href="#Step-1-Prepare-Tools" class="headerlink" title="Step 1. Prepare Tools"></a>Step 1. Prepare Tools</h2><p>We need specific tools to deal with the game data. For some reason, they may be blocked by anti-virus program. But actually they are fine.</p><ul><li><a href="https://www.moddb.com/groups/tiberium-essence-fans/downloads/cc-big-extractor">C&amp;C Big Extractor</a></li><li><a href="https://www.moddb.com/groups/tiberium-essence-fans/downloads/command-conquer-3-asset-extractor">C&amp;C Asset Extractor</a></li></ul><p>They are portable, so you don’t need to install them. Just place them in a suitable place. You should have these files.</p><img src="/posts/Extract-CnC3-Unit-Voices/image-20230507154629301.png" alt="image-20230507154650429" style="zoom: 67%;"><h2 id="Step-2-Extract-Big-File"><a href="#Step-2-Extract-Big-File" class="headerlink" title="Step 2. Extract Big File"></a>Step 2. Extract Big File</h2><p>For C&amp;C 3, the audio files are located here, both <code>Tiberium Wars</code> or <code>Kane&#39;s Wrath</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Installation Path&#x27;\Command and Conquer 3 TW and KW\Command Conquer 3 Kanes Wrath\EnglishAudio\1.0</span><br><span class="line">&#x27;Installation Path&#x27;\Command and Conquer 3 TW and KW\Command Conquer 3 Tiberium Wars\EnglishAudio\1.0</span><br></pre></td></tr></table></figure><img src="/posts/Extract-CnC3-Unit-Voices/image-20230507154848269.png" alt="image-20230507154848269" style="zoom: 67%;"><p>So, then, open <code>C&amp;C Big Extractor</code>, and open <code>EnglishAudio.big</code> file. Then you’ll see plenty of sub-files.</p><img src="/posts/Extract-CnC3-Unit-Voices/image-20230507155248627.png" alt="image-20230507155248627" style="zoom:50%;"><p>Select all of them, and click “Extract Files”, and select your favorite directory to place the extracted files. <strong>Don’t</strong> place them in the game directory to avoid unwanted messy.</p><blockquote><p>You can select the first file, then hold Shift key, then select the last file to select all files. 😉</p></blockquote><p>After extraction, you should see these files in your target directory. See this <code>.manifest</code> file? It works as a dictionary, and will use it later.</p><img src="/posts/Extract-CnC3-Unit-Voices/image-20230507155658409.png" alt="image-20230507155658409" style="zoom:67%;"><h2 id="Step-3-Extract-Asset-Files"><a href="#Step-3-Extract-Asset-Files" class="headerlink" title="Step 3. Extract Asset Files"></a>Step 3. Extract Asset Files</h2><p>All audio files are in <code>.big</code> file, and we have extracted it. And now, we are going to extract audio files from it.</p><p>Open <code>C&amp;C Asset Extractor</code>, click “Open stream” button on the bottom left, and select <code>global_english.manifest</code> you saw in the last step.</p><img src="/posts/Extract-CnC3-Unit-Voices/image-20230507160237439.png" alt="image-20230507160237439" style="zoom:50%;"><p>Ta-da! 🎉 You can see all audio files now, and even preview them in the right panel! So now, select all files, and click “Extract sources” button to extract them to any directory you like. 😁</p><blockquote><p>If you don’t want all of them, you can use the filter above to only extract audios that contains specific letters. Remember to click “Set” button after you change the filter condition.</p></blockquote><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>See, not that difficult, huh? 🥳</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command &amp; Conquer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy Hexo on Remote Server</title>
      <link href="/posts/Deploy-Hexo-on-Remote-Server/"/>
      <url>/posts/Deploy-Hexo-on-Remote-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>It’s been a while since I launched this blog, and now I’ve upgraded my method to deploy it. So here it is, as a record of all these. If you haven’t got your Hexo blog, refer to this passage: <a href="/posts/Build-a-Blog-with-Hexo/">Build a Blog with Hexo</a>.</p><hr><h1 id="1-Deploy-on-GitHub"><a href="#1-Deploy-on-GitHub" class="headerlink" title="1. Deploy on GitHub"></a>1. Deploy on GitHub</h1><p>This time, we’re not going to use Hexo’s git deployment. Instead, CI&#x2F;CD will be applied.</p><h2 id="1-1-Initialize-Git-Repository"><a href="#1-1-Initialize-Git-Repository" class="headerlink" title="1.1 Initialize Git Repository"></a>1.1 Initialize Git Repository</h2><p>To achieve CI&#x2F;CD, we need two GitHub repository. One for our source code, and the other for the final publish pages. For example, here I got <code>Lord-Turmoil.github.io</code> and <code>Blog</code>.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506160533685.png" alt="image-20230506160533685" style="zoom: 50%;"><blockquote><p>For the final pages, it is recommended to be placed in <code>$&#123;Your GitHub Nickname&#125;.github.io</code> repository, as it is the default name for GitHub pages. The other can be random, and you can set it private in case other people see your sensitive information in the source code.</p></blockquote><p>Later, when I say “Blog Repo”, I mean source code repository, and “Page Repo” for the so called what <code>github.io</code> repository.</p><h2 id="1-2-Add-GitHub-Action"><a href="#1-2-Add-GitHub-Action" class="headerlink" title="1.2 Add GitHub Action"></a>1.2 Add GitHub Action</h2><p>Well, in your Hexo root directory, where <code>_config.yml</code> is located, create <code>.github/workflows/autodeploy.yaml</code>. Don’t care about other files. (But make sure it can work locally using <code>hexo server</code>.) They are post generated.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506161104686.png" alt="image-20230506161104686" style="zoom:50%;"><p>Then, fill the file with the following code.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Auto-Deploy</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># pay attention to this branch</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">NodeJS</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;16.x&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache-npm</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="comment"># If you want to fix image problem</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">$&#123;&#123;</span> <span class="string">steps.cache-npm.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &#x27;Installing &quot;hexo-asset-image&quot;...&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-asset-image --save</span></span><br><span class="line"><span class="string">          echo &#x27;Copying &quot;patch/hexo-asset-image.js&quot; to &quot;node_modules/hexo-asset-image/index.js&quot;...&#x27;</span></span><br><span class="line"><span class="string">          cp patch/hexo-asset-image.js node_modules/hexo-asset-image/index.js</span></span><br><span class="line"><span class="string">          echo &#x27;Dependency install complete.&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">static</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Github</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">ghp_*************</span></span><br><span class="line">          <span class="attr">repository-name:</span> <span class="string">******/******.github.io</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">          <span class="attr">folder:</span> <span class="string">public</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; github.event.head_commit.message &#125;&#125;</span> Updated By Github Actions&quot;</span></span><br></pre></td></tr></table></figure><p>For the final <code>Deploy to Github</code> action, just replace <code>token</code> and <code>repository-name</code> with your own <strong>Page Repo</strong>. Be sure to check all <strong>branch</strong> entries, because they are most likely to cause errors.</p><blockquote><p>If you want to solve image problem. What’s the problem? You can refer to the troubleshoot part of  <a href="/posts/Build-a-Blog-with-Hexo/">Build a Blog with Hexo</a>. If so, create file <code>patch/hexo-asset-image.js</code> under Hexo root folder, and copy the following content into it, so that related problems can be fixed.</p><details class="toggle"><summary class="toggle-button" style>hexo-asset-image.js</summary><div class="toggle-content"><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">    <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">        <span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">        <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">        link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">                <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">                    <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">                    <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">                       !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">                        <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">                        <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">                        <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">                            srcArray.<span class="title function_">shift</span>();</span><br><span class="line">                        src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">                        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></div></details></blockquote><h2 id="1-3-Start-CI-CD"><a href="#1-3-Start-CI-CD" class="headerlink" title="1.3 Start CI&#x2F;CD"></a>1.3 Start CI&#x2F;CD</h2><p>Initialize Git repository under Hexo root folder, and add a <code>.gitignore</code> file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure><blockquote><p>Notice that, if your theme uses git, you should first move that <code>.git/</code> hidden folder under the theme’s directory in case the outer Git repository initialize improperly. After initialization, you can move it back to where it was.</p></blockquote><p>Now, push everything to <strong>Blog Repo</strong>, and see the magic of CI&#x2F;CD! 🎉</p><hr><h1 id="2-Deploy-on-Windows-Server"><a href="#2-Deploy-on-Windows-Server" class="headerlink" title="2. Deploy on Windows Server"></a>2. Deploy on Windows Server</h1><h2 id="2-1-Prepare-FTP"><a href="#2-1-Prepare-FTP" class="headerlink" title="2.1 Prepare FTP"></a>2.1 Prepare FTP</h2><blockquote><p>Reference: <a href="https://hexo.io/docs/one-command-deployment#FTPSync">https://hexo.io/docs/one-command-deployment#FTPSync</a></p></blockquote><p>If we want to deploy our blog on a raw server, we can only use FTP. There are two official FTP plugin of Hexo, here I use  <code>SFTP</code>. So first, install the plugin. Notice that this is done under root directory of Hexo.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-sftp --save</span><br></pre></td></tr></table></figure><p>Then, in your <code>_config.yml</code>, add deploy option. Replace entry with your own. Perhaps you should check your server’s FTP port, and open the corresponding firewall.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">sftp</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&lt;host&gt;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&lt;user&gt;</span></span><br><span class="line">  <span class="attr">pass:</span> <span class="string">&lt;password&gt;</span></span><br><span class="line">  <span class="attr">remotePath:</span> [<span class="string">remote</span> <span class="string">path</span>]</span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">forceUpload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">concurrency:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Setup-IIS"><a href="#2-2-Setup-IIS" class="headerlink" title="2.2 Setup IIS"></a>2.2 Setup IIS</h2><p>Well, it’s time to setup your remote Windows server.</p><h3 id="Step-1-Create-Physical-Path"><a href="#Step-1-Create-Physical-Path" class="headerlink" title="Step 1. Create Physical Path"></a>Step 1. Create Physical Path</h3><p>Create the root folder of your website. Choose your favorite directory and name. 😉 For example, I call it <code>publish</code>. Remember to replace it with your own in the following steps.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-01.png" alt="hexo-01" style="zoom: 67%;"><h3 id="Step-2-Add-New-Website"><a href="#Step-2-Add-New-Website" class="headerlink" title="Step 2. Add New Website"></a>Step 2. Add New Website</h3><p>Open IIS server, right-click on ‘Website’, and choose ‘Add Website’.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506215149230.png" alt="image-20230506215149230" style="zoom:50%;"><p>In the following dialog, just fill the blank I circled. Since our website is not ready yet (an empty folder), we choose not to launch it right now. As for the port, choose it as you will. 80 is the default http port, though.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-03.png" alt="hexo-03" style="zoom:80%;"><h3 id="Step-3-Configure-Website"><a href="#Step-3-Configure-Website" class="headerlink" title="Step 3. Configure Website"></a>Step 3. Configure Website</h3><p>Now, our folder cannot be accessed by others due to the default permission. So we here have to edit the permission of our website.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-04.png" alt="hexo-04" style="zoom:80%;"><p>Then in the following dialogs, do things as I marked.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-05.png" alt="hexo-05" style="zoom:50%;"><p>And finally, grant everyone full control of this folder.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-06.png" alt="hexo-06" style="zoom:50%;"><h3 id="Step-4-Configure-Application-Pool"><a href="#Step-4-Configure-Application-Pool" class="headerlink" title="Step 4. Configure Application Pool"></a>Step 4. Configure Application Pool</h3><p>Go to ‘Application Pool’, right-click on our pool, and select ‘Advanced Settings’.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-07.png" alt="image-20230507224232976" style="zoom:50%;"><blockquote><p>In this screenshot, I already configured the application pool. So you may see different properties.</p></blockquote><p>There are two place to change. Just do as the pictures say.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-08-1.png" alt="hexo-08-1" style="zoom:50%;"><img src="/posts/Deploy-Hexo-on-Remote-Server/hexo-08-2.png" alt="hexo-08-2" style="zoom:50%;"><p>OK, your IIS is correctly configured. 🥳</p><h2 id="2-3-Deploy-Your-Blog"><a href="#2-3-Deploy-Your-Blog" class="headerlink" title="2.3 Deploy Your Blog"></a>2.3 Deploy Your Blog</h2><p>For FTP deployment, you have to compile the blog locally.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>Then, you will see a <code>public\</code> folder created, or updated. Actually, the content in this folder is the final pages.</p><blockquote><p>According to Hexo document, you may need to copy the content of the <code>public\</code> to your server manually the first time you use FTP deployment. </p><p><strong>Don’t</strong> copy <code>public\</code> directly! Instead, go into it, and copy all subfolders and items to the remote server target directory. Since if you copy <code>public\</code> folder directly, it will override the permission we set before. 😨</p></blockquote><p>You may ask why not integrate this into CI&#x2F;CD? Because I find that FTP may not be that stable, and may take too long, or fail in the half way.</p><p>Now, execute <code>hexo deploy</code> to transfer <code>public</code> folder to our remote server.</p><blockquote><p>FTP is… not that stable, so it may stuck somewhere. You can be patient, or simple <code>Ctrl + C</code> to stop it, and execute <code>hexo deploy</code> again. :)</p></blockquote><h2 id="2-4-Configure-404"><a href="#2-4-Configure-404" class="headerlink" title="2.4 Configure 404"></a>2.4 Configure 404</h2><p>Since we host our website using IIS, there is one more thing to do - configure 404 page. Especially if your Hexo theme has one.</p><p>First, go to IIS, select our website. On the middle panel, double-click on ‘Error Page’.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506194135890.png" alt="image-20230506194135890" style="zoom:50%;"><p>Then, in the following page, right click on code 404, and set its handling page to our <code>404.html</code>.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506194107264.png" alt="image-20230506194107264" style="zoom:50%;"><p>This page depends on your blog. Just find the corresponding 404 page of your own. And remember the leading <code>/</code>, which means the root directory of your website.</p><blockquote><p>Here is my example.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506194334066.png" alt="image-20230506194334066" style="zoom:50%;"></blockquote><p>Then, you should find that there’s a new <code>web.config</code> file generated, it stores the custom settings of IIS.</p><blockquote><p><strong>Important!</strong> This <code>web.config</code> does not exist on our local machine. Since FTP sync will make remote the same as local, this configuration file <strong>will be deleted</strong> after that, and our configuration will then lost. So we must copy it to our local <code>public</code> folder so that this file can be properly synced. 😋</p></blockquote><h2 id="2-5-Automatic-Batch"><a href="#2-5-Automatic-Batch" class="headerlink" title="2.5 Automatic Batch"></a>2.5 Automatic Batch</h2><p>If you don’t want to use <code>hexo</code> command every time, or copy <code>web.config</code> each time after a <code>clean</code>, you can use my batch file to do so. It doesn’t have to be <code>hx.bat</code>, rename it anything you like. 😉 And remember to replace all directories with your own. Basic usage is as following.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hx.bat deploy    <span class="comment"># hexo generate &amp;&amp; hexo deploy</span></span><br><span class="line">hx.bat deploy <span class="literal">-c</span> <span class="comment"># hexo clean &amp;&amp; hexo generate &amp;&amp; (do patch) &amp;&amp; hexo deploy</span></span><br><span class="line">hx.bat server    <span class="comment"># hexo generate &amp;&amp; hexo server</span></span><br><span class="line">hx.bat server <span class="literal">-c</span> <span class="comment"># hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server</span></span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>hx.bat</summary><div class="toggle-content"><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Changing working directory...</span><br><span class="line">E: &amp;&amp; <span class="built_in">cd</span> <span class="string">&quot;E:\Webpage\Blog\index&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;deploy&quot;</span> (</span><br><span class="line"><span class="built_in">echo</span> Starting deploy...</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%2&quot;</span>==<span class="string">&quot;-c&quot;</span> (</span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Cleaning <span class="keyword">data</span>...</span><br><span class="line">call hexo clean</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Generating <span class="keyword">static</span> files...</span><br><span class="line">call hexo generate</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Applying patch...</span><br><span class="line"><span class="built_in">copy</span> <span class="string">&quot;patch\web.config&quot;</span> public</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Deploying to Windows Server...</span><br><span class="line">call hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Deploy complete</span><br><span class="line">) <span class="keyword">else</span> <span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;server&quot;</span> (</span><br><span class="line"><span class="built_in">echo</span> Deploy on localhost...</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%2&quot;</span>==<span class="string">&quot;-c&quot;</span> (</span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Cleaning <span class="keyword">data</span>...</span><br><span class="line">call hexo clean</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Generating <span class="keyword">static</span> files...</span><br><span class="line">call hexo generate</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ________________________________________</span><br><span class="line"><span class="built_in">echo</span> Starting local server...</span><br><span class="line">call hexo server</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"><span class="built_in">echo</span> Argument error!</span><br><span class="line"><span class="built_in">echo</span> - hx deploy [-<span class="type">c</span>]</span><br><span class="line"><span class="built_in">echo</span> - hx server [-<span class="type">g</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div></details><h2 id="2-6-Troubleshoot"><a href="#2-6-Troubleshoot" class="headerlink" title="2.6 Troubleshoot"></a>2.6 Troubleshoot</h2><p>You may encounter some wired error, such as certain file cannot be accessed, as one or more process is using it. This might be caused by FTP service if there are any failure during synchronization. If so, go to resource monitor, and search for the relevant file, then close the related process.</p><img src="/posts/Deploy-Hexo-on-Remote-Server/image-20230506170929148.png" alt="image-20230506170929148" style="zoom:50%;"><blockquote><p>I think the process that cause this problem is related to FTP service. And of course, <code>explorer.exe</code> (File Explorer) may use this file, too. So, don’t kill our lovely file explore. Stop just other processes. 🥺</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deployment </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File System IPC</title>
      <link href="/posts/File-System-IPC/"/>
      <url>/posts/File-System-IPC/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-2023-Spring-OS"><a href="#BUAA-2023-Spring-OS" class="headerlink" title="BUAA 2023 Spring OS"></a>BUAA 2023 Spring OS</h1><hr><blockquote><p><strong>Notice:</strong> This article serves as a DLC for <a href="../Lab-5-Reflection/">Lab 5 Reflection</a>. The main stuffs are there. 🫡</p><p><strong>Warning:</strong> If you are confused about some concepts in this article, or feel contents missing, please refer to that post first. (You can open two browser tabs at the same time.) 😉 </p></blockquote><hr><h1 id="1-Workflow"><a href="#1-Workflow" class="headerlink" title="1. Workflow"></a>1. Workflow</h1><h2 id="1-1-Main-Loop"><a href="#1-1-Main-Loop" class="headerlink" title="1.1 Main Loop"></a>1.1 Main Loop</h2><p>As we know, File System is an independent process in user space, so it has a main function. Let’s see what does it do.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    user_assert(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> File) == BY2FILE);</span><br><span class="line">    debugf(<span class="string">&quot;FS is running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    serve_init();</span><br><span class="line">    fs_init();</span><br><span class="line">    serve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, we can see that after two initialization, it will start to server other processes.</p><h2 id="1-2-Initialization"><a href="#1-2-Initialization" class="headerlink" title="1.2 Initialization"></a>1.2 Initialization</h2><p>File System’s initialization can be divided into two parts as we see above.</p><h3 id="1-2-1-serve-init"><a href="#1-2-1-serve-init" class="headerlink" title="1.2.1 serve_init"></a>1.2.1 <code>serve_init</code></h3><p>This part is quite simple, but it involves another concept - <code>opentab</code>. It is the global record for open files. And here we just initialized all the <code>opentab</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">serve_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Set virtual address to map.</span></span><br><span class="line">    u_int va = FILEVA;</span><br><span class="line">    <span class="comment">// Initial array opentab.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXOPEN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        opentab[i].o_fileid = i;</span><br><span class="line">        opentab[i].o_ff = (<span class="keyword">struct</span> Filefd*)va;</span><br><span class="line">        va += BY2PG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So let’s see what the hell <code>opentab</code> is. And oh, here it is. With every bit set to zero, except <code>opentab[0]</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Open</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span>* <span class="title">o_file</span>;</span> <span class="comment">// mapped descriptor for open file</span></span><br><span class="line">    u_int o_fileid;     <span class="comment">// file id</span></span><br><span class="line">    <span class="type">int</span> o_mode;         <span class="comment">// open mode</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">o_ff</span>;</span> <span class="comment">// va of filefd page</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize to force into data section</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Open</span> <span class="title">opentab</span>[<span class="title">MAXOPEN</span>] =</span> &#123; &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>As we know, if we do not initialize <code>opentab</code>, it will be placed to <code>.bss</code> section. So here we make a intentionally nonsense initialization to make it into <code>.data</code> section.</p><span class="hide-inline"><button type="button" class="hide-button" style>The reason is that...</button><span class="hide-content">How I suppose to know? 😭</span></span></blockquote><p>And, the <code>Open::o_mode</code> here is the same as the open mode in file. The available modes are defined in <code>user/include/lib.h</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> O_RDONLY  0x0000  <span class="comment">/* open for reading only */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> O_WRONLY  0x0001  <span class="comment">/* open for writing only */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> O_RDWR    0x0002  <span class="comment">/* open for reading and writing */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> O_ACCMODE 0x0003  <span class="comment">/* mask for above modes */</span></span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-fs-init"><a href="#1-2-2-fs-init" class="headerlink" title="1.2.2 fs_init"></a>1.2.2 <code>fs_init</code></h3><p>This part is more complicated, and can be divided again into three parts.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fs_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    read_super();</span><br><span class="line">    check_write_block();</span><br><span class="line">    read_bitmap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>read_super</summary><div class="toggle-content"><p>Here, we simple read the super block from the disk and validate its content.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  fs/fs.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_super</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1: read super block.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = read_block(<span class="number">1</span>, &amp;blk, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        user_panic(<span class="string">&quot;cannot read superblock: %e&quot;</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* super = blk;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Check fs magic nunber.</span></span><br><span class="line">    <span class="keyword">if</span> (super-&gt;s_magic != FS_MAGIC)</span><br><span class="line">        user_panic(<span class="string">&quot;bad file system magic number %x %x&quot;</span>, super-&gt;s_magic, FS_MAGIC);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: validate disk size.</span></span><br><span class="line">    <span class="keyword">if</span> (super-&gt;s_nblocks &gt; DISKMAX / BY2BLK)</span><br><span class="line">        user_panic(<span class="string">&quot;file system is too large&quot;</span>);</span><br><span class="line"></span><br><span class="line">    debugf(<span class="string">&quot;superblock is good\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle"><summary class="toggle-button" style>check_write_block</summary><div class="toggle-content"><p>Well, I think this serves as a self diagnose?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">check_write_block</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    super = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// backup the super block.</span></span><br><span class="line">    <span class="comment">// copy the data in super block to the first block on the disk.</span></span><br><span class="line">    read_block(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span>*)diskaddr(<span class="number">0</span>), (<span class="type">char</span>*)diskaddr(<span class="number">1</span>), BY2PG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// smash it</span></span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)diskaddr(<span class="number">1</span>), <span class="string">&quot;OOPS!\n&quot;</span>);</span><br><span class="line">    write_block(<span class="number">1</span>);</span><br><span class="line">    user_assert(block_is_mapped(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear it out</span></span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, diskaddr(<span class="number">1</span>));</span><br><span class="line">    user_assert(!block_is_mapped(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate the data read from the disk.</span></span><br><span class="line">    read_block(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    user_assert(<span class="built_in">strcmp</span>((<span class="type">char</span>*)diskaddr(<span class="number">1</span>), <span class="string">&quot;OOPS!\n&quot;</span>) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// restore the super block.</span></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span>*)diskaddr(<span class="number">1</span>), (<span class="type">char</span>*)diskaddr(<span class="number">0</span>), BY2PG);</span><br><span class="line">    write_block(<span class="number">1</span>);</span><br><span class="line">    super = (<span class="keyword">struct</span> Super*)diskaddr(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><span class="hide-inline"><button type="button" class="hide-button" style>The reason we do this is that…</button><span class="hide-content">Again! How I suppose to know? 🥺</span></span></p></blockquote></div></details><details class="toggle"><summary class="toggle-button" style>read_bitmap</summary><div class="toggle-content"><p>We’ve already introduced it in that post, so here is the code again. 🤪</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">uint32_t</span>* bitmap;</span><br><span class="line"><span class="type">void</span> <span class="title function_">read_bitmap</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* blk = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1: Calculate the number of the bitmap blocks, and read them into memory.</span></span><br><span class="line">    u_int nbitmap = super-&gt;s_nblocks / BIT2BLK + !!(super-&gt;s_nblocks % BIT2BLK);</span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; nbitmap; i++)</span><br><span class="line">        read_block(i + <span class="number">2</span>, blk, <span class="number">0</span>);</span><br><span class="line">    bitmap = diskaddr(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Make sure the reserved and root blocks are marked in-use.</span></span><br><span class="line">    user_assert(!block_is_free(<span class="number">0</span>));</span><br><span class="line">    user_assert(!block_is_free(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: Make sure all bitmap blocks are marked in-use.</span></span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; nbitmap; i++)</span><br><span class="line">        user_assert(!block_is_free(i + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    debugf(<span class="string">&quot;read_bitmap is good\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="1-3-Serve"><a href="#1-3-Serve" class="headerlink" title="1.3 Serve"></a>1.3 Serve</h2><p>After initialization, we can start to serve other processes. It is a never ending loop. See it by your self.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">serve</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    u_int req, whom, perm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; ; )</span><br><span class="line">    &#123;</span><br><span class="line">        perm = <span class="number">0</span>;</span><br><span class="line">        req = ipc_recv(&amp;whom, (<span class="type">void</span>*)REQVA, &amp;perm);</span><br><span class="line">        <span class="comment">// All requests must contain an argument page</span></span><br><span class="line">        <span class="keyword">if</span> (!(perm &amp; PTE_V))</span><br><span class="line">        &#123;</span><br><span class="line">            debugf(<span class="string">&quot;Invalid request from %08x: no argument page\n&quot;</span>, whom);</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// just leave it hanging, waiting for the next request.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (req)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_OPEN:</span><br><span class="line">                serve_open(whom, (<span class="keyword">struct</span> Fsreq_open*)REQVA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_MAP:</span><br><span class="line">                serve_map(whom, (<span class="keyword">struct</span> Fsreq_map*)REQVA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_SET_SIZE:</span><br><span class="line">                serve_set_size(whom, (<span class="keyword">struct</span> Fsreq_set_size*)REQVA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_CLOSE:</span><br><span class="line">                serve_close(whom, (<span class="keyword">struct</span> Fsreq_close*)REQVA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_DIRTY:</span><br><span class="line">                serve_dirty(whom, (<span class="keyword">struct</span> Fsreq_dirty*)REQVA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_REMOVE:</span><br><span class="line">                serve_remove(whom, (<span class="keyword">struct</span> Fsreq_remove*)REQVA);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FSREQ_SYNC:</span><br><span class="line">                serve_sync(whom);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                debugf(<span class="string">&quot;Invalid request code %d from %08x\n&quot;</span>, whom, req);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * IPC receiver does not map page to va by itself, this map is done</span></span><br><span class="line"><span class="comment"> * by sender at the end of transaction. So... to save memory? Receiver</span></span><br><span class="line"><span class="comment"> * here has to unmap this page by itself.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)REQVA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The involved macros and request structures are defined in <code>user/include/fdreq.h</code></p></blockquote><p>So this is just a collection of requests, huh? (<del>Why not use a function pointer table like exceptions?</del> 🫤)</p><hr><h1 id="2-File-System-IPC"><a href="#2-File-System-IPC" class="headerlink" title="2. File System IPC"></a>2. File System IPC</h1><p>As user processes, we simply send a request to File System to get the corresponding service, and waiting the response from File System. For File System, as mentioned above, we just receive the request, handle it, and send the response back to the sender. Nice communication, right? 🤨</p><h2 id="2-1-IPC-Library-Function"><a href="#2-1-IPC-Library-Function" class="headerlink" title="2.1 IPC Library Function"></a>2.1 IPC Library Function</h2><p>In the last Lab, we implemented IPC related system calls, but we didn’t mention their user library interface. So… Here they are.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ipc_send</span><span class="params">(u_int whom, u_int val, <span class="type">const</span> <span class="type">void</span>* srcva, u_int perm)</span>;</span><br><span class="line">u_int <span class="title function_">ipc_recv</span><span class="params">(u_int* whom, <span class="type">void</span>* dstva, u_int* perm)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>In case you get confused, I’d like to have a brief explanation on its parameters. The most confusing ones may be <code>srcva</code>, <code>dstva</code> and <code>perm</code>.</p><p>At first, <code>ipc_recv</code> must be called by the receiver to enable IPC receiving. Then, it will <strong>block</strong> the process until a message is sent. Here, <code>whom</code> and <code>perm</code> are <strong>as a return values</strong>. The only <strong>in</strong> parameter is <code>dstva</code>, it indicates, if you want, the virtual address of the receiving page.</p><p>Then, the sender can send the message by <code>ipc_send</code>. Here, all parameters are in, with <code>whom</code> indicates the target process ID, <code>val</code> the value, <code>srcva</code> and <code>perm</code> for the page and permission if you want. This function will call <code>syscall_ipc_try_send</code>, which will return <code>-E_IPC_NOT_RECV</code> if target and result in a busy wait.</p><p><strong>Important!</strong> When page is delivered, it will <strong>not</strong> create a new physical page, but only map the original page to <code>dstva</code> in <code>ipc_recv</code> with a new permission <code>perm</code> we set in <code>ipc_send</code>. So the receiver and sender may view the same page with different permissions.</p></blockquote><details class="toggle"><summary class="toggle-button" style>ipc_send/recv</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/ipc.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ipc_send</span><span class="params">(u_int whom, u_int val, <span class="type">const</span> <span class="type">void</span>* srcva, u_int perm)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="keyword">while</span> ((r = syscall_ipc_try_send(whom, val, srcva, perm)) == -E_IPC_NOT_RECV)</span><br><span class="line">&#123;</span><br><span class="line">syscall_yield();</span><br><span class="line">&#125;</span><br><span class="line">user_assert(r == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u_int <span class="title function_">ipc_recv</span><span class="params">(u_int* whom, <span class="type">void</span>* dstva, u_int* perm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r = syscall_ipc_recv(dstva);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>)</span><br><span class="line">        user_panic(<span class="string">&quot;syscall_ipc_recv err: %d&quot;</span>, r);</span><br><span class="line">    <span class="keyword">if</span> (whom)</span><br><span class="line">        *whom = env-&gt;env_ipc_from;</span><br><span class="line">    <span class="keyword">if</span> (perm)</span><br><span class="line">        *perm = env-&gt;env_ipc_perm;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;env_ipc_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="2-2-File-System-IPC-Interface"><a href="#2-2-File-System-IPC-Interface" class="headerlink" title="2.2 File System IPC Interface"></a>2.2 File System IPC Interface</h2><p>To simplify IPC <strong>to</strong> File System, user library provided some interface for such IPCs. However, the are used as auxiliary functions and are not exposed directly to user process. (Although declared in <code>user/include/lib.h</code>, it doesn’t seem to be a good isolation.)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, u_int omode, <span class="keyword">struct</span> Fd* fd)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_map</span><span class="params">(u_int fileid, u_int offset, <span class="type">void</span>* dstva)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_set_size</span><span class="params">(u_int fileid, u_int size)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_close</span><span class="params">(u_int fileid)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_dirty</span><span class="params">(u_int fileid, u_int offset)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_remove</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_sync</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>I just… just don’t understand why not specify parameter name in header file. 🤬 It is really annoying. And it doesn’t seem to have optional definitions. (Perhaps there will be?)</p></blockquote><p>These functions just works as a parameter wrapper. They simply wrap parameter to corresponding request structures, and send it to File System. Actually, they ended up by calling another auxiliary function to actually send the request.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/fsipc.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">fsipc</span><span class="params">(u_int type, <span class="type">void</span>* fsreq, <span class="type">void</span>* dstva, u_int* perm)</span></span><br><span class="line">&#123;</span><br><span class="line">u_int whom;<span class="comment">// redundant</span></span><br><span class="line"><span class="comment">// Our file system server must be the 2nd env.</span></span><br><span class="line">ipc_send(envs[<span class="number">1</span>].env_id, type, fsreq, PTE_D);</span><br><span class="line"><span class="keyword">return</span> ipc_recv(&amp;whom, dstva, perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>type</code> is just the IPC enumeration, such as <code>FSREQ_OPEN</code>, <code>FSREQ_CLOSE</code> as mentioned in <code>1.3</code>.</p><p><code>perm</code> will be combined with <code>PTE_V</code> to be the permission bits of the page at <code>dstva</code>. It intend to make the page writable because this is where our file descriptor locates (I’ll talk about this later), and we want File System to initialize this page for us.</p></blockquote><p>For <code>fsipc_xxx</code> functions, they will wrap request parameters, and finally call <code>fsipc</code> to send the request.</p><details class="toggle"><summary class="toggle-button" style>fsipc_open</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/fsipc.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_open</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> req_path[MAXPATHLEN];</span><br><span class="line">u_int req_omode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user/lib/fsipc.c</span></span><br><span class="line">u_char fsipcbuf[BY2PG] __attribute__((aligned(BY2PG))); <span class="comment">// shared by all fsipc_xxx functions</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, u_int omode, <span class="keyword">struct</span> Fd* fd)</span></span><br><span class="line">&#123;</span><br><span class="line">u_int perm;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_open</span>* <span class="title">req</span>;</span></span><br><span class="line">req = (<span class="keyword">struct</span> Fsreq_open*)fsipcbuf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(path) &gt;= MAXPATHLEN)</span><br><span class="line"><span class="keyword">return</span> -E_BAD_PATH;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>((<span class="type">char</span>*)req-&gt;req_path, path);</span><br><span class="line">req-&gt;req_omode = omode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fsipc(FSREQ_OPEN, req, fd, &amp;perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>The memory exchange during file IPC may be a little confusing. Take <code>open</code> as an example. The interface for user is only <code>open</code>. It will first call <code>fsipc_open</code> to send <code>fsipcbuf</code> to file system, which contains <code>Fsreq_open</code> as raw data. Then, File System receives this page, (only one physical page, but two references!), and create a physical page to store the newly create file descriptor, and make pointer <code>Open::off</code> points at it. Finally, File System deliver this page to user. Similarly, user only share the reference. 😉</p><p><img src="/posts/File-System-IPC/FS-IPC.svg" alt="FS-IPC"></p><hr><h1 id="3-File-System-Handler"><a href="#3-File-System-Handler" class="headerlink" title="3. File System Handler"></a>3. File System Handler</h1><h2 id="3-1-Handler-Function"><a href="#3-1-Handler-Function" class="headerlink" title="3.1 Handler Function"></a>3.1 Handler Function</h2><p>After a request is received, File System will call corresponding handler functions to do the actual work. There are quite a lot request handlers, as you can see in <code>serve</code> function, but generally of the same pattern. So here I just want to give several examples. They are all defined locally in <code>fs/serv.c</code>.</p><p><code>serve_open</code> will initialize file description page the user process passes to it. Of course, it will record open file in global tab.</p><details class="toggle"><summary class="toggle-button" style>serve_open</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">serve_open</span><span class="params">(u_int envid, <span class="keyword">struct</span> Fsreq_open* rq)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Open</span>* <span class="title">o</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find a file id.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = open_alloc(&amp;o)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open the file.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span>* <span class="title">f</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = file_open(rq-&gt;req_path, &amp;f)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save the file pointer.</span></span><br><span class="line">    o-&gt;o_file = f;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fill out the Filefd structure</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">ff</span> =</span> (<span class="keyword">struct</span> Filefd*)o-&gt;o_ff;<span class="comment">// redundant conversion</span></span><br><span class="line">    ff-&gt;f_file = *f;</span><br><span class="line">    ff-&gt;f_fileid = o-&gt;o_fileid;</span><br><span class="line">    o-&gt;o_mode = rq-&gt;req_omode;</span><br><span class="line">    ff-&gt;f_fd.fd_omode = o-&gt;o_mode;</span><br><span class="line">    ff-&gt;f_fd.fd_dev_id = devfile.dev_id; <span class="comment">// &#x27;devfile&#x27; is the global dev struct.</span></span><br><span class="line"></span><br><span class="line">    ipc_send(envid, <span class="number">0</span>, o-&gt;o_ff, PTE_D | PTE_LIBRARY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>❗ <strong>Important:</strong> Here is the first time we use <code>PTE_LIBRARY</code> to mark a page. That’s because file descriptor is shared between parent process and child process. With this flag, <code>fork</code> will not mark this page <code>COW</code> when duplicate pages of parent process.</p><p>ℹRefer to this post if you forget about <code>fork</code>: <a href="/posts/Lab-4-Reflection/">Lab 4 Reflection</a>. 😱</p><p>⚠ <strong>Reminder:</strong> <code>Open::o_fileid</code> is not the return value of <code>open</code>, which will be introduced later.</p></blockquote></div></details><p><code>serve_map</code> will map the given page to requested virtual address. This is used to load file from disk. You’ll get a clear view of it later in the user library function <code>open</code>. 😌</p><details class="toggle"><summary class="toggle-button" style>serve_map</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">serve_map</span><span class="params">(u_int envid, <span class="keyword">struct</span> Fsreq_map* rq)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Open</span>* <span class="title">pOpen</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = open_lookup(envid, rq-&gt;req_fileid, &amp;pOpen)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u_int filebno = rq-&gt;req_offset / BY2BLK;</span><br><span class="line">    <span class="type">void</span>* blk;</span><br><span class="line">    <span class="keyword">if</span> ((r = file_get_block(pOpen-&gt;o_file, filebno, &amp;blk)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ipc_send(envid, <span class="number">0</span>, blk, PTE_D | PTE_LIBRARY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Well, nothing to say, just remove the file.</p><details class="toggle"><summary class="toggle-button" style>serve_remove</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">serve_remove</span><span class="params">(u_int envid, <span class="keyword">struct</span> Fsreq_remove* rq)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: Remove the file specified in &#x27;rq&#x27; using &#x27;file_remove&#x27; and store its return value.</span></span><br><span class="line">    file_remove(rq-&gt;req_path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Respond the return value to the requester &#x27;envid&#x27; using &#x27;ipc_send&#x27;.</span></span><br><span class="line">    ipc_send(envid, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="3-2-Auxiliary-Function"><a href="#3-2-Auxiliary-Function" class="headerlink" title="3.2 Auxiliary Function"></a>3.2 Auxiliary Function</h2><p>If you go through the implementations of these IPC interfaces, you may see some essential functions that I never mentioned before. You can skip this part if you’re not interested at such details.</p><h3 id="2-3-1-serve-open"><a href="#2-3-1-serve-open" class="headerlink" title="2.3.1 serve_open"></a>2.3.1 <code>serve_open</code></h3><p>In this handler function, we’ll open a file, and initialize the file descriptor page user passed to us. You can find the body of <code>serve_open</code> above. There are two functions that are important here, <code>open_alloc</code> and <code>file_open</code>. Let’s see ‘em.</p><p>First, <code>open_alloc</code> simply allocate a <code>struct Open</code> from global open tab - <code>opentab</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">open_alloc</span><span class="params">(<span class="keyword">struct</span> Open** o)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>open_alloc</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">open_alloc</span><span class="params">(<span class="keyword">struct</span> Open** o)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find an available open-file table entry</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXOPEN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (pageref(opentab[i].o_ff))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> ((r = syscall_mem_alloc(<span class="number">0</span>, opentab[i].o_ff, PTE_D | PTE_LIBRARY)) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                opentab[i].o_fileid += MAXOPEN;</span><br><span class="line">                *o = &amp;opentab[i];</span><br><span class="line">                <span class="built_in">memset</span>((<span class="type">void</span>*)opentab[i].o_ff, <span class="number">0</span>, BY2PG);</span><br><span class="line">                <span class="keyword">return</span> (*o)-&gt;o_fileid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -E_MAX_OPEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Here, we just allocate a page to store file descriptor. A little waste of memory, but makes it easier for memory exchange. And you can see that, if this open tab is used, it simple add a offset to <code>Open::o_fileid</code> to record the time it used. Interesting, huh. After this, the open file will be recorded in File System’s global open tab. </p><p><strong>Notice:</strong> <code>opentab</code> array is always there, what we allocate is the page at <code>Open::o_off</code>. Only the first allocation of a <code>Open</code> requires memory allocation, the page will not be freed, and will be reused next time.</p></blockquote></div></details><p>After a open tab is allocated, it can be looked up.</p><details class="toggle"><summary class="toggle-button" style>open_lookup</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open_lookup</span><span class="params">(u_int envid, u_int fileid, <span class="keyword">struct</span> Open** po)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Open</span>* <span class="title">o</span> =</span> &amp;opentab[fileid % MAXOPEN];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (pageref(o-&gt;o_ff) == <span class="number">1</span> || o-&gt;o_fileid != fileid)</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">*po = o;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Here is a explanation for <code>pageref</code> check in <code>open_alloc</code> and <code>open_lookup</code>, read it as you will. 😉</p><details class="toggle"><summary class="toggle-button" style>explanation on `pageref`</summary><div class="toggle-content"><p>In <code>open_alloc</code>, we use <code>pageref</code> to determine whether a open tab is allocated or not. If not, then the reference is sure to be 0, and will be created, which will make this value <strong>1</strong>. Then, when <code>serve_open</code> ends, it will use <code>page_insert</code> to deliver the return value, which will make it <strong>2</strong>. <strong>Only when user process close all files can this value become 1 again.</strong> So reference <strong>1</strong> on allocation means it is to be used by a new file and should initialize again.</p><p>Then in <code>open_lookup</code>, we validate the <code>pageref</code> of <code>open</code>. Why <strong>1</strong> is invalid? Because only a successful open will complete all steps and return the page back to user process, make this reference <strong>2</strong>. Thus <strong>1</strong> may indicate a failure of open! Or, the user process just closed the file. More than 2 just means many processes share the same file, e.g. parent and child process. 🥱</p></div></details><p>Then, file open will get the corresponding <code>struct File</code>. Don’t be deceived by the name of this function. It is not literally “open file”, but only find the corresponding <code>struct File</code> with the given path. It’s so simple to be put here with out hide block.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_open</span><span class="params">(<span class="type">char</span>* path, <span class="keyword">struct</span> File** file)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> walk_path(path, <span class="number">0</span>, file, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In case you forget, I put this figure here again. Am I nice? 🥰 So what this function get is actually just the <code>struct File</code>.</p><img src="/posts/File-System-IPC/File-Layout.svg" alt="File-Layout" style="zoom:80%;"><p>So, what is <code>walk_path</code> again?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">walk_path</span><span class="params">(<span class="type">char</span>* path, <span class="keyword">struct</span> File** pdir, <span class="keyword">struct</span> File** pfile, <span class="type">char</span>* lastelem)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Some explanation to its parameters. Here, only <code>path</code> is a in parameter, and all the others are out. We assume that <code>pfile</code> is never <code>NULL</code>, meaning that it is a required parameter. (<del>If not, why you use this function?</del> Though you may just want to get <code>pdir</code>) and <code>pdir</code> and <code>lastelem</code> is optional. </p><blockquote><p>ℹ<strong>Notice:</strong> In my implementation, I altered this function to make <code>pfile</code> nullable too.</p></blockquote><p>If we successfully find the file (can be directory or regular file), <code>pdir</code> will be set to its parent directory, and <code>pfile</code> the file we find. In this case, <code>lastelem</code> is not used.</p><p>Otherwise, <code>pdir</code> and <code>pfile</code> are set to <code>NULL</code> and <code>walk_path</code> will return a error, and set <code>lastelem</code> to the last successful found file name. <strong>Not</strong> the full path of the last file. (I doubt if this is of any use.)</p></blockquote><p>This function is long but not complicate. It is a good example of traverse file structure. 🥱</p><details class="toggle"><summary class="toggle-button" style>walk_path</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">walk_path</span><span class="params">(<span class="type">char</span>* path, <span class="keyword">struct</span> File** pdir, <span class="keyword">struct</span> File** pfile, <span class="type">char</span>* lastelem)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> name[MAXNAMELEN];</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start at the root.</span></span><br><span class="line">    path = skip_slash(path);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span>* <span class="title">file</span> =</span> &amp;super-&gt;s_root;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span>* <span class="title">dir</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>* p;</span><br><span class="line"></span><br><span class="line">    name[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pdir)</span><br><span class="line">        *pdir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (pfile)</span><br><span class="line">        *pfile = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find the target file by name recursively.</span></span><br><span class="line">    <span class="keyword">while</span> (*path != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dir = file;</span><br><span class="line">        p = path;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (*path != <span class="string">&#x27;/&#x27;</span> &amp;&amp; *path != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            path++;</span><br><span class="line">        <span class="keyword">if</span> (path - p &gt;= MAXNAMELEN)</span><br><span class="line">            <span class="keyword">return</span> -E_BAD_PATH;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(name, p, path - p);</span><br><span class="line">        name[path - p] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        path = skip_slash(path);</span><br><span class="line">        <span class="keyword">if</span> (dir-&gt;f_type != FTYPE_DIR)</span><br><span class="line">            <span class="keyword">return</span> -E_NOT_FOUND;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((r = dir_lookup(dir, name, &amp;file)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (r == -E_NOT_FOUND &amp;&amp; *path == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (pdir)</span><br><span class="line">                    *pdir = dir;</span><br><span class="line">                <span class="keyword">if</span> (lastelem)</span><br><span class="line">                    <span class="built_in">strcpy</span>(lastelem, name);</span><br><span class="line">                *pfile = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pdir)</span><br><span class="line">        *pdir = dir;</span><br><span class="line">    <span class="keyword">if</span> (pfile)</span><br><span class="line">        *pfile = file;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dir_lookup</span><span class="params">(<span class="keyword">struct</span> File* dir, <span class="type">char</span>* name, <span class="keyword">struct</span> File** file)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1: Calculate the number of blocks in &#x27;dir&#x27; via its size.</span></span><br><span class="line">    u_int nblk = dir-&gt;f_size / BY2BLK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Iterate through all blocks in the directory.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nblk; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Read the i&#x27;th block of &#x27;dir&#x27; and get its address to &#x27;blk&#x27;.</span></span><br><span class="line">        <span class="type">void</span>* blk;</span><br><span class="line">        <span class="keyword">if</span> ((r = file_get_block(dir, i, &amp;blk)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">File</span>* <span class="title">files</span> =</span> (<span class="keyword">struct</span> File*)blk;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find the target among all &#x27;File&#x27;s in this block.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">struct</span> File* f = files; f &lt; files + FILE2BLK; ++f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(f-&gt;f_name, name) == <span class="number">0</span>)<span class="comment">// Karabast! &#x27;== 0&#x27;!</span></span><br><span class="line">            &#123;</span><br><span class="line">                f-&gt;f_dir = dir;<span class="comment">// set this every time it is accessed?</span></span><br><span class="line">                *file = f;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -E_NOT_FOUND;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>file_get_block</code> is just like a simplified <code>file_block_walk</code>, to get the block content of the corresponding file block id. Just refer to <a href="../Lab-5-Reflection/">Lab 5 Reflection</a> for more information. 🥴 Just be reminded that it will map block into memory if not loaded from disk yet.</p></blockquote></div></details><h3 id="2-3-2-serve-close"><a href="#2-3-2-serve-close" class="headerlink" title="2.3.2 serve_close"></a>2.3.2 <code>serve_close</code></h3><p>You may see this function in <code>serve_close</code>. Again, don’t be fooled by its name, it doesn’t really close the file, it only save the file to disk using <code>file_flush</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">file_close</span><span class="params">(<span class="keyword">struct</span> File* f)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">file_flush</span><span class="params">(<span class="keyword">struct</span> File* f)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>file_close/flush</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">file_close</span><span class="params">(<span class="keyword">struct</span> File* f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Flush the file itself, if f&#x27;s f_dir is set, flush it&#x27;s f_dir.</span></span><br><span class="line">    file_flush(f);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;f_dir)</span><br><span class="line">        file_flush(f-&gt;f_dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">file_flush</span><span class="params">(<span class="keyword">struct</span> File* f)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    u_int bno;</span><br><span class="line">    u_int diskno;</span><br><span class="line"></span><br><span class="line">    u_int nblocks = f-&gt;f_size / BY2BLK + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (bno = <span class="number">0</span>; bno &lt; nblocks; bno++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = file_map_block(f, bno, &amp;diskno, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (block_is_dirty(diskno))</span><br><span class="line">            write_block(diskno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Why we should flush parent directory? Well, you know, content of directory is its children’s <code>struct File</code>, so perhaps due to file size change or some else reason, this <code>struct File</code> may change. Therefore, update directory, we should.</p></blockquote></div></details><hr><h1 id="4-Library-File-Function"><a href="#4-Library-File-Function" class="headerlink" title="4. Library File Function"></a>4. Library File Function</h1><p>In the previous post <a href="../Lab-5-Reflection/">Lab 5 Reflection</a>, we’ve learnt some library functions, which doesn’t rely on File System IPC. And here, I’d like to introduce these two that depend on such IPC. 😯</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br></pre></td></tr></table></figure><h2 id="4-1-open"><a href="#4-1-open" class="headerlink" title="4.1 open"></a>4.1 <code>open</code></h2><p>First, let’s see the definition of this function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/file.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1: Alloc a new &#x27;Fd&#x27; using &#x27;fd_alloc&#x27; in fd.c.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_alloc(&amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Prepare the &#x27;fd&#x27; using &#x27;fsipc_open&#x27; in fsipc.c.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fsipc_open(path, mode, fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: Set &#x27;va&#x27; to the address of the page where the &#x27;fd&#x27;&#x27;s data is cached.</span></span><br><span class="line">    <span class="type">char</span>* va = fd2data(fd);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">ffd</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">    u_int fileid = ffd-&gt;f_fileid;</span><br><span class="line">    u_int size = ffd-&gt;f_file.f_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: Alloc pages and map the file content using &#x27;fsipc_map&#x27;.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i += BY2PG)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = fsipc_map(fileid, i, va + i)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 5: Return the number of file descriptor using &#x27;fd2num&#x27;.</span></span><br><span class="line">    <span class="keyword">return</span> fd2num(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>So, you can have a complete view of open process now. We first find a suitable page to store the incoming file descriptor (only find, no allocation of memory). Then, we just call <code>fsipc_open</code>, which will end in <code>serve_open</code> to prepare such file descriptor page for us. Then, we can initialize some properties using this page.</p><p>Then, to get the content of the file, we just use <code>fsipc_map</code> that will call <code>serve_map</code> to load data from the disk, as you’ve known previously.</p><p>Finally, we return <code>fd2num(fd)</code> to the caller. So, <code>fileid</code> and the actual id user got are different.</p></blockquote><h2 id="4-2-close"><a href="#4-2-close" class="headerlink" title="4.2 close"></a>4.2 <code>close</code></h2><p>While <code>open</code> is only for file device, here <code>close</code> can be used to any device. As you can infer from the source file it located. As you can see, a function pointer does the dynamic job.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/fd.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fdnum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span>* <span class="title">dev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span> || (r = dev_lookup(fd-&gt;fd_dev_id, &amp;dev)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = (*dev-&gt;dev_close)(fd);</span><br><span class="line">    fd_close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, for file device, this <code>Dev::dev_close</code> is <code>file_close</code>. A little long, so sorry about not make it inside a hide block.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/file.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_close</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">ffd</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">u_int fileid = ffd-&gt;f_fileid;</span><br><span class="line">u_int size = ffd-&gt;f_file.f_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the start address storing the file&#x27;s content.</span></span><br><span class="line"><span class="type">void</span>* va = fd2data(fd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the file server the dirty page.</span></span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; size; i += BY2PG)</span><br><span class="line">fsipc_dirty(fileid, i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Request the file server to close the file with fsipc.</span></span><br><span class="line"><span class="keyword">if</span> ((r = fsipc_close(fileid)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">debugf(<span class="string">&quot;cannot close the file\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unmap the content of file, release memory.</span></span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; size; i += BY2PG)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((r = syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)(va + i))) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">debugf(<span class="string">&quot;cannont unmap the file.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see that in this function, we call <code>fsipc_close</code> that will eventually invoke <code>serve_close</code> to flush the file to the disk as a save job. Then, we just un-map the page for memory release.</p><p>Then, we have <code>fd_close</code>, as we known, it simply un-map the file descriptor page.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/fd.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fd_close</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span></span><br><span class="line">&#123;</span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>❗ <strong>Important:</strong> So now, it’s time to review <code>serve_open</code> again! There, we check <code>pageref</code>, and sharing the file descriptor make its page reference be 2 or more. And here, as we close the file, user process will un-map this page one by one (if there are more than one process using this file), thus the reference will decrease until 1, which is the File System’s reference. And once it becomes 1, it means that all user processes have lost connect with this page, indicating the file is ultimately closed.</p></blockquote><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Oops, I guess there are nothing to say anymore. I wonder if this is of any point. 😔 But, enjoy.</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab 5 Reflection</title>
      <link href="/posts/Lab-5-Reflection/"/>
      <url>/posts/Lab-5-Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-2023-Spring-OS"><a href="#BUAA-2023-Spring-OS" class="headerlink" title="BUAA 2023 Spring OS"></a>BUAA 2023 Spring OS</h1><hr><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In this lab, we finally come to <strong>File System</strong>. For MOS, a micro-kernel OS, file system serves as a process in user space, and all file operations are done via IPC between user process and this file system process. As we introduce file system to our OS, we have to deal with disk. Thus there is another part of code to handle memory and disk.</p><h2 id="Tips-for-Windows-Players"><a href="#Tips-for-Windows-Players" class="headerlink" title="Tips for Windows Players"></a>Tips for Windows Players</h2><p>If you do labs on Windows with Visual Studio and WSL, you may encounter some subtle errors. Expand this part if your seek for solutions. 🙃</p><details class="toggle"><summary class="toggle-button" style>Visual Studio Tips</summary><div class="toggle-content"><p>You may encounter an error saying that <code>DT_DIR</code> is undefined. It may not be a problem when you compile the project, but IntelliSense will show this as an error. Expand it if you have such </p><p>The reason is that, though with WSL, our code is on Windows, and we use MinGW (Minimal GNU for Windows). This macro is defined in standard <code>dirent.h</code> header file, but surrounded with a <code>#if</code> macro. Of course, <code>_WIN32</code> is not defined since our OS will be compiled on Linux. But <code>_BSD_SOURCE</code> is not defined neither! 😵‍💫</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dirent.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_BSD_SOURCE) || defined(_WIN32)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DT_REG   _A_NORMAL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DT_DIR   _A_SUBDIR</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>So, the solution is that, in the <code>CppProperties.json</code>, add <code>defines</code> entry in <code>configurations</code> with <code>_BSD_SOURCE</code> declared. The rest of the properties are omitted. This works only as a reminder to Visual Studio IntelliSense, so won’t have actual effect on our compilation and run.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;_BSD_SOURCE&quot;</span> <span class="punctuation">]</span> <span class="comment">// enable DT_DIR</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>If you don’t know what is <code>CppProperties.json</code> is, please refer to my previous post.</p><ul><li><a href="/posts/Configure-VS-for-Non-MSVC-Projects/">Configure-VS-for-Non-MSVC-Projects</a></li></ul></blockquote><h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><p>For Windows, the EOL (End of line) symbol is <code>CRLF</code> (<code>\r\n</code>), while for Linux, it is <code>LF</code> (<code>\n</code>). In this lab, you have to pay attention to this subtle difference, for it may cause slight errors. For example, the string in our code is “hello\n”, but in the file, it is “hello\r\n” if you accept the default <code>CRLF</code> on Windows. So, when doing string compare, these two strings will not match each other, while they should.</p><p>Files you should especially pay attention to are <code>tests/lab5_2/newmotd</code> and <code>tests/lab5_2/motd</code>.</p><p>You can also refer to this post to change default EOL when saving a file: <a href="https://learn.microsoft.com/en-us/visualstudio/ide/encodings-and-line-breaks?view=vs-2022">Encodings and line endings</a>.</p><p><span class="hide-inline"><button type="button" class="hide-button" style>How did I find this?</button><span class="hide-content">By printing the length of the strings. 🤪</span></span></p></div></details><hr><h1 id="1-Disk-Access"><a href="#1-Disk-Access" class="headerlink" title="1. Disk Access"></a>1. Disk Access</h1><p>The purpose of the File System is to make memory persistent. But our RAM is not persistent. So before we formally introduce File System, we have to get pass hard disk.</p><h2 id="1-1-Device"><a href="#1-1-Device" class="headerlink" title="1.1 Device"></a>1.1 Device</h2><p>Disk, the same as all other devices, are accessed though the register it provides, and these registers are mapped to our kernel memory. So we can manipulate them by read and write certain memory range.</p><p>In <code>include/mmu.h</code>, we can see the memory layout of MOS. And you can find that devices are mapped to <code>kseg1</code>.</p><img src="/posts/Lab-5-Reflection/image-20230502224853429.png" alt="image-20230502224853429" style="zoom:50%;"><p>I think now it is a good time for us to review memory accessing process.</p><img src="/posts/Lab-5-Reflection/image-20230502225148176.png" alt="image-20230502225148176" style="zoom:50%;"><p>You can see that <code>kseg1</code> is the only segment that doesn’t go though cache. Ya know, you just cannot cache the input or output of keyboard, or any other devices.</p><h2 id="1-2-Read-Write-Device-Segment"><a href="#1-2-Read-Write-Device-Segment" class="headerlink" title="1.2 Read &amp; Write Device Segment"></a>1.2 Read &amp; Write Device Segment</h2><p>Now that we have to communicate with device by read and write <code>kseg1</code>, it is time to write such functions to do this job.</p><blockquote><p>Just like when we access kernel address using <code>KADDR</code> and <code>PADDR</code>, here, we also need such conversion between device address and its correspondent in <code>kseg1</code>. It can be really simple like this.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> KSEG1ADDR(pa) ((pa) + KSEG1)</span></span><br></pre></td></tr></table></figure></blockquote><p>As we know, such operations are done via system call. So here is the system call. <code>va</code> is the address of the value we want to write into or read out of the device located at address <code>pa</code>. And <code>len</code> is the length of data we want.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kern/syscall_all.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_write_dev</span><span class="params">(u_int va, u_int pa, u_int len)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_read_dev</span><span class="params">(u_int va, u_int pa, u_int len)</span>;</span><br></pre></td></tr></table></figure><p>For MOS, we have the following there devices, and they are fixed to certain <strong>physical</strong> addresses. The detailed info for them are defined in corresponding header files.</p><table><thead><tr><th align="center">Device</th><th align="center">Start Address</th><th align="center">Length</th><th align="center">Header File</th></tr></thead><tbody><tr><td align="center">Console</td><td align="center">0x10000000</td><td align="center">0x20</td><td align="center"><code>include/drivers/dev_cons.h</code></td></tr><tr><td align="center">IDE Disk</td><td align="center">0x13000000</td><td align="center">0x4200</td><td align="center"><code>include/drivers/dev_disk.h</code></td></tr><tr><td align="center">RTC</td><td align="center">0x15000000</td><td align="center">0x200</td><td align="center"><code>include/drivers/dev_rtc.h</code></td></tr></tbody></table><details class="toggle"><summary class="toggle-button" style>sys_write/read_dev</summary><div class="toggle-content"><p>Before we read and write, we <strong>must</strong> validate address first.</p><details class="toggle"><summary class="toggle-button" style>Validate Address</summary><div class="toggle-content"><p>First, since File System runs in user space, the <code>va</code> is limited to user space only. So we can simply check it by verify if it is in user space range.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">is_illegal_va_range</span><span class="params">(u_long va, u_int len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> va + len &lt; va || va &lt; UTEMP || va + len &gt; UTOP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, it is the physical address of device. Here I added a auxiliary range check function. For device address, we must make sure it is within one of the device memory range mentioned above.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">in_range</span><span class="params">(u_long base, u_int range, u_long begin, u_int len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (base &lt;= begin) &amp;&amp; (begin + len &lt;= base + range);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">is_illegal_dev_pa_range</span><span class="params">(u_long pa, u_int len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (pa + len &lt; pa)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(in_range(<span class="number">0x10000000</span>, <span class="number">0x20</span>,   pa, len) ||</span><br><span class="line">          in_range(<span class="number">0x13000000</span>, <span class="number">0x4200</span>, pa, len) ||</span><br><span class="line">          in_range(<span class="number">0x15000000</span>, <span class="number">0x200</span>,  pa, len)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>After address validation, we can read and write device as we will. Just use <code>memcpy</code> for memory exchange.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_write_dev</span><span class="params">(u_int va, u_int pa, u_int len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_illegal_va_range(va, len) || is_illegal_dev_pa_range(pa, len))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)KSEG1ADDR(pa), (<span class="type">const</span> <span class="type">void</span>*)va, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_read_dev</span><span class="params">(u_int va, u_int pa, u_int len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_illegal_va_range(va, len) || is_illegal_dev_pa_range(pa, len))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)va, (<span class="type">const</span> <span class="type">void</span>*)KSEG1ADDR(pa), len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just notice that <code>pa</code> is the physical address, and we have to add <code>kseg1</code> offset to it.</p></div></details><h2 id="1-3-IDE-Read-Write"><a href="#1-3-IDE-Read-Write" class="headerlink" title="1.3 IDE Read &amp; Write"></a>1.3 IDE Read &amp; Write</h2><p>With <code>sys_read_dev</code> and <code>sys_write_dev</code>, we can communicate with device by read and write corresponding memory range. So it is time to really read and write data from disk. IDE (Integrated Drive Electronics) is a old-fashioned disk interface.</p><h3 id="1-3-1-IDE-Interface"><a href="#1-3-1-IDE-Interface" class="headerlink" title="1.3.1 IDE Interface"></a>1.3.1 IDE Interface</h3><p>Disk, you know, that structure. A disk is divided in to many sectors, and we can only get one, and only one sector by one read or write operation.  The address information about our IDE disk in MOS is as follows. The base address of IDE disk is 0x13000000, defined by macro <code>DEV_DISK_ADDRESS</code>. All offset below are based on this.</p><table><thead><tr><th align="center">Offset</th><th align="center">Macro</th><th align="center">Description</th><th align="center">Data Bytes</th></tr></thead><tbody><tr><td align="center">0x0000</td><td align="center"><code>DEV_DISK_OFFSET</code></td><td align="center">read&#x2F;write offset to the 0 address of disk</td><td align="center">4</td></tr><tr><td align="center">0x0008</td><td align="center"><code>DEV_DISK_OFFSET_HIGH32</code></td><td align="center">high 32 bits of read&#x2F;write offset</td><td align="center">4</td></tr><tr><td align="center">0x0010</td><td align="center"><code>DEV_DISK_ID</code></td><td align="center">the ID of the disk to operate</td><td align="center">4</td></tr><tr><td align="center">0x0020</td><td align="center"><code>DEV_DISK_START_OPERATION</code></td><td align="center">set the disk to start read&#x2F;write operation</td><td align="center">4</td></tr><tr><td align="center">0x0030</td><td align="center"><code>DEV_DISK_STATUS</code></td><td align="center">return status of disk</td><td align="center">4</td></tr><tr><td align="center">0x4000</td><td align="center"><code>DEV_DISK_BUFFER</code></td><td align="center">buffer with the size of a sector</td><td align="center">512</td></tr></tbody></table><p>Disk is large, so 4 bytes of 4G memory range may be not enough. So you can use high 32 bit to manipulate on larger memory.</p><p>Often, we may have more than one disk, so we should specify which disk to operate. But here in MOS, we only have one, whose ID is, of course, 0.</p><p><code>DEV_DISK_START_OPERATION</code> indicates the following operation is a read or write. It is either <code>DEV_DISK_OPERATION_READ</code> or <code>DEV_DISK_OPERATION_WRITE</code>.</p><p><code>DEV_DISK_STATUS</code> will store the return value of the disk operation. Just read the value from this memory. 0 indicates error.</p><p><code>DEV_DISK_BUFFER</code>, well, it is literally the buffer that store the content of a sector, whether it will be written into or loaded from the disk.</p><h3 id="1-3-2-IDE-Operation"><a href="#1-3-2-IDE-Operation" class="headerlink" title="1.3.2 IDE Operation"></a>1.3.2 IDE Operation</h3><p>As we’re familiar with IDE Interface, we can now read and write data through it. Notice that, whenever we read or write, we do this one sector a time. Here is the declaration of read and write operation. You can see that we do these sector by sector.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.h</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ide_read</span><span class="params">(u_int diskno, u_int secno, <span class="type">void</span>* dst, u_int nsecs)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ide_write</span><span class="params">(u_int diskno, u_int secno, <span class="type">void</span>* src, u_int nsecs)</span>;</span><br></pre></td></tr></table></figure><p>You may notice that these are put in <code>serv.h</code>, which is the header file for File System process. Well, this perhaps because that disk operation is needed for File System.</p><p>To set or read registers or buffer, we can simple use the functions we wrote in <code>1.2</code>. So it can be relatively easy.</p><details class="toggle"><summary class="toggle-button" style>ide_read/write</summary><div class="toggle-content"><p>The detailed process of read&#x2F;write IDE disk is that, set disk ID and offset first, then begin read or write, and at last, get the return value. Just notice that, the order of start operation and prepare buffer memory is different. Since we have to fill buffer before we write it into the disk, and we can only get the valid memory after we read it from the disk.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ide_read</span><span class="params">(u_int diskno, u_int secno, <span class="type">void</span>* dst, u_int nsecs)</span></span><br><span class="line">&#123;</span><br><span class="line">    u_int begin = secno * BY2SECT;</span><br><span class="line">    u_int end = begin + nsecs * BY2SECT;</span><br><span class="line">    u_int read_flag = DEV_DISK_OPERATION_READ;</span><br><span class="line">    u_int ret;</span><br><span class="line">    <span class="keyword">for</span> (u_int offset = <span class="number">0</span>; begin + offset &lt; end; offset += BY2SECT)</span><br><span class="line">    &#123;</span><br><span class="line">        u_int dev_offset = begin + offset;</span><br><span class="line">        panic_on(syscall_write_dev(&amp;diskno,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_ID,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(diskno)));</span><br><span class="line">        panic_on(syscall_write_dev(&amp;dev_offset,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_OFFSET,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(dev_offset)));</span><br><span class="line">        <span class="comment">// read start</span></span><br><span class="line">        panic_on(syscall_write_dev(&amp;read_flag,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_START_OPERATION,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(read_flag)));</span><br><span class="line">        panic_on(syscall_read_dev(dst + offset,</span><br><span class="line">                                  DEV_DISK_ADDRESS + DEV_DISK_BUFFER,</span><br><span class="line">                                  BY2SECT));</span><br><span class="line">        <span class="comment">// read end</span></span><br><span class="line">        panic_on(syscall_read_dev(&amp;ret,</span><br><span class="line">                                  DEV_DISK_ADDRESS + DEV_DISK_STATUS,</span><br><span class="line">                                  <span class="keyword">sizeof</span>(ret)));</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>)   <span class="comment">// failed</span></span><br><span class="line">            user_panic(<span class="string">&quot;ide_read failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ide_write</span><span class="params">(u_int diskno, u_int secno, <span class="type">void</span>* src, u_int nsecs)</span></span><br><span class="line">&#123;</span><br><span class="line">    u_int begin = secno * BY2SECT;</span><br><span class="line">    u_int end = begin + nsecs * BY2SECT;</span><br><span class="line">    u_int write_flag = DEV_DISK_OPERATION_WRITE;</span><br><span class="line">    u_int ret;</span><br><span class="line">    <span class="keyword">for</span> (u_int offset = <span class="number">0</span>; begin + offset &lt; end; offset += BY2SECT)</span><br><span class="line">    &#123;</span><br><span class="line">        u_int dev_offset = begin + offset;</span><br><span class="line">        panic_on(syscall_write_dev(&amp;diskno,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_ID,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(diskno)));</span><br><span class="line">        panic_on(syscall_write_dev(&amp;dev_offset,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_OFFSET,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(dev_offset)));</span><br><span class="line">        <span class="comment">// write begin</span></span><br><span class="line">        panic_on(syscall_write_dev(src + offset,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_BUFFER,</span><br><span class="line">                                   BY2SECT));</span><br><span class="line">        panic_on(syscall_write_dev(&amp;write_flag,</span><br><span class="line">                                   DEV_DISK_ADDRESS + DEV_DISK_START_OPERATION,</span><br><span class="line">                                   <span class="keyword">sizeof</span>(write_flag)));</span><br><span class="line">        <span class="comment">// write end</span></span><br><span class="line">        panic_on(syscall_read_dev(&amp;ret,</span><br><span class="line">                                  DEV_DISK_ADDRESS + DEV_DISK_STATUS,</span><br><span class="line">                                  <span class="keyword">sizeof</span>(ret)));</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">0</span>)<span class="comment">// failed</span></span><br><span class="line">            user_panic(<span class="string">&quot;ide_write failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Well, we cannot handle disk hardware error, so we simply panic on any error.</p><blockquote><p><strong>Tips:</strong> Here, we should use <code>user_panic</code>, rather than <code>panic</code>. Since the latter one is for kernel.</p></blockquote></div></details><hr><h1 id="2-File-System"><a href="#2-File-System" class="headerlink" title="2. File System"></a>2. File System</h1><h2 id="2-1-Disk-Layout"><a href="#2-1-Disk-Layout" class="headerlink" title="2.1 Disk Layout"></a>2.1 Disk Layout</h2><p>The basic unit in disk is sector, as we already know. But a sector is only of 512 bytes, which is a little small, thus will make too many of them. So the File System merge multiple sectors into one <strong>block</strong> as the basic unit for Operating System. Usually, one block is of the same size as page.</p><blockquote><p>There are some macros in MOS for such conversions.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/fs.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BY2BLK BY2PG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BIT2BLK (BY2BLK * 8)</span></span><br><span class="line"><span class="comment">// fs/serv.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BY2SECT 512                 <span class="comment">// bytes of a sector</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECT2BLK (BY2BLK / BY2SECT) <span class="comment">// how many sectors in a block (8)</span></span></span><br></pre></td></tr></table></figure></blockquote><p>And it is easy to imagine the layout of those blocks. Later, when we read or write disk, we always read or write a complete block, i.e. read or write multiple sectors in a row.</p><img src="/posts/Lab-5-Reflection/Disk-Layout.svg" alt="Disk-Layout" style="zoom:80%;"><p>Block 0 stores the bootloader, and partition table of the disk. Super block stores the key information about the disk - the magic number, number of blocks and root directory. By reading this, our File System can know the general information about the blocks.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/fs.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Super</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint32_t</span> s_magic;   <span class="comment">// Magic number: FS_MAGIC</span></span><br><span class="line"><span class="type">uint32_t</span> s_nblocks; <span class="comment">// Total number of blocks on disk</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">s_root</span>;</span> <span class="comment">// Root directory node</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And the following several blocks are bitmap blocks. The number of it depends on the size of the disk. If there are N blocks, then there must be enough bitmap blocks to hold these N bits. You can get it by a simple division, just make sure there are enough bits.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nbitblock = (NBLOCK + BIT2BLK - <span class="number">1</span>) / BIT2BLK;</span><br><span class="line">nbitblock = NBLOCK / BIT2BLK + !!(NBLOCK % BIT2BLK); <span class="comment">// Or this</span></span><br></pre></td></tr></table></figure><h2 id="2-2-Block-Cache-in-Memory"><a href="#2-2-Block-Cache-in-Memory" class="headerlink" title="2.2 Block Cache in Memory"></a>2.2 Block Cache in Memory</h2><p>In MOS, there is a wired design, I think, that map disk blocks to File System process’s memory. And here is how this is done.</p><img src="/posts/Lab-5-Reflection/Block-Cache.svg" alt="Block-Cache" style="zoom:80%;"><p>As you can see, we mapped disk to memory block by block. Now you can see why I say wired, because it will limit our disk size to 1GB only. 😢</p><blockquote><p>There are two macros for this mapping that indicate the address range for such cache.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISKMAP 0x10000000 <span class="comment">// cache map start address</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISKMAX 0x40000000 <span class="comment">// maximum disk size</span></span></span><br></pre></td></tr></table></figure></blockquote><p>Such mapping is quite easy, as it is one-to-one. So we just add a offset to block ID (<code>bno</code>&#x2F;<code>blockno</code> in code) to convert it into corresponding virtual address. So we have this function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">diskaddr</span><span class="params">(u_int blockno)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>diskaddr</summary><div class="toggle-content"><p>Just remember to validate address range.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">diskaddr</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    u_long va = (DISKMAP + blockno * BY2BLK);</span><br><span class="line">    panic_on(va &lt; DISKMAP);</span><br><span class="line">    panic_on(va &gt;= DISKMAP + DISKMAX);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span>*)va;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Things become easier as block and page are of the same size. When we cache a block, we simple get its virtual address in memory via <code>diskaddr</code> function, and then allocate a page to store it.</p><h2 id="2-3-Block-Management"><a href="#2-3-Block-Management" class="headerlink" title="2.3 Block Management"></a>2.3 Block Management</h2><p>The fundamental work for File System is to manage all these blocks. As we know, it uses bitmap to record the use of blocks, so the basic mechanism is clear and set corresponding bits. And of course, allocate and free blocks when necessary.</p><h3 id="2-3-1-Block-Initialization"><a href="#2-3-1-Block-Initialization" class="headerlink" title="2.3.1 Block Initialization"></a>2.3.1 Block Initialization</h3><p>All these are actually done in File System process. So let’s have a brief look at it. Here is its main function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    user_assert(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> File) == BY2FILE);</span><br><span class="line">    debugf(<span class="string">&quot;FS is running\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    serve_init();</span><br><span class="line">    fs_init();</span><br><span class="line">    serve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see that, it first initialize it self, then initialize File System, and at last, serve as File System. Here, we just need to know <code>fs_init</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv/c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fs_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    read_super();</span><br><span class="line">    check_write_block();</span><br><span class="line">    read_bitmap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Still, is separated into small tasks. First one is to read the Super block to get block info. Then, I think, is a self diagnose, read it as you will. And the last one is to read the bitmap block to get the current disk usage.</p><details class="toggle"><summary class="toggle-button" style>read_bitmap</summary><div class="toggle-content"><blockquote><p>Related functions will be introduced later. 😉</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">uint32_t</span>* bitmap;</span><br><span class="line"><span class="type">void</span> <span class="title function_">read_bitmap</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* blk = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1: Calculate the number of the bitmap blocks, and read them into memory.</span></span><br><span class="line">    u_int nbitmap = super-&gt;s_nblocks / BIT2BLK + !!(super-&gt;s_nblocks % BIT2BLK);</span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; nbitmap; i++)</span><br><span class="line">        read_block(i + <span class="number">2</span>, blk, <span class="number">0</span>);</span><br><span class="line">    bitmap = diskaddr(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Make sure the reserved and root blocks are marked in-use.</span></span><br><span class="line">    user_assert(!block_is_free(<span class="number">0</span>));</span><br><span class="line">    user_assert(!block_is_free(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: Make sure all bitmap blocks are marked in-use.</span></span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; nbitmap; i++)</span><br><span class="line">        user_assert(!block_is_free(i + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    debugf(<span class="string">&quot;read_bitmap is good\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="2-3-2-Block-Mapping"><a href="#2-3-2-Block-Mapping" class="headerlink" title="2.3.2 Block Mapping"></a>2.3.2 Block Mapping</h3><p>As mentioned above, we cache blocks in memory, so we have to maintain such mapping. It involves these two functions below. Mapping block is actually allocating a page for the block, and link it virtual address to the page.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">map_block</span><span class="params">(u_int blockno)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unmap_block</span><span class="params">(u_int blockno)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Actually, in Lab 5, <code>unmap_block</code> is not declared in <code>fs/serv.h</code>. They are in <code>tests/lab5_3/mix_check.c</code>. Err… And in our File System, we don’t yet use it. Perhaps not the time?</p></blockquote><p>Before we handle these functions, let’s take a look at some auxiliary functions.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">block_is_mapped</span><span class="params">(u_int blockno)</span>; <span class="comment">// return mapped va if is mapped</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">block_is_free</span><span class="params">(u_int blockno)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">block_is_dirty</span><span class="params">(u_int blockno)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>In bitmap, 1 represents free state.</p></blockquote><details class="toggle"><summary class="toggle-button" style>block_is_xxx</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.c</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">block_is_mapped</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* va = diskaddr(blockno);</span><br><span class="line">    <span class="keyword">if</span> (va_is_mapped(va))</span><br><span class="line">        <span class="keyword">return</span> va;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">block_is_free</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (super == <span class="number">0</span> || blockno &gt;= super-&gt;s_nblocks)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (bitmap[blockno / <span class="number">32</span>] &amp; (<span class="number">1</span> &lt;&lt; (blockno % <span class="number">32</span>)))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">block_is_dirty</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>* va = diskaddr(blockno);</span><br><span class="line">    <span class="keyword">return</span> va_is_mapped(va) &amp;&amp; va_is_dirty(va);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>bitmap</code> is a <code>u_int</code> array, one unit in bitmap is 4 Bytes, 32 bits. One <code>u_int</code> can store 32 bits, so that’s what 32 means here.</p></blockquote><p>Actually the mapping status of block can be presented by that of the virtual address it corresponds to.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">va_is_mapped</span><span class="params">(<span class="type">void</span>* va)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (vpd[PDX(va)] &amp; PTE_V) &amp;&amp; (vpt[VPN(va)] &amp; PTE_V);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">va_is_dirty</span><span class="params">(<span class="type">void</span>* va)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> vpt[VPN(va)] &amp; PTE_DIRTY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>With these auxiliary functions, it would be easy to map blocks.</p><details class="toggle"><summary class="toggle-button" style>map_block</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">map_block</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: If the block is already mapped in cache, return 0.</span></span><br><span class="line">    <span class="keyword">if</span> (block_is_mapped(blockno))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Alloc a page in permission &#x27;PTE_D&#x27; via syscall.</span></span><br><span class="line">    <span class="comment">// Hint: syscall_mem_alloc will link va to the new page automatically.</span></span><br><span class="line">    <span class="keyword">return</span> syscall_mem_alloc(<span class="number">0</span>, diskaddr(blockno), PTE_D);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unmap_block</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: Get the mapped address of the cache page of this block</span></span><br><span class="line">    <span class="type">void</span>* va = block_is_mapped(blockno);</span><br><span class="line">    <span class="keyword">if</span> (!va)    <span class="comment">// not mapped</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: If this block is used (not free) and dirty in cache, write it back</span></span><br><span class="line">    <span class="comment">// to the disk first.</span></span><br><span class="line">    <span class="keyword">if</span> (!block_is_free(blockno) &amp;&amp; block_is_dirty(blockno))</span><br><span class="line">        write_block(blockno);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: Unmap the virtual address via syscall.</span></span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, va);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure block is unmapped.</span></span><br><span class="line">    user_assert(!block_is_mapped(blockno));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="2-3-3-Block-Allocation"><a href="#2-3-3-Block-Allocation" class="headerlink" title="2.3.3 Block Allocation"></a>2.3.3 Block Allocation</h3><p>Then, we got to handle block allocation. Here are the declaration of related functions. Just allocate and free, huh?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">alloc_block</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">free_block</span><span class="params">(u_int blockno)</span></span><br></pre></td></tr></table></figure><blockquote><p>The same as <code>unmap_block</code>, <code>free_block</code> is also declared in <code>tests/lab5_3/mix_check.c</code> with the same reason I guessed.</p></blockquote><p>To allocate a block, we have to traverse all blocks to find the first free block, because we want to make use of limited number of blocks. Then, we just modify the bitmap block to mark it allocated.</p><blockquote><p><strong>Important!</strong> As we modified the bitmap block, we got to write it back to the disk to make the change persistent.</p></blockquote><p>There are two steps in <code>alloc_block</code>. First, we should allocate a block, just allocate one by marking it allocated. Then, we use <code>map_block</code> to map it to its virtual address.</p><details class="toggle"><summary class="toggle-button" style>alloc_block</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">alloc_block</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r, bno;</span><br><span class="line">    <span class="comment">// Step 1: find a free block.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = alloc_block_num()) &lt; <span class="number">0</span>)  <span class="comment">// failed</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    bno = r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: map this block into memory.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = map_block(bno)) &lt; <span class="number">0</span>)     <span class="comment">// failed</span></span><br><span class="line">    &#123;</span><br><span class="line">        free_block(bno);  <span class="comment">// exception safe rollback</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: return the allocated block number.</span></span><br><span class="line">    <span class="keyword">return</span> bno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Real allocation and return the block id.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">alloc_block_num</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Walk through this bitmap, find a free one and mark it as used, then sync</span></span><br><span class="line"><span class="comment">     * this block to IDE disk from memory.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> blockno = <span class="number">3</span>; blockno &lt; super-&gt;s_nblocks; blockno++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bitmap[blockno / <span class="number">32</span>] &amp; (<span class="number">1</span> &lt;&lt; (blockno % <span class="number">32</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            bitmap[blockno / <span class="number">32</span>] &amp;= ~(<span class="number">1</span> &lt;&lt; (blockno % <span class="number">32</span>));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Write the affected bitmap block to disk. (blockno / BIT2BLK)</span></span><br><span class="line"><span class="comment">             * is the bitmap block order, 2 is the reserved two blocks.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            write_block(blockno / BIT2BLK + <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> blockno;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -E_NO_DISK;  <span class="comment">// no free blocks</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p><code>free_block</code> is relatively simpler. Since here we cache blocks, so there’s no need to free the page. We can reuse the page next time.</p><details class="toggle"><summary class="toggle-button" style>free_block</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free_block</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: If &#x27;blockno&#x27; is invalid, return.</span></span><br><span class="line">    <span class="keyword">if</span> ((blockno == <span class="number">0</span>) || (blockno &gt;= super-&gt;s_nblocks))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Set the flag bit of &#x27;blockno&#x27; in &#x27;bitmap&#x27;.</span></span><br><span class="line">    bitmap[blockno / <span class="number">32</span>] |= (<span class="number">1</span> &lt;&lt; (blockno % <span class="number">32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="2-3-4-Read-Write-Block"><a href="#2-3-4-Read-Write-Block" class="headerlink" title="2.3.4 Read &amp; Write Block"></a>2.3.4 Read &amp; Write Block</h3><p>Finally, we just need to read and write block to finish this part.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read_block</span><span class="params">(u_int blockno, <span class="type">void</span>** blk, u_int* isnew)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write_block</span><span class="params">(u_int blockno)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>read/write_block</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">read_block</span><span class="params">(u_int blockno, <span class="type">void</span>** blk, u_int* isnew)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: validate blockno. Make file the block to read is within the disk.</span></span><br><span class="line">    <span class="keyword">if</span> (super &amp;&amp; blockno &gt;= super-&gt;s_nblocks)</span><br><span class="line">        user_panic(<span class="string">&quot;reading non-existent block %08x\n&quot;</span>, blockno);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: validate this block is used, not free.</span></span><br><span class="line">    <span class="keyword">if</span> (bitmap &amp;&amp; block_is_free(blockno))</span><br><span class="line">        user_panic(<span class="string">&quot;reading free block %08x\n&quot;</span>, blockno);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: transform block number to corresponding virtual address.</span></span><br><span class="line">    <span class="type">void</span>* va = diskaddr(blockno);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: read disk and set *isnew.</span></span><br><span class="line">    <span class="keyword">if</span> (block_is_mapped(blockno))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// the block is already in memory</span></span><br><span class="line">        <span class="keyword">if</span> (isnew)</span><br><span class="line">            *isnew = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// the block is not in memory, and will be cached the first time</span></span><br><span class="line">        <span class="keyword">if</span> (isnew)</span><br><span class="line">            *isnew = <span class="number">1</span>;</span><br><span class="line">        map_block(blockno);<span class="comment">// map (cache) block into memory</span></span><br><span class="line">        ide_read(<span class="number">0</span>, blockno * SECT2BLK, va, SECT2BLK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 5: if blk != NULL, assign &#x27;va&#x27; to &#x27;*blk&#x27;.</span></span><br><span class="line">    <span class="keyword">if</span> (blk)</span><br><span class="line">        *blk = va;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write_block</span><span class="params">(u_int blockno)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Step 1: detect if this block is mapped, if not, can&#x27;t write it&#x27;s data to disk.</span></span><br><span class="line">    <span class="keyword">if</span> (!block_is_mapped(blockno))</span><br><span class="line">        user_panic(<span class="string">&quot;write unmapped block %08x&quot;</span>, blockno);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step2: write data to IDE disk. (using ide_write, and the diskno is 0)</span></span><br><span class="line">    ide_write(<span class="number">0</span>, blockno * SECT2BLK, diskaddr(blockno), SECT2BLK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="2-4-File-Layout"><a href="#2-4-File-Layout" class="headerlink" title="2.4 File Layout"></a>2.4 File Layout</h2><h3 id="2-4-1-File-Block"><a href="#2-4-1-File-Block" class="headerlink" title="2.4.1 File &amp; Block"></a>2.4.1 File &amp; Block</h3><p>Although block is fundamental for File System, users cannot accept such low level concept. So we use files to cover all these ugly stuffs. Here is a good figure to show the mechanism of how file covers block.</p><img src="/posts/Lab-5-Reflection/File-Layout.svg" alt="File-Layout" style="zoom:80%;"><blockquote><p>Since the blocks are stored as type <code>struct Block</code>, we can simple access them by subscription, so in <code>struct File</code>, we can only record the index of the block it has. <code>File::f_indirect</code> uses a block if necessary to store more direct links. We can get the number of blocks of a file using its size. Let’s assume there is a <code>File* file</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> nblk = file-&gt;f_size / BY2BLK;</span><br></pre></td></tr></table></figure><p>Then we could have this conversion from file block id to disk block id. To make it easier, we simply omitted the first 10 (<code>NDIRECT</code>) links in the indirect block to make file block id continuous. Thus we could have such code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &lt; NDIRECT)</span><br><span class="line">     bno = file-&gt;f_direct[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     bno = ((<span class="type">uint32_t</span>*)blocks[file-&gt;f_indirect])[i];</span><br></pre></td></tr></table></figure><blockquote><p><strong>Notice</strong>: These two are just pseudo-code.</p></blockquote></blockquote><p>And here is the actual declaration of file.</p><details class="toggle"><summary class="toggle-button" style>struct File</summary><div class="toggle-content"><p>This is in <code>fs/fs.h</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Maximum size of a filename (a single path component), including null.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXNAMELEN 128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Maximum size of a complete pathname, including null.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXPATHLEN 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number of (direct) block pointers in a File descriptor.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDIRECT 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NINDIRECT (BY2BLK / 4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Maximum file size on disk.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXFILESIZE (NINDIRECT * BY2BLK)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BY2FILE 256  <span class="comment">// size of struct File</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> f_name[MAXNAMELEN]; <span class="comment">// filename</span></span><br><span class="line">    <span class="type">uint32_t</span> f_size;         <span class="comment">// file size in bytes</span></span><br><span class="line">    <span class="type">uint32_t</span> f_type;         <span class="comment">// file type</span></span><br><span class="line">    <span class="type">uint32_t</span> f_direct[NDIRECT];</span><br><span class="line">    <span class="type">uint32_t</span> f_indirect;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// the pointer to the directory where this file is in, valid only in memory.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span>* <span class="title">f_dir</span>;</span></span><br><span class="line">    <span class="type">char</span> f_pad[BY2FILE - MAXNAMELEN - (<span class="number">3</span> + NDIRECT) * <span class="number">4</span> - <span class="keyword">sizeof</span>(<span class="type">void</span>*)];</span><br><span class="line">&#125; __attribute__((aligned(<span class="number">4</span>), packed));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE2BLK (BY2BLK / sizeof(struct File))  <span class="comment">// 16</span></span></span><br></pre></td></tr></table></figure></div></details><p>We can see that, there are 1024 (<code>NINDIRECT</code>) links available, which means a file can have at most 1024 blocks. Thus the maximum file size our MOS can handle is <code>4M</code>.</p><blockquote><p><strong>Notice</strong>: It seems, our filename is the absolute path name. 😧</p></blockquote><p>ℹ If you want to know how exactly we get disk block id from file block id, hold your horse! I’ll talk about them in <code>2.4.4</code>. 🙂</p><h3 id="2-4-2-File-Descriptor"><a href="#2-4-2-File-Descriptor" class="headerlink" title="2.4.2 File Descriptor"></a>2.4.2 File Descriptor</h3><p>In Linux, when we open a file using UNIX style <code>open</code>, we will get a file descriptor representing the file we opened. The same goes with MOS. Let’s see its definition.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/fd.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u_int fd_dev_id;</span><br><span class="line">    u_int fd_offset;</span><br><span class="line">    u_int fd_omode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span> <span class="title">f_fd</span>;</span></span><br><span class="line">    u_int f_fileid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">f_file</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>struct Fd</code> is the basic description of a file, it indicate the file is a regular file, a console or a pipe, and some basic information. Then, <code>struct Filefd</code> is the specific descriptor for file.</p><p>We arrange an area in the memory for file descriptor and file content, and they can be accessed via a simple conversion. Here is the layout of file descriptor and content in a process’ memory.</p><img src="/posts/Lab-5-Reflection/File-Address.svg" alt="File-Address" style="zoom:80%;"><blockquote><p><strong>Important!</strong> Now we’ve had this layout in our mind. Remember, the address in file descriptor table is the same as the address of <code>struct Fd</code> and <code>struct Filefd</code>. So… Did you notice that? The first member in <code>struct Filefd</code> is just <code>struct Fd</code>, which means we can simply apply force conversion between them, or get them directly from the virtual address.</p></blockquote><p>In MOS, we support at most 32 (<code>MAXFD</code>) file descriptors for one process. We want to make file descriptor table to take up a whole page directory, so we just make it a 4 MB segment. We assign 4 KB for each <code>struct Filefd</code>, and each of them corresponds to a 4 MB size segment as the content of the file. The conversion can be simple.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/fd.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXFD 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILEBASE 0x60000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FDTABLE  (FILEBASE - PDMAP)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INDEX2FD(i)   (FDTABLE  + (i) * BY2PG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INDEX2DATA(i) (FILEBASE + (i) * PDMAP)</span></span><br><span class="line"><span class="comment">// user/lib/fd.c</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">fd2data</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span> &#123; <span class="keyword">return</span> (<span class="type">void</span>*)INDEX2DATA(fd2num(fd)); &#125;</span><br><span class="line"><span class="type">int</span>   <span class="title function_">fd2num</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span>  &#123; <span class="keyword">return</span> ((u_int)fd - FDTABLE) / BY2PG; &#125;</span><br><span class="line"><span class="type">int</span>   <span class="title function_">num2fd</span><span class="params">(<span class="type">int</span> fd)</span>         &#123; <span class="keyword">return</span> FDTABLE + fd * BY2PG; &#125;</span><br></pre></td></tr></table></figure><p>So when we open a file, we first prepare the file descriptor, then map the file to its 4 MB segment.</p><blockquote><p>Previously, we know that MOS can only handle 4 MB file. So this is enough.</p></blockquote><h3 id="2-4-3-Allocate-Free-File-Descriptor"><a href="#2-4-3-Allocate-Free-File-Descriptor" class="headerlink" title="2.4.3 Allocate &amp; Free File Descriptor"></a>2.4.3 Allocate &amp; Free File Descriptor</h3><p>Well, the arrangement of these two function is not that pleasing. Perhaps due the the use of them. <code>fd_alloc</code> is used by more functions when opening different devices, while close can handle all devices.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/fd.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fd_alloc</span><span class="params">(<span class="keyword">struct</span> Fd** fd)</span>;</span><br><span class="line"><span class="comment">// user/lib/fd.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fd_close</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span>;</span><br></pre></td></tr></table></figure><p>When we allocate a file descriptor, we only <strong>find</strong> the first empty 4 KB segment, and return its virtual address. We <strong>do not</strong> allocate page for it yet! The page allocation will be done later when initialize the descriptor by File System process. So when we close a file descriptor, we simple un-map the page from the virtual address.</p><details class="toggle"><summary class="toggle-button" style>fd_alloc/close</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fd_alloc</span><span class="params">(<span class="keyword">struct</span> Fd** fd)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (u_int fdno = <span class="number">0</span>; fdno &lt; MAXFD - <span class="number">1</span>; fdno++)</span><br><span class="line">    &#123;</span><br><span class="line">        u_int va = INDEX2FD(fdno);</span><br><span class="line">        <span class="keyword">if</span> ((vpd[VPD(va)] &amp; PTE_V) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Later, a new page directory entry will be</span></span><br><span class="line">            <span class="comment">// created at the same time.</span></span><br><span class="line">            *fd = (<span class="keyword">struct</span> Fd*)va;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((vpt[VPN(va)] &amp; PTE_V) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            *fd = (<span class="keyword">struct</span> Fd*)va;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -E_MAX_OPEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fd_close</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span></span><br><span class="line">&#123;</span><br><span class="line">    syscall_mem_unmap(<span class="number">0</span>, fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>One more thing, when we want to look up a file descriptor, we use the id of the file descriptor (what we get from <code>fd2num</code>). We cannot find the file descriptor immediately after <code>fd_alloc</code>, since then, no actual page is allocated. We can only get it after File System initialized it for us.</p><details class="toggle"><summary class="toggle-button" style>fd_lookup</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fd_lookup</span><span class="params">(<span class="type">int</span> fdnum, <span class="keyword">struct</span> Fd** fd)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fdnum &gt;= MAXFD)</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    u_int va = INDEX2FD(fdnum);</span><br><span class="line">    <span class="keyword">if</span> ((vpt[VPN(va)] &amp; PTE_V) != <span class="number">0</span>)  <span class="comment">// fd is used</span></span><br><span class="line">    &#123;</span><br><span class="line">        *fd = (<span class="keyword">struct</span> Fd*)va;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="2-4-4-Traverse-File-Blocks"><a href="#2-4-4-Traverse-File-Blocks" class="headerlink" title="2.4.4 Traverse File Blocks"></a>2.4.4 Traverse File Blocks</h3><p>We can use <code>file_block_walk</code> to get the corresponding <strong>disk block id</strong> of the given <strong>file block id</strong>. This one is quite similar to its peer <code>pgdir_walk</code>. And we wrap it to do the conversion from file block id to disk block id as <code>file_map_block</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_map_block</span><span class="params">(<span class="keyword">struct</span> File* f, u_int filebno, u_int* diskbno, u_int alloc)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_block_walk</span><span class="params">(<span class="keyword">struct</span> File* f, u_int filebno, <span class="type">uint32_t</span>** ppdiskbno, u_int alloc)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>file_map_block</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_map_block</span><span class="params">(<span class="keyword">struct</span> File* f, u_int filebno, u_int* diskbno, u_int alloc)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="comment">// I think this pointer is redundant. We can simply use</span></span><br><span class="line"><span class="comment">// uint32_t bno instead.</span></span><br><span class="line"><span class="type">uint32_t</span>* ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 1: find the pointer for the target block.</span></span><br><span class="line"><span class="keyword">if</span> ((r = file_block_walk(f, filebno, &amp;ptr, alloc)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: if the block not exists, and create is set, alloc one.</span></span><br><span class="line"><span class="keyword">if</span> (*ptr == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (alloc == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> -E_NOT_FOUND;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((r = alloc_block()) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">*ptr = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: set the pointer to the block in *diskbno and return 0.</span></span><br><span class="line">*diskbno = *ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle"><summary class="toggle-button" style>file_block_walk</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">file_block_walk</span><span class="params">(<span class="keyword">struct</span> File* f, u_int filebno, <span class="type">uint32_t</span>** ppdiskbno, u_int alloc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="type">uint32_t</span>* ptr; <span class="comment">// ptr is the address of diskbno, so *ptr is diskbno</span></span><br><span class="line">    <span class="type">uint32_t</span>* blk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filebno &lt; NDIRECT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step 1: if the target block is corresponded to a direct pointer, just return the</span></span><br><span class="line">        <span class="comment">// disk block number.</span></span><br><span class="line">        ptr = &amp;f-&gt;f_direct[filebno];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (filebno &lt; NINDIRECT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Step 2: if the target block is corresponded to the indirect block, but there&#x27;s no</span></span><br><span class="line">        <span class="comment">//  indirect block and `alloc` is set, create the indirect block.</span></span><br><span class="line">        <span class="keyword">if</span> (f-&gt;f_indirect == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (alloc == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -E_NOT_FOUND;</span><br><span class="line">            <span class="keyword">if</span> ((r = alloc_block()) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            f-&gt;f_indirect = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Step 3: read the new indirect block to memory.</span></span><br><span class="line">        <span class="keyword">if</span> ((r = read_block(f-&gt;f_indirect, (<span class="type">void</span>**)&amp;blk, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        ptr = blk + filebno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: store the result into *ppdiskbno, and return 0.</span></span><br><span class="line">    *ppdiskbno = ptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>I just don’t understand why here we pass <code>diskbno</code> as a double-pointer, which, obviously, can be done via a simple pointer. ☹️</p></blockquote></div></details><p>Similarly, we have <code>file_get_block</code> to directly get the block content from its file block id.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/serv.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_get_block</span><span class="params">(<span class="keyword">struct</span> File *f, u_int blockno, <span class="type">void</span> **pblk)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>file_get_block</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs/fs.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_get_block</span><span class="params">(<span class="keyword">struct</span> File* f, u_int filebno, <span class="type">void</span>** blk)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">u_int diskbno;</span><br><span class="line">u_int isnew;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 1: find the disk block number is `f` using `file_map_block`.</span></span><br><span class="line"><span class="keyword">if</span> ((r = file_map_block(f, filebno, &amp;diskbno, <span class="number">1</span>)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: read the data in this disk to blk.</span></span><br><span class="line"><span class="keyword">if</span> ((r = read_block(diskbno, blk, &amp;isnew)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="2-5-File-Operations"><a href="#2-5-File-Operations" class="headerlink" title="2.5 File Operations"></a>2.5 File Operations</h2><p>Finally, we should provide interface for user processes to manipulate files. All our file operation are handed to File System process via IPC, and File System will do all stuffs for us and deliver necessary data back to us. Here I just list some of them.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, u_int omode, <span class="keyword">struct</span> Fd* fd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_map</span><span class="params">(u_int fileid, u_int offset, <span class="type">void</span>* dstva)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_close</span><span class="params">(u_int fileid)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_remove</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>For more information on how File System process handle these requests, please refer to may another post.</p><ul><li><a href="../File-System-IPC/">File System IPC</a></li></ul></blockquote><p>File operations are provided to users by library functions, such as <code>open</code> and <code>close</code>, <code>read</code> and <code>write</code>.</p><h3 id="2-5-1-Device-Interface"><a href="#2-5-1-Device-Interface" class="headerlink" title="2.5.1 Device Interface"></a>2.5.1 Device Interface</h3><p>After we open a file, or to be more general, open a device, we can just do many operations just using device, instead of by requesting File System. We have three types of devices, and each can be represented by a <code>Device</code> structure. Are we getting it? We are using function pointers to achieve polymorphism.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dev</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> dev_id;</span><br><span class="line">    <span class="type">char</span>* dev_name;</span><br><span class="line">    <span class="type">int</span> (*dev_read) (<span class="keyword">struct</span> Fd*, <span class="type">void</span>*, u_int, u_int);</span><br><span class="line">    <span class="type">int</span> (*dev_write)(<span class="keyword">struct</span> Fd*, <span class="type">const</span> <span class="type">void</span>*, u_int, u_int);</span><br><span class="line">    <span class="type">int</span> (*dev_close)(<span class="keyword">struct</span> Fd*);</span><br><span class="line">    <span class="type">int</span> (*dev_stat) (<span class="keyword">struct</span> Fd*, <span class="keyword">struct</span> Stat*);</span><br><span class="line">    <span class="type">int</span> (*dev_seek) (<span class="keyword">struct</span> Fd*, u_int);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then we have these three devices.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span> <span class="title">devcons</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span> <span class="title">devfile</span>;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span> <span class="title">devpipe</span>;</span></span><br></pre></td></tr></table></figure><p>Then, let’s see how <code>devfile</code> is initialized. So the problem now is how these concrete functions are implemented.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dev</span> <span class="title">devfile</span> =</span> &#123;</span><br><span class="line">    .dev_id    = <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">    .dev_name  = <span class="string">&quot;file&quot;</span>,</span><br><span class="line">    .dev_read  = file_read,</span><br><span class="line">    .dev_write = file_write,</span><br><span class="line">    .dev_close = file_close,</span><br><span class="line">    .dev_stat  = file_stat,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>file_read</code> reads n bytes from the given file from given offset.</p><details class="toggle"><summary class="toggle-button" style>file_read</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">file_read</span><span class="params">(<span class="keyword">struct</span> Fd* fd, <span class="type">void</span>* buf, u_int n, u_int offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">f</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">    u_int size = f-&gt;f_file.f_size;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Avoid reading past the end of file.</span></span><br><span class="line">    <span class="keyword">if</span> (offset &gt; size)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (offset + n &gt; size)</span><br><span class="line">        n = size - offset;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf, (<span class="type">char</span>*)fd2data(fd) + offset, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p><code>file_write</code> is similar to its read brother.</p><details class="toggle"><summary class="toggle-button" style>file_write</summary><div class="toggle-content"><p>Generally, there is not much difference, but for write, we have to enlarge the file when necessary.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">file_write</span><span class="params">(<span class="keyword">struct</span> Fd* fd, <span class="type">const</span> <span class="type">void</span>* buf, u_int n, u_int offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">f</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">    u_int tot = offset + n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Don&#x27;t write more than the maximum file size.</span></span><br><span class="line">    <span class="keyword">if</span> (tot &gt; MAXFILESIZE)</span><br><span class="line">        <span class="keyword">return</span> -E_NO_DISK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Increase the file&#x27;s size if necessary</span></span><br><span class="line">    <span class="keyword">if</span> (tot &gt; f-&gt;f_file.f_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = ftruncate(fd2num(fd), tot)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the data</span></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">char</span>*)fd2data(fd) + offset, buf, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;   <span class="comment">// return bytes written</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">ftruncate</span><span class="params">(<span class="type">int</span> fdnum, u_int size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; MAXFILESIZE)</span><br><span class="line">        <span class="keyword">return</span> -E_NO_DISK;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd-&gt;fd_dev_id != devfile.dev_id)</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">f</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">    u_int fileid = f-&gt;f_fileid;</span><br><span class="line">    u_int oldsize = f-&gt;f_file.f_size;</span><br><span class="line">    f-&gt;f_file.f_size = size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = fsipc_set_size(fileid, size)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span>* va = fd2data(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Map any new pages needed if extending the file</span></span><br><span class="line">    <span class="keyword">for</span> (u_int i = ROUND(oldsize, BY2PG); i &lt; ROUND(size, BY2PG); i += BY2PG)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = fsipc_map(fileid, i, va + i)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fsipc_set_size(fileid, oldsize);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unmap pages if truncating the file</span></span><br><span class="line">    <span class="keyword">for</span> (u_int i = ROUND(size, BY2PG); i &lt; ROUND(oldsize, BY2PG); i += BY2PG)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)(va + i))) &lt; <span class="number">0</span>)</span><br><span class="line">            user_panic(<span class="string">&quot;ftruncate: syscall_mem_unmap %08x: %e&quot;</span>, va + i, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>When we close a file, we first should mark it dirty to save any changes back to the disk. Then, we just un-map its corresponding virtual address.</p><details class="toggle"><summary class="toggle-button" style>file_close</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">file_close</span><span class="params">(<span class="keyword">struct</span> Fd* fd)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">ffd</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">    u_int fileid = ffd-&gt;f_fileid;</span><br><span class="line">    u_int size = ffd-&gt;f_file.f_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the start address storing the file&#x27;s content.</span></span><br><span class="line">    <span class="type">void</span>* va = fd2data(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tell the file server the dirty page.</span></span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; size; i += BY2PG)</span><br><span class="line">        fsipc_dirty(fileid, i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Request the file server to close the file with fsipc.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fsipc_close(fileid)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        debugf(<span class="string">&quot;cannot close the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unmap the content of file, release memory.</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; size; i += BY2PG)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)(va + i))) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            debugf(<span class="string">&quot;cannont unmap the file.\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Well, there’s not much to say about <code>file_stat</code>, it just get the statistics of a file.</p><details class="toggle"><summary class="toggle-button" style>file_stat</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">file_stat</span><span class="params">(<span class="keyword">struct</span> Fd* fd, <span class="keyword">struct</span> Stat* st)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">f</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(st-&gt;st_name, f-&gt;f_file.f_name);</span><br><span class="line">    st-&gt;st_size = f-&gt;f_file.f_size;</span><br><span class="line">    st-&gt;st_isdir = f-&gt;f_file.f_type == FTYPE_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="2-5-2-Library-Interface"><a href="#2-5-2-Library-Interface" class="headerlink" title="2.5.2 Library Interface"></a>2.5.2 Library Interface</h3><p>We cannot let users manipulate device directly, so we hide those details and provide some library interface for them. For the functions mentioned in <code>2.5.1</code>, we have corresponding library functions for each of them.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/include/lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, u_int nbytes)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, u_int nbytes)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="keyword">struct</span> Stat* stat)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>close</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fdnum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span>* <span class="title">dev</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = dev_lookup(fd-&gt;fd_dev_id, &amp;dev)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    r = (*dev-&gt;dev_close)(fd);</span><br><span class="line">    fd_close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ℹ This is a little special, please refer to <a href="../File-System-IPC/">File System IPC</a> for more information. 😙</p></blockquote></div></details><details class="toggle"><summary class="toggle-button" style>read</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fdnum, <span class="type">void</span>* buf, u_int n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span>* <span class="title">dev</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = dev_lookup(fd-&gt;fd_dev_id, &amp;dev)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fd-&gt;fd_omode == O_WRONLY)</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">    r = dev-&gt;dev_read(fd, buf, n, fd-&gt;fd_offset);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (r &gt; <span class="number">0</span>)</span><br><span class="line">        fd-&gt;fd_offset += r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read n bytes not at once</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">readn</span><span class="params">(<span class="type">int</span> fdnum, <span class="type">void</span>* buf, u_int n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m, tot;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (tot = <span class="number">0</span>; tot &lt; n; tot += m)</span><br><span class="line">    &#123;</span><br><span class="line">        m = read(fdnum, (<span class="type">char</span>*)buf + tot, n - tot);</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle"><summary class="toggle-button" style>write</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fdnum, <span class="type">const</span> <span class="type">void</span>* buf, u_int n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span>* <span class="title">dev</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = dev_lookup(fd-&gt;fd_dev_id, &amp;dev)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd-&gt;fd_omode &amp; O_ACCMODE) == O_RDONLY)</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    r = dev-&gt;dev_write(fd, buf, n, fd-&gt;fd_offset);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; <span class="number">0</span>)</span><br><span class="line">        fd-&gt;fd_offset += r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="toggle"><summary class="toggle-button" style>stat</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="keyword">struct</span> Stat* stat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd, r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(path, O_RDONLY)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">    r = fstat(fd, stat);</span><br><span class="line">    close(fd);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fstat</span><span class="params">(<span class="type">int</span> fdnum, <span class="keyword">struct</span> Stat* stat)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span>* <span class="title">dev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span> || (r = dev_lookup(fd-&gt;fd_dev_id, &amp;dev)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stat-&gt;st_name[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    stat-&gt;st_size = <span class="number">0</span>;</span><br><span class="line">    stat-&gt;st_isdir = <span class="number">0</span>;</span><br><span class="line">    stat-&gt;st_dev = dev;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (*dev-&gt;dev_stat)(fd, stat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="2-5-3-Open-Close-a-File"><a href="#2-5-3-Open-Close-a-File" class="headerlink" title="2.5.3 Open &amp; Close a File"></a>2.5.3 Open &amp; Close a File</h3><p>Above is operations after we open a file. But, we have to open it first. So… ? 🫤 Let’s open it. The opening process can be divided into several steps.</p><ol><li>Allocate a page for file description. As stated above, we simple get a candidate virtual address and do nothing to it. So if we do this again, we’ll get the same virtual address.</li><li>Initialize the virtual address by requesting File System. File System will open the file and store the file descriptor in the virtual address we got in the first step. Of course, it will allocate a page to the address first. 🤪</li><li>Then, as we have the file descriptor allocate pages for the content of the file and map them to the 4 MB segment.</li><li>At last, return the file descriptor number to the caller.</li></ol><details class="toggle"><summary class="toggle-button" style>open</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 1: Alloc a new &#x27;Fd&#x27; using &#x27;fd_alloc&#x27; in fd.c.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_alloc(&amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 2: Prepare the &#x27;fd&#x27; using &#x27;fsipc_open&#x27; in fsipc.c.</span></span><br><span class="line">    <span class="keyword">if</span> ((r = fsipc_open(path, mode, fd)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 3: Set &#x27;va&#x27; to the address of the page where the &#x27;fd&#x27;&#x27;s data is cached.</span></span><br><span class="line">    <span class="type">char</span>* va = fd2data(fd);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>* <span class="title">ffd</span> =</span> (<span class="keyword">struct</span> Filefd*)fd;</span><br><span class="line">    u_int fileid = ffd-&gt;f_fileid;</span><br><span class="line">    u_int size = ffd-&gt;f_file.f_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 4: Alloc pages and map the file content using &#x27;fsipc_map&#x27;.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i += BY2PG)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = fsipc_map(fileid, i, va + i)) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Step 5: Return the number of file descriptor using &#x27;fd2num&#x27;.</span></span><br><span class="line">    <span class="keyword">return</span> fd2num(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>Compared to opening a file, it would be much easier to close it.</p><details class="toggle"><summary class="toggle-button" style>close</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fdnum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span>* <span class="title">dev</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>* <span class="title">fd</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = fd_lookup(fdnum, &amp;fd)) &lt; <span class="number">0</span> || (r = dev_lookup(fd-&gt;fd_dev_id, &amp;dev)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = (*dev-&gt;dev_close)(fd);</span><br><span class="line">    fd_close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>A little verbose this time, I guess. 😵‍💫 But there are still some points that I didn’t cover… This is it… 😴 </p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started With Docker</title>
      <link href="/posts/Getting-Started-with-Docker/"/>
      <url>/posts/Getting-Started-with-Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>I’m a new to Docker, and I have not understand it yet. So in this article, I’ll only show the basic use of it and won’t go much further.</p><blockquote><p>Since I don’t want to put more pressure on my local C volume, I use remote Ubuntu server as an example.</p></blockquote><p>Again, here is a quick reference. You can expand it optionally.</p><details class="toggle"><summary class="toggle-button" style>Docker Quick Reference</summary><div class="toggle-content"><p><strong>Download Docker</strong></p><p>Using one-click script.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://test.docker.com -o test-docker.sh</span><br><span class="line"><span class="built_in">chmod</span> u+x test-docker.sh </span><br><span class="line">./test-docker.sh</span><br></pre></td></tr></table></figure><p>Using official <code>apt</code> source.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">       <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">       <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">       stable&quot;</span></span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>Using mirror <code>apt</code> source.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">      <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">      <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">      stable&quot;</span></span><br></pre></td></tr></table></figure><p>Installation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>Sample <code>Dockerfile</code></strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>                      <span class="comment"># indicate build base</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./RESTful /RESTful              <span class="comment"># copy working directory to Docker Image</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /RESTful                     <span class="comment"># set working directory</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt  <span class="comment"># install python requirements</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> python app.py                    <span class="comment"># run python file</span></span></span><br></pre></td></tr></table></figure><p><strong>Build Docker Image</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build -t IMAGE .                    <span class="comment"># simple</span></span><br><span class="line">sudo docker build -t IMAGE:TAG -f Dockerfile .  <span class="comment"># with tag &#x27;v1&#x27;, and indicate build file</span></span><br></pre></td></tr></table></figure><p><strong>Show All Docker Images</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure><p><strong>Delete Docker Image</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker image <span class="built_in">rm</span> [-f] IMAGE:TAG [IMAGE...]</span><br><span class="line">sudo docker rmi [-f] IMAGE:TAG [IMAGE...]</span><br></pre></td></tr></table></figure><p><strong>Run Docker Container</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -it --<span class="built_in">rm</span> -d --name demo -p 5000:5050 IMAGE:TAG <span class="comment"># remove on stop</span></span><br><span class="line">sudo docker run -d --name demo -p 5000:5050 IMAGE:TAG</span><br></pre></td></tr></table></figure><p><strong>Delete Docker Container</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">rm</span> [-f] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><p><strong>Show Containers</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps [--all]</span><br></pre></td></tr></table></figure><p><strong>Stop &amp; Start</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop CONTAINER</span><br><span class="line">sudo docker start CONTAINER</span><br><span class="line">sudo docker restart CONTAINER</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker"></a>What is Docker</h1><p>“<a href="https://www.docker.com/">Docker</a> is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.”</p><hr><h1 id="Basic-Use-of-Docker"><a href="#Basic-Use-of-Docker" class="headerlink" title="Basic Use of Docker"></a>Basic Use of Docker</h1><blockquote><p>Reference: <a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p></blockquote><h2 id="Download-Docker"><a href="#Download-Docker" class="headerlink" title="Download Docker"></a>Download Docker</h2><p>For Linux, I recommend auto download. It is way much more convenient than do it manually. Just download the official bash downloader, and run the file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://test.docker.com -o test-docker.sh</span><br><span class="line">$ <span class="built_in">chmod</span> u+x test-docker.sh </span><br><span class="line">$ ./test-docker.sh</span><br></pre></td></tr></table></figure><p>By doing this, Docker will be downloaded automatically, and you can check its version then.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 24.0.0-rc.1, build eabb927</span><br></pre></td></tr></table></figure><h2 id="Build-Docker-Image"><a href="#Build-Docker-Image" class="headerlink" title="Build Docker Image"></a>Build Docker Image</h2><p>Here, I’d like to use a simple Python Flask + RESTful project as a demonstration. Below is the structure of the project.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Project</span><br><span class="line">├── Dockerfile            <span class="comment"># Docker build file</span></span><br><span class="line">└── RESTful</span><br><span class="line">    ├── requirements.txt  <span class="comment"># python requirements</span></span><br><span class="line">    └── app.py            <span class="comment"># Flask main file</span></span><br></pre></td></tr></table></figure><p>Really simple, huh?</p><blockquote><p>You can create Python requirements by run the following command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements</span><br></pre></td></tr></table></figure></blockquote><p>Then, it is time to write <code>Dockerfile</code>. Here is an example. The path here should be relative to <code>Dockerfile</code>.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>                      <span class="comment"># indicate build base</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./RESTful /RESTful              <span class="comment"># copy working directory to Docker Image</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /RESTful                     <span class="comment"># set working directory</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt  <span class="comment"># install python requirements</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> python app.py                    <span class="comment"># run python file</span></span></span><br></pre></td></tr></table></figure><p>After <code>Dockerfile</code> is finished, you can build Docker Image now by the following command. Make sure you are in the same directory as <code>Dockerfile</code>, here is <code>Project</code>. Be careful about the <code>.</code> at last, it indicates Docker to work at current directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo_image .                   <span class="comment"># simple</span></span><br><span class="line">docker build -t demo_image:v1 -f Dockerfile .  <span class="comment"># with tag &#x27;v1&#x27;, and indicate build file</span></span><br></pre></td></tr></table></figure><blockquote><p>You may need root permission to execute docker commands by adding <code>sudo</code> before commands.</p></blockquote><p>If no error occurred, you will get a Docker image. You can check it by listing all images.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>And if you are not satisfied with this image anymore, you can delete it. The tag is optional if you didn’t specify it on creation. There are two ways to delete an image, and <code>-f</code>&#x2F;<code>--force</code> means force delete.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [-f] demo_image:v1</span><br><span class="line">docker rmi [-f] demo_image:v1</span><br></pre></td></tr></table></figure><h2 id="Run-Docker-Container"><a href="#Run-Docker-Container" class="headerlink" title="Run Docker Container"></a>Run Docker Container</h2><p>When you run a Docker image, it will become Docker container. You can run it rather easily, but it takes many arguments. <code>run</code> command is used only the first time to start container. Later start should use <code>start</code> command instead.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> -d --name demo -p 5000:5050 demo_image:v1</span><br><span class="line">docker run -d --name demo -p 5000:5050 demo_image:v1 <span class="comment"># fewer arguments</span></span><br></pre></td></tr></table></figure><p><strong><code>-i</code></strong>:  Keep STDIN open even if not attached.</p><p><strong><code>-t</code></strong>: Allocate a pseudo-TTY</p><p><strong><code>--rm</code></strong>: Automatically remove the container when it exits. If this is added, container will be remove on stop.</p><p><code>-d</code>:  Run container in background and print container ID.</p><p><strong><code>--name</code></strong>: Assign container name. If omitted, a random name will be chosen.</p><p><strong><code>-p 5000:5050</code></strong>: This indicates the port you want docker to run at. On the left is the host port, which will be wired to host machine. On the right is Docker’s internal port. Emm… Like a virtual machine. For this, we can access our Flask service via localhost:5000, but in Flask, we should set our port to 5050 as it is actually running in Docker.</p><blockquote><p>For example, in our <code>app.py</code>, we should write like this. Here, we should use <code>0.0.0.0</code> instead of <code>127.0.0.1</code> for some reason that… that I don’t know. 🤐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5050</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></blockquote><p>Once a container is created, it will start to run automatically. To see which containers are currently running, you can use <code>docker ps</code> command. It will list running container info like this. Since there are too many columns, I only list the important ones. <code>docker ps --all</code> will also show stopped containers.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID  IMAGE             CREATED             STATUS                       NAMES</span><br><span class="line">ec6b0ae83f02  demo_image:v1     2 minutes ago       Up 2 minutes                 demo</span><br><span class="line">$ docker ps --all</span><br><span class="line">CONTAINER ID  IMAGE             CREATED             STATUS                       NAMES</span><br><span class="line">ec6b0ae83f02  demo_image:v1     2 minutes ago       Up 2 minutes                 demo</span><br><span class="line">979a3f5e104c  another_image:v1  About a minute ago  Exited (137) 13 seconds ago  daemon</span><br></pre></td></tr></table></figure><p>We can see the container ID, and the image it comes from, and their names.</p><p>If you want to delete a container, just use <code>rm</code> command. Again, <code>-f</code>&#x2F;<code>--force</code> is for force removal. You can use both container name or their id.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [-f] demo</span><br><span class="line">docker <span class="built_in">rm</span> [-f] ec6b0ae83f02</span><br></pre></td></tr></table></figure><h2 id="Start-Stop-Docker"><a href="#Start-Stop-Docker" class="headerlink" title="Start &amp; Stop Docker"></a>Start &amp; Stop Docker</h2><p>Well, when we do not want a Docker image run, we can stop it by the following command. You can stop a container by its name or id. If you didn’t assigned <code>--rm</code> on run, they will be kept, just not running anymore.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop demo</span><br><span class="line">docker stop ec6b0ae83f02</span><br></pre></td></tr></table></figure><blockquote><p>You can get container’s name and ID via <code>docker ps</code>.</p></blockquote><p>Then, you can use <code>start</code> command to run a stopped container.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker start demo</span><br><span class="line">docker start ec6b0ae83f02</span><br></pre></td></tr></table></figure><p>And, you can also restart a container.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker restart demo</span><br><span class="line">docker restart ec6b0ae83f02</span><br></pre></td></tr></table></figure><hr><p>Emm… Actually Docker can do push and pull, which is similar to Git. But I’m not getting it yet. So… Just be it. 😵‍💫</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Django + uWSGI + Nginx</title>
      <link href="/posts/Setup-Django-uWSGI-Nginx/"/>
      <url>/posts/Setup-Django-uWSGI-Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In this article, I’d like to demonstrate on how to setup backend service of Django using uWSGI and Nginx. It mainly focus on the configurations of uWSGI and Nginx, rather than how to build Django  project.</p><blockquote><p>I use Ubuntu server. :)</p></blockquote><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Before you start, you should have a Linux server, with conda environment.</p><h2 id="Quick-References"><a href="#Quick-References" class="headerlink" title="Quick References"></a>Quick References</h2><p>Here are some quick references for uWSGI and Nginx. You can expand it optianlly.</p><details class="toggle"><summary class="toggle-button" style>Quick References</summary><div class="toggle-content"><h3 id="uWSGI"><a href="#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini  <span class="comment"># start uwsgi service</span></span><br><span class="line">uwsgi --stop uwsgi.pid <span class="comment"># stop uwsgi service</span></span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start Nginx</span></span><br><span class="line">sudo nginx</span><br><span class="line">systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit configuration</span></span><br><span class="line">sudo vim /etc/nginx/conf.d/default.conf <span class="comment"># default.conf may vary</span></span><br><span class="line">sudo nginx -s reload <span class="comment"># reload configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stop Nginx</span></span><br><span class="line">sudo nginx -s quit <span class="comment"># stop after current process finishes its work</span></span><br><span class="line">sudo nginx -s stop <span class="comment"># stop immediately</span></span><br></pre></td></tr></table></figure></div></details><hr><h1 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h1><h2 id="Step-1-Prepare-Django"><a href="#Step-1-Prepare-Django" class="headerlink" title="Step 1. Prepare Django"></a>Step 1. Prepare Django</h2><p>You should have your Django project ready. You should configure the virtual environment using <code>conda</code>. For example, your environment for this project is <code>django</code>. For the root directory of your project, here I use <code>/home/server/backend</code> as an example. This directory is where <code>manage.py</code> located.</p><h2 id="Step-2-Setup-uWSGI"><a href="#Step-2-Setup-uWSGI" class="headerlink" title="Step 2. Setup uWSGI"></a>Step 2. Setup uWSGI</h2><blockquote><p>Reference: <a href="https://www.runoob.com/python3/python-uwsgi.html">https://www.runoob.com/python3/python-uwsgi.html</a></p></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>“<a href="https://uwsgi-docs.readthedocs.io/en/latest/">uWSGI</a> (<a href="https://github.com/unbit/uwsgi">source code</a>), pronounced “mu wiz gee”, is a <a href="https://www.fullstackpython.com/wsgi-servers.html">Web Server Gateway Interface (WSGI) server</a> implementation that is typically used to run Python web applications.”</p><p style="text-align:right">- From <a href="https://www.fullstackpython.com/uwsgi.html" target="_blank">https://www.fullstackpython.com/uwsgi.html</a></p><h3 id="Install-uWSGI"><a href="#Install-uWSGI" class="headerlink" title="Install uWSGI"></a>Install uWSGI</h3><p>Go to the root folder of your Django project, where <code>manage.py</code> is located. Activate your corresponding environment, here, I use <code>django</code>. Then, you can download and install uWSGI.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge uwsgi</span><br></pre></td></tr></table></figure><blockquote><p>If you use <code>pip</code> to install <code>uwsgi</code>, you may encounter some errors due to <code>gcc</code> version. So a <code>conda</code> install is preferred.</p><p><strong>Important!</strong> Notice that, a global <code>uwsgi</code> won’t work! In that case, <code>uwsgi</code> wouldn’t locate correct Python environment. So you have to download it in this way.</p></blockquote><h3 id="Add-uwsgi-ini"><a href="#Add-uwsgi-ini" class="headerlink" title="Add uwsgi.ini"></a>Add <code>uwsgi.ini</code></h3><p>To use <code>uwsgi</code> as a host of our Django project, we need a <code>uwsgi.ini</code>. </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="comment">#socket = 127.0.0.1:5050</span></span><br><span class="line"><span class="attr">http</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5050</span></span><br><span class="line"><span class="attr">chdir</span> = /home/server/backend</span><br><span class="line"><span class="attr">wsgi-file</span> = /home/server/backend/backend_demo/wsgi.py</span><br><span class="line"><span class="attr">master</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-threads</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">processes</span> = <span class="number">8</span></span><br><span class="line"><span class="attr">buffer-size</span> = <span class="number">65536</span></span><br><span class="line"><span class="attr">vacuum</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">daemonize</span> = /home/server/backend/uwsgi.log</span><br><span class="line"><span class="attr">pidfile</span> = /home/server/backend/uwsgi.pid</span><br><span class="line"><span class="attr">virtualenv</span> = /home/ubuntu/opt/miniconda3/envs/django</span><br><span class="line"><span class="attr">uwsgi_read_timeout</span> = <span class="number">600</span></span><br><span class="line"><span class="attr">threads</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">chmod-socket</span> = <span class="number">664</span></span><br></pre></td></tr></table></figure><p>Some explanation to it. Technically, you can use relative path here. But absolute path can make sure no path related problem happens.</p><p><strong><code>socket</code>, <code>http</code></strong>: For these two, only one is needed. If you use Nginx, then use <code>socket</code>, and there will be no need to add port number. If you use <code>uwsgi</code> to run Django directly, use <code>http</code>, and you need add port number here.</p><blockquote><p>You may need to replace <code>127.0.0.1</code> with <code>0.0.0.0</code> if you could not access the server remotely.</p></blockquote><p><strong><code>chdir</code></strong>: This indicates the root folder of the backend project. This is where <code>manage.py</code> locates.</p><p><strong><code>wsgi-file</code></strong>: This is the <code>wsgi.py</code> file of your project.</p><p><strong><code>processes</code></strong>: This specifies the process number of uWSGI.</p><p><strong><code>daemonize</code></strong>: Well, this is the log file. Daemon process of uWSGI will put logs here.</p><p><strong><code>pidfile</code></strong>: This file stores the <code>pid</code> of uWSGI process, can be used to shut down uWSGI service.</p><p><strong><code>virtualenv</code></strong>: The virtual environment of your Django project. This can be found under your conda installation location. Usually <code>$&#123;conda_home&#125;/env/$&#123;env_name&#125;</code>.</p><p>The others are not that important, so I’m not going to spend time on them.</p><h3 id="Launch-uWSGI"><a href="#Launch-uWSGI" class="headerlink" title="Launch uWSGI"></a>Launch uWSGI</h3><p>Now that we haven’t setup Nginx yet, we should comment <code>socket</code> in <code>uwsgi.ini</code> out, and use <code>http</code> instead.</p><p>In your Django project root folder, run this to launch uWSGI. This tells it to use <code>uwsgi.ini</code> file to initialize, then it will run automatically.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><p>You can check it by find its processes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep uwsgi</span><br></pre></td></tr></table></figure><p>If no process, you can check <code>uwsgi.log</code> file for more information. If you installed <code>uwsgi</code> the same way as me, you should encounter no error.</p><h3 id="Stop-uWSGI"><a href="#Stop-uWSGI" class="headerlink" title="Stop uWSGI"></a>Stop uWSGI</h3><p>Well, start and end always come together. If you set <code>pidfile</code>, it will be quite easy.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --stop uwsgi.pid</span><br><span class="line">sudo pkill -f uwsgi    <span class="comment"># use it only when you don&#x27;t have uwsgi.pid</span></span><br></pre></td></tr></table></figure><h2 id="Step-3-Setup-Nginx"><a href="#Step-3-Setup-Nginx" class="headerlink" title="Step 3. Setup Nginx"></a>Step 3. Setup Nginx</h2><h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p>Well, <a href="https://nginx.org/">Nginx</a>, pronounced “Engine-X”, is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP&#x2F;UDP proxy server.</p><p>Basically, it works like this. For front end, it monitors certain ports, such as the common <code>80</code>. Then, depending on the url, it will redirect access to other ports, such as <code>/api</code>.</p><h3 id="Install-Nginx"><a href="#Install-Nginx" class="headerlink" title="Install Nginx"></a>Install Nginx</h3><p>Emm… Quite easy, huh.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h3 id="Configure-Nginx"><a href="#Configure-Nginx" class="headerlink" title="Configure Nginx"></a>Configure Nginx</h3><p>Usually, Nginx configuration file locates here: <code>/etc/nginx/conf.d/default.conf</code>. The name of it can vary. If it doesn’t exist, just create one. And this operation need root permission.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><blockquote><p>Tips: Almost all Nginx commands need root permission.</p></blockquote><p>Then, add the following configurations to it. This configuration will set frontend to <code>xx.xx.xx.xx:80</code>, or simply <code>xx.xx.xx.xx</code>. And backend to <code>xx.xx.xx.xx/api</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xx.xx.xx.xx;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/server/front;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location /api &#123;</span><br><span class="line">        include /etc/nginx/uwsgi_params;</span><br><span class="line">    uwsgi_pass 127.0.0.1:4000;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    error_page 497 https://$host$uri?$args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Some  explanations.</p><p><code>listen</code>: The port of front end. Usually 80.</p><p><code>server_name</code>: The public IP address of your server.</p><p><code>location</code>: This is used to redirect access. For example, <code>/</code> here means <code>xx.xx.xx.xx/</code>, and <code>/api</code> means <code>xx.xx.xx.xx/api</code>. So, if a url is like <code>xx.xx.xx.xx/api/login</code>, it will redirect it to <code>xx.xx.xx.xx:4000/api/login</code>.</p><blockquote><p><strong>Notice!</strong> We could <strong>not</strong> access <code>xx.xx.xx.xx:4000</code> directly.</p></blockquote><p>More about <code>location</code>. Here, <code>location /</code> is for front end. <code>root</code> is the root folder of your front end project. And others can remain the same. <code>location /api</code> is for backend. Here, since we use <code>uwsgi</code>, so we should add a include for it. Then, is our <code>uwsgi_pass</code>, it should be the same as what we assigned in <code>uwsgi.ini</code>. It tells Nginx to redirect requests to uWSGI port.</p><blockquote><p><code>/api</code> here is just a prefix that we set in Django project. You can change it, of course. But make sure it is consistent with the url pattern in Django.</p></blockquote><h3 id="Launch-Nginx"><a href="#Launch-Nginx" class="headerlink" title="Launch Nginx"></a>Launch Nginx</h3><p>Now that we have configured Nginx, we can start it. Before we start, make sure you change <code>uwsgi.ini</code> to use <code>socket</code> instead of <code>http</code>. Remember?</p><p>First, launch Nginx service. You can use either of these. Perhaps it is already online.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>Then, if any modification is made to the configuration file, a reload would be necessary.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>Now, you can access both frontend and backend.</p><h3 id="Stop-Nginx"><a href="#Stop-Nginx" class="headerlink" title="Stop Nginx"></a>Stop Nginx</h3><p>Emm… Again, start and end. Here is how to stop Nginx.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s quit <span class="comment"># stop after current process finishes its work</span></span><br><span class="line">sudo nginx -s stop <span class="comment"># stop immediately</span></span><br></pre></td></tr></table></figure><hr><p>Well, this is it. Configuring internet service is really… annoying… Barnacles. 😵‍💫</p>]]></content>
      
      
      <categories>
          
          <category> Web Development </category>
          
          <category> Web Servers &amp; Deployment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Nginx </tag>
            
            <tag> Deployment </tag>
            
            <tag> Linux </tag>
            
            <tag> Django </tag>
            
            <tag> uWSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy MySQL on Linux Server</title>
      <link href="/posts/Deploy-MySQL-on-Linux-Server/"/>
      <url>/posts/Deploy-MySQL-on-Linux-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h1><h2 id="Step-1-Prerequisites"><a href="#Step-1-Prerequisites" class="headerlink" title="Step 1. Prerequisites"></a>Step 1. Prerequisites</h2><p>Well, to deploy MySQL on a Linux server, you should have a Linux server first. <del>Of course.</del></p><h2 id="Step-2-Install-MySQL"><a href="#Step-2-Install-MySQL" class="headerlink" title="Step 2. Install MySQL"></a>Step 2. Install MySQL</h2><p>Just execute a ordinary install command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure><p>Then, you can check the installation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p>And you can check the status of MySQL service. If not started, execute the command below and check again.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysql.service</span><br><span class="line">sudo systemctl start mysql <span class="comment"># only use this when the previous fails</span></span><br></pre></td></tr></table></figure><h2 id="Step-2-Set-Root-Password"><a href="#Step-2-Set-Root-Password" class="headerlink" title="Step 2. Set Root Password"></a>Step 2. Set Root Password</h2><p>After installation, we should reset our root password. First, enter MySQL.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br></pre></td></tr></table></figure><blockquote><p>Notice that, we have to use <code>sudo</code> at the first time. Since it requires some extra privileges.</p></blockquote><p>Then, we can change root password by the following SQL. Just replace 123456 with your favorite password. 🤪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p>Here, root can only access database from localhost. If we want to access it remotely, we can create a new user, and grant it all privileges.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;admin&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;admin&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;# if you want to make sure privileges are applied</span><br></pre></td></tr></table></figure><h2 id="Step-4-Change-Configuration"><a href="#Step-4-Change-Configuration" class="headerlink" title="Step 4. Change Configuration"></a>Step 4. Change Configuration</h2><p>I’m not sure if this is needed, but I guess its somewhat useful. Just comment <code>bind-address = 127.0.0.1</code> out, or change it to <code>0.0.0.0</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>Then, restart MySQL service.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><h2 id="Step-3-Allow-Access"><a href="#Step-3-Allow-Access" class="headerlink" title="Step 3. Allow Access"></a>Step 3. Allow Access</h2><p>Emm… One last step. Make sure the 3306 port is open. This can be found in the control panel of your server’s provider.</p><p>Now, we can use <code>admin</code> to connect to our server remotely.</p><h2 id="Step-4-Connect-MySQL-with-Navicat"><a href="#Step-4-Connect-MySQL-with-Navicat" class="headerlink" title="Step 4. Connect MySQL with Navicat"></a>Step 4. Connect MySQL with Navicat</h2><p>In Navicat, crate a new connection. And just fill it with the host, username and password. And you are good to go.</p><img src="/posts/Deploy-MySQL-on-Linux-Server/image-20230427235605621.png" alt="image-20230427235605621" style="zoom: 67%;"><hr><p>Well, this is it. Too late… go to bed! 😴 </p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Deployment </tag>
            
            <tag> Linux </tag>
            
            <tag> Database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configure Visual Studio for Non-MSVC Projects</title>
      <link href="/posts/Configure-VS-for-Non-MSVC-Projects/"/>
      <url>/posts/Configure-VS-for-Non-MSVC-Projects/</url>
      
        <content type="html"><![CDATA[<h1 id="Scenario"><a href="#Scenario" class="headerlink" title="Scenario"></a>Scenario</h1><p>Well, there’s no doubt that <a href="https://visualstudio.microsoft.com/">Visual Studio</a> is the ultimate IDE in the universe. It is really awesome!</p><p><img src="/posts/Configure-VS-for-Non-MSVC-Projects/vs-icon.svg" alt="vs-icon"></p><p style="text-align:center; font-weight:bold; font-size:1.7em">Visual Studio 2022</p><p>However, it mainly focus on MSVC solution, thus default configurations are all for these projects. Thus we may need some extra configuration if we want to do cross-platform development to tell him what flavor of compiler we want.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>For example, in OS labs, we need to write GNU-style C with MIPS on Linux! It’s literally impossible before, but now that we have <a href="https://learn.microsoft.com/en-us/windows/wsl/install">Windows Subsystem for Linux (WSL)</a>, everything becomes <strong>SO EASY</strong>! We can just use WSL as a terminal in Visual Studio and make the best of this incredible IDE.</p><p>Unfortunately, this project is a <a href="https://www.gnu.org/software/make/">GNU Make</a> project, which is not fully compatible with MSVC. As a result, the powerful IntelliSense may not function properly due to some syntax reasons like what is shown below.</p><img src="/posts/Configure-VS-for-Non-MSVC-Projects/imagename=B764f02c492c24950b000a40cc4ef7ed8638175869963872073_20230420-192940-image.png" alt="image.png" style="zoom:80%;"><hr><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Here, I’d like to show the complete procedure to configure BUAA OS Lab on Windows with Visual Studio and WSL.</p><p>Before you start, you have to, of course, download and install Visual Studio and WSL on your computer. For WSL, just refer to this article below, or browse the internet for more information.</p><blockquote><p><a href="https://learn.microsoft.com/en-us/windows/wsl/install">Install Linux on Windows with WSL</a></p></blockquote><p>And of course, you must have Git on your computer.</p><p>One more thing, you should have MinGW for GCC support. You can download it here.</p><blockquote><p><a href="https://sourceforge.net/projects/mingw/">MinGW</a></p></blockquote><h2 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h2><p>As stated before, OS Lab is a Make project, so we can not manage it with MSVC project. Which means, it is merely a folder, an ordinary folder.</p><p>I guess you must have some experience with Git, right? Since the source code is on GitLab, and to code on our local machine, we have to clone a repository locally, so that we can make push and pulls.</p><blockquote><p>To achieve this, you may need to generate a token in GitLab. This is not difficult. Just generate a token, and use <code>http</code> protocol. The only thing you need is to remember the token and use it as password.</p><p>Notice that, you have to use profile the same as GitLab. That is to say, the Username is your real name, and Email is your BUAA mail.</p></blockquote><p>After done with token, just clone it to your own computer. One important thing is that, make sure your directory structure is like this.</p><p><img src="/posts/Configure-VS-for-Non-MSVC-Projects/image-20230427101742810.png" alt="image-20230427101742810"></p><p><code>\OS</code> is your project root folder, and <code>$&#123;student_id&#125;</code> is the actual git folder (<code>.git\</code> is under <code>$&#123;student_id&#125;</code>). <strong>Seriously!</strong></p><p>When you open the project, you actually open project folder, instead of the git folder.</p><blockquote><p> Did you know? Visual Studio has integrated Git! It is extraordinarily convenient! VS can identify Git repository automatically, and graphical management is far easier than command line. Try it out!</p></blockquote><p>Now, you have created the project.</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>You might be able to start coding after you finished the last step. However, you may encounter the problem I mentioned at the beginning of this article.</p><blockquote><p> The reason behind this is that default IntelliSense is for MSVC project, while our project uses GNU-C, which has some extended syntax. Of course, MSVC IntelliSense will not be able to recognize these alien syntax, which cause it to behave improperly.</p></blockquote><p>You can find official documentation for this here.</p><blockquote><p> <a href="https://learn.microsoft.com/en-us/cpp/build/open-folder-projects-cpp?view=msvc-170">Open Folder support for C++ build systems in Visual Studio</a></p></blockquote><p>You must have MinGW installed.</p><h2 id="Add-Configuration"><a href="#Add-Configuration" class="headerlink" title="Add Configuration"></a>Add Configuration</h2><h3 id="Step-1-Add-Configuration-File"><a href="#Step-1-Add-Configuration-File" class="headerlink" title="Step 1. Add Configuration File"></a>Step 1. Add Configuration File</h3><p>You should see ‘No Configurations’ in your toolbar. Click it and select Manage Configurations.</p><img src="/posts/Configure-VS-for-Non-MSVC-Projects/image-20230427104457354.png" alt="image-20230427104457354" style="zoom:80%;"><p>Then, in the pop-up window, choose ‘Mingw64’ and then click ‘Select’ to confirm.</p><img src="/posts/Configure-VS-for-Non-MSVC-Projects/image-20230427104700813.png" alt="image-20230427104700813" style="zoom:80%;"><p>After this, Visual Studio will automatically generate a template configuration file - <code>CppProperties.json</code> - under the root folder. And you should see things like this.</p><p><img src="/posts/Configure-VS-for-Non-MSVC-Projects/image-20230427104930822.png" alt="image-20230427104930822"></p><blockquote><p>Now you should understand why we put our git folder under a root folder. Because we do not want this <code>CppProperties.json</code> to be included in our real project.</p></blockquote><p>You may see warnings in the Output window, but don’t worry, we’ll neglect it.</p><h3 id="Step-2-Customize-Configuration"><a href="#Step-2-Customize-Configuration" class="headerlink" title="Step 2. Customize Configuration"></a>Step 2. Customize Configuration</h3><p>If you open any source file now, you are sure to see lots of errors caused by undefined identifiers. That’s because we didn’t tell Visual Studio where to find header files.</p><p>I guess you must have noticed that, in this configuration file, we tell Visual Studio the <code>intelliSenseMode</code> we want is <code>linux-gcc-x64</code>. However, our project is a 32-bits kernel, so we should change it to <code>linux-gcc-x86</code>. </p><blockquote><p>Well, VS has completion for this file, so you can actually choose within a range of available choices.</p></blockquote><p>Here is a complete configuration file. Just replace <code>MINGW_HOME</code> with your own installation location. (No <code>\</code> needed at the end of the directory.)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;environments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;MINGW_HOME&quot;</span><span class="punctuation">:</span> <span class="string">&quot;E:\\IDE\\MinGW&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;inheritEnvironments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;mingw_64&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mingw64&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceRoot&#125;\\**&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;env.MINGW_HOME&#125;\\lib\\gcc\\mingw32\\9.2.0\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$&#123;env.MINGW_HOME&#125;\\include&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux-gcc-x86&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;_BSD_SOURCE&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_EXPERIMENT&quot;</span> <span class="punctuation">]</span> <span class="comment">// enable DT_DIR</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>One suggestion is that, you should place <code>$&#123;workspaceRoot&#125;\\**</code> at the first place, so that VS can use your header files first if there are multiple files with the same name.</p><p>One more thing, the MinGW version may change. So you should better check out the installation folder of it, and see which version you’re using. Here, my version is <code>9.2.0</code>, as you can see in the file. Just replace it depending on your case.</p><p>Now, open your source files to see if they are correctly analyzed. 😉</p><blockquote><p>Still, you may need add those <code>defines</code> to enable some macros like <code>DT_DIR</code> in <code>dirent.h</code>.</p></blockquote><hr><p>Well, some of my friends use Jump Server in <a href="https://code.visualstudio.com/">Visual Studio Code</a>. That’s convenient, too, I guess. After all, Visual Studio Code is more light-weight.</p><p>Any way, I think Visual Studio + WSL is a wonderful combination.</p><hr><p>I think, this is it. Have fun!</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Visual Studio </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab 4 Reflection</title>
      <link href="/posts/Lab-4-Reflection/"/>
      <url>/posts/Lab-4-Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-2023-Spring-OS"><a href="#BUAA-2023-Spring-OS" class="headerlink" title="BUAA 2023 Spring OS"></a>BUAA 2023 Spring OS</h1><hr><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p>In this lab, we’ll have a glance at system call for the first time.</p><hr><h1 id="A-“Call”-to-Answer"><a href="#A-“Call”-to-Answer" class="headerlink" title="A “Call” to Answer"></a>A “Call” to Answer</h1><p>For security reasons, certain instructions could not be accessed by user process. However, user process still need to complete certain tasks. Therefore, we have to “call” kernel to do that for us. And we, again, as “kernel”, have to answer such a “call”.</p><blockquote><p> Well, this process is easy to understand since… PassBash also uses this pattern.</p></blockquote><h2 id="User-Call"><a href="#User-Call" class="headerlink" title="User Call"></a>User Call</h2><p>As user, we got a “phone book” to look for functions to call. And this phone book is <code>user/lib/syscall_lib.c</code>. We can see a lot of functions with prefix <code>syscall_</code>, indicating a system  call. When we want a service, we can just call specific system call.</p><p>But, how can we really call kernel? Well, we do this by executing <code>syscall</code> instruction. By calling this, we’ll sink into kernel immediately, thus make kernel answer. To make this simpler, we wrap system call into one unified interface, which is the so called <code>msyscall</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An example system call for user.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">syscall_putchar</span><span class="params">(<span class="type">int</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    msyscall(SYS_putchar, ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And for <code>msyscall</code>, we just do <code>syscall</code> to sink into kernel.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LEAF(msyscall)</span><br><span class="line">    syscall</span><br><span class="line">    j ra</span><br><span class="line">END(msyscall)</span><br></pre></td></tr></table></figure><h2 id="Kernel-Answer"><a href="#Kernel-Answer" class="headerlink" title="Kernel Answer"></a>Kernel Answer</h2><p>When user calls, we kernel will answer. <code>syscall</code> actually invoke exception No.8 - <code>handle_sys</code>, so our answer starts from this specific function. However, before we actually get into exception handler, we first jump to exception entry, which is a fixed address for MIPS. We set exception entry point in <code>kernel.lds</code>, and exception handler entry function will be loaded here.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># kernel.lds</span><br><span class="line">SECTIONS &#123;</span><br><span class="line">    # ...</span><br><span class="line">    . = 0x80000080;</span><br><span class="line">    .exc_gen_entry : &#123; *(.text.exc_gen_entry) &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This will be executed every time there is an exception.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># kern/entry.S</span><br><span class="line">.section .text.exc_gen_entry</span><br><span class="line">exc_gen_entry:</span><br><span class="line">    SAVE_ALL  # save all registers to Trapframe</span><br><span class="line">    mfc0 t0, CP0_CAUSE</span><br><span class="line">    andi t0, 0x7c</span><br><span class="line">    lw t0, exception_handlers(t0)  # call exception handler</span><br><span class="line">    jr t0</span><br></pre></td></tr></table></figure><p>So, what is <code>exception_handler</code>? We defined this previously <code>kern/traps.c</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*exception_handlers[<span class="number">32</span>])(<span class="type">void</span>) = &#123;</span><br><span class="line">    [<span class="number">0</span> ... <span class="number">31</span>] = handle_reserved,</span><br><span class="line">    [<span class="number">0</span>] = handle_int,</span><br><span class="line">    [<span class="number">2</span> ... <span class="number">3</span>] = handle_tlb,</span><br><span class="line">    [<span class="number">1</span>] = handle_mod,</span><br><span class="line">    [<span class="number">8</span>] = handle_sys,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>So we just jump to these specific handlers to handle our exceptions. You may notice that <code>CP0.Cause</code> register is used to get the handlers, so what is it?</p><p><img src="/posts/Lab-4-Reflection/image-20230420204633657.png" alt="image-20230420204633657"></p><p>We can see that, by <code>andi t0, 0x7c</code>, we get the <code>ExcCode</code> bits in it, which indicates the type of exception to handle.</p><blockquote><p>Notice that, for <code>exception_handlers(t0)</code>, <code>t0</code> is not a index in C. Instead, it is a raw offset! So the lowest 2 bits are zero to make it byte aligned.</p></blockquote><h2 id="Exception-Handler"><a href="#Exception-Handler" class="headerlink" title="Exception Handler"></a>Exception Handler</h2><p>Now that we can jump to exception handlers, let’s have a closer look at them, for example <code>handle_sys</code> here. It is declared using a macro. The actual function is <code>do_syscall</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># kern/genex.S</span><br><span class="line">BUILD_HANDLER sys do_syscall</span><br></pre></td></tr></table></figure><p>And then the declaration for <code>do_syscall</code> in <code>kern/syscall_all.c</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_syscall</span><span class="params">(<span class="keyword">struct</span> Trapframe* tf)</span>;</span><br></pre></td></tr></table></figure><p>Since all registers (including <code>pc</code>, <code>sp</code>, etc.) will be saved when exception is triggered, we can get the parameters user passed to us from corresponding <code>Trapframe</code>. More specifically, one register for handler type, and five for  actual parameters. For type, we also have a table in kernel for handlers in <code>kern/syscall_all.c</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* syscall_table[MAX_SYSNO] = &#123;</span><br><span class="line">    [SYS_putchar] = sys_putchar,</span><br><span class="line">    [SYS_exofork] = sys_exofork,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Register <code>$a0</code> indicates the type of the call, and <code>$a1</code> to <code>$a3</code> and the other 2 in stack are the real parameters. Then, we can get the correct handler for the call and pass parameters to it.</p><blockquote><p>In fact, user could passed at most 6 parameters to system call. However, the first one is the type of call, rather than a valid parameter.</p></blockquote><p>After handling, we set <code>$v0</code> (<code>$2</code>) to the return value of system call, to send it back to user.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf-&gt;regs[<span class="number">2</span>] = func(arg1, arg2, arg3, arg4, arg5);</span><br></pre></td></tr></table></figure><p>Here is the complete code for <code>do_syscall</code>.</p><details class="toggle"><summary class="toggle-button" style>do_syscall</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Call the function in &#x27;syscall_table&#x27; indexed at &#x27;sysno&#x27; with arguments from</span></span><br><span class="line"><span class="comment"> * user context and stack.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Hint:</span></span><br><span class="line"><span class="comment"> *   Use sysno from $a0 to dispatch the syscall.</span></span><br><span class="line"><span class="comment"> *   The possible arguments are stored at $a1, $a2, $a3, [$sp + 16 bytes],</span></span><br><span class="line"><span class="comment"> * [$sp + 20 bytes] in order.</span></span><br><span class="line"><span class="comment"> *   Number of arguments cannot exceed 5.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_syscall</span><span class="params">(<span class="keyword">struct</span> Trapframe* tf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> (*func)(u_int, u_int, u_int, u_int, u_int); <span class="comment">// handler</span></span><br><span class="line">    <span class="type">int</span> sysno = tf-&gt;regs[<span class="number">4</span>];  <span class="comment">// $a0</span></span><br><span class="line">    <span class="keyword">if</span> (sysno &lt; <span class="number">0</span> || sysno &gt;= MAX_SYSNO)</span><br><span class="line">    &#123;</span><br><span class="line">        tf-&gt;regs[<span class="number">2</span>] = -E_NO_SYS;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Add the EPC in &#x27;tf&#x27; by a word (size of an instruction). */</span></span><br><span class="line">    tf-&gt;cp0_epc += <span class="number">4</span>;<span class="comment">// to skip syscall instruction</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 2: Use &#x27;sysno&#x27; to get &#x27;func&#x27; from &#x27;syscall_table&#x27;. */</span></span><br><span class="line">    func = syscall_table[sysno];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: First 3 args are stored in $a1, $a2, $a3. */</span></span><br><span class="line">    u_int arg1 = tf-&gt;regs[<span class="number">5</span>];</span><br><span class="line">    u_int arg2 = tf-&gt;regs[<span class="number">6</span>];</span><br><span class="line">    u_int arg3 = tf-&gt;regs[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 4: Last 2 args are stored in stack at [$sp + 16 bytes], [$sp + 20 bytes]. */</span></span><br><span class="line">    u_int arg4, arg5;</span><br><span class="line">    arg4 = *(u_int*)(tf-&gt;regs[<span class="number">29</span>] + <span class="number">16</span>);<span class="comment">// $sp is $29</span></span><br><span class="line">    arg5 = *(u_int*)(tf-&gt;regs[<span class="number">29</span>] + <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Step 5: Invoke &#x27;func&#x27; with retrieved arguments and store its return value</span></span><br><span class="line"><span class="comment">     * to $v0 in &#x27;tf&#x27;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tf-&gt;regs[<span class="number">2</span>] = func(arg1, arg2, arg3, arg4, arg5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><blockquote><p>Notice that, for user, system call starts with <code>syscall_</code>, it at last calls the real system call in kernel mode, which starts with <code>sys_</code>.</p></blockquote><hr><h1 id="Basic-System-Calls"><a href="#Basic-System-Calls" class="headerlink" title="Basic System Calls"></a>Basic System Calls</h1><p>Before we get into some fancy system calls, lets have a look at some fundamental ones. They all located in <code>kern/syscall_all.c</code>.</p><h2 id="Identify-Process"><a href="#Identify-Process" class="headerlink" title="Identify Process"></a>Identify Process</h2><p>To know which process to manipulate, we use process id, which, in MOS, is <code>Env::env_id</code>. We simply get a <code>Env</code> from a <code>envid</code> via <code>envid2env</code> function. Its located in <code>kern/env.c</code>. If <code>checkperm</code> is set, we can only get <code>Env</code> that with certain permissions (relation with current env).</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">envid2env</span><span class="params">(u_int envid, <span class="keyword">struct</span> Env** penv, <span class="type">int</span> checkperm)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Notice that, if <code>envid</code> is zero, then this function will degenerate into getting current Env only!</p><p>By the way, this is why <code>Env::env_id</code> won’t be zero, since zero indicate current Env.</p></blockquote><p>Here is the complete definition of it.</p><details class="toggle"><summary class="toggle-button" style>envid2env</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Convert an existing &#x27;envid&#x27; to an &#x27;struct Env *&#x27;.</span></span><br><span class="line"><span class="comment"> *   If &#x27;envid&#x27; is 0, set &#x27;*penv = curenv&#x27;, otherwise set &#x27;*penv = &amp;envs[ENVX(envid)]&#x27;.</span></span><br><span class="line"><span class="comment"> *   In addition, if &#x27;checkperm&#x27; is non-zero, the requested env must be either</span></span><br><span class="line"><span class="comment"> * &#x27;curenv&#x27; or its immediate child.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Pre-Condition:</span></span><br><span class="line"><span class="comment"> *   &#x27;penv&#x27; points to a valid &#x27;struct Env *&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   return 0 on success, and set &#x27;*penv&#x27; to the env.</span></span><br><span class="line"><span class="comment"> *   return -E_BAD_ENV on error (invalid &#x27;envid&#x27; or &#x27;checkperm&#x27; violated).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">envid2env</span><span class="params">(u_int envid, <span class="keyword">struct</span> Env** penv, <span class="type">int</span> checkperm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Assign value to &#x27;e&#x27; using &#x27;envid&#x27;. */</span></span><br><span class="line">    <span class="keyword">if</span> (envid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * If envid is zero, this function will degenerate to get current</span></span><br><span class="line"><span class="comment">        * env only. If not, envid is bound to be different from e-&gt;env_id, since</span></span><br><span class="line"><span class="comment">        * e-&gt;envid won&#x27;t be zero. Hence, we must return here.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        *penv = curenv;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        e = &amp;envs[ENVX(envid)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e-&gt;env_status == ENV_FREE || e-&gt;env_id != envid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> -E_BAD_ENV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 2: Check when &#x27;checkperm&#x27; is non-zero. */</span></span><br><span class="line">    <span class="comment">/* Hints:</span></span><br><span class="line"><span class="comment">     *   Check whether the calling env has sufficient permissions to manipulate</span></span><br><span class="line"><span class="comment">     * the specified env, i.e. &#x27;e&#x27; is either &#x27;curenv&#x27; or its immediate child.</span></span><br><span class="line"><span class="comment">     *   If violated, return &#x27;-E_BAD_ENV&#x27;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (checkperm)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!((e-&gt;env_id == curenv-&gt;env_id) || (e-&gt;env_parent_id == curenv-&gt;env_id)))</span><br><span class="line">            <span class="keyword">return</span> -E_BAD_ENV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Assign &#x27;e&#x27; to &#x27;*penv&#x27;. */</span></span><br><span class="line">    *penv = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>For this line, we check <code>e-&gt;env_id</code> and <code>envid</code>, but why, we already get one?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (e-&gt;env_status == ENV_FREE || e-&gt;env_id != envid)</span><br></pre></td></tr></table></figure><p>We have 1024 Envs, and the low 10 bits are to present the physical offset of a env to the base address <code>envs</code>. If ew have more than 1024 Envs, the high 22 bits are to ensure uniqueness of Env.</p><p>Here, we get <code>e</code> by the lowest 10 bits from <code>envid</code> and ignores the high bits, thus make two different Envs with the same low 10 bits possible. This is perhaps because of getting a out of data Env, or simply a bad envid.</p></blockquote></div></details><h2 id="Memory-Management"><a href="#Memory-Management" class="headerlink" title="Memory Management"></a>Memory Management</h2><p>Memory management is important to kernel, there’s no doubt.</p><h3 id="sys-mem-alloc"><a href="#sys-mem-alloc" class="headerlink" title="sys_mem_alloc"></a><code>sys_mem_alloc</code></h3><p>Well, just like <code>malloc</code>, this function requires kernel to allocate a physical page, to make access at given virtual address legal.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_mem_alloc</span><span class="params">(u_int envid, u_int va, u_int perm)</span>;</span><br></pre></td></tr></table></figure><p>There’s not much thing to say about this one. It just allocate a new page, and use <code>page_insert</code> to map it to the given <code>va</code>. Though trivial, previous page that mapped to <code>va</code> will be unmapped. (see <code>page_insert</code>)</p><details class="toggle"><summary class="toggle-button" style>sys_mem_alloc</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Allocate a physical page and map &#x27;va&#x27; to it with &#x27;perm&#x27; in the address space</span></span><br><span class="line"><span class="comment"> *   of &#x27;envid&#x27;.</span></span><br><span class="line"><span class="comment"> *   If &#x27;va&#x27; is already mapped, that original page is silently unmapped.</span></span><br><span class="line"><span class="comment"> *   &#x27;envid2env&#x27; should be used with &#x27;checkperm&#x27; set, like in most syscalls, to</span></span><br><span class="line"><span class="comment"> *   ensure the target is either the caller or its child.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Return 0 on success.</span></span><br><span class="line"><span class="comment"> *   Return -E_BAD_ENV: &#x27;checkperm&#x27; of &#x27;envid2env&#x27; fails for &#x27;envid&#x27;.</span></span><br><span class="line"><span class="comment"> *   Return -E_INVAL:   &#x27;va&#x27; is illegal (should be checked using &#x27;is_illegal_va&#x27;).</span></span><br><span class="line"><span class="comment"> *   Return the original error: underlying calls fail (you can use &#x27;try&#x27; macro).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Hint:</span></span><br><span class="line"><span class="comment"> *   You may want to use the following functions:</span></span><br><span class="line"><span class="comment"> *   &#x27;envid2env&#x27;, &#x27;page_alloc&#x27;, &#x27;page_insert&#x27;, &#x27;try&#x27; (macro)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_mem_alloc</span><span class="params">(u_int envid, u_int va, u_int perm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">env</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">pp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Check if &#x27;va&#x27; is a legal user virtual address using &#x27;is_illegal_va&#x27;. */</span></span><br><span class="line">    <span class="keyword">if</span> (is_illegal_va(va))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 2: Convert the envid to its corresponding &#x27;struct Env *&#x27;</span></span><br><span class="line"><span class="comment">       using &#x27;envid2env&#x27;. */</span></span><br><span class="line">    <span class="comment">/* Hint: **Always** validate the permission in syscalls! */</span></span><br><span class="line">    try(envid2env(envid, &amp;env, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Allocate a physical page using &#x27;page_alloc&#x27;. */</span></span><br><span class="line">    try(page_alloc(&amp;pp));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 4: Map the allocated page at &#x27;va&#x27; with permission &#x27;perm&#x27; using &#x27;page_insert&#x27;. */</span></span><br><span class="line">    <span class="keyword">return</span> page_insert(env-&gt;env_pgdir, env-&gt;env_asid, pp, va, perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may be curious about <code>is_illegal_va</code>, it just check if <code>va</code> is within user’s space or not.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">is_illegal_va</span><span class="params">(u_long va)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> va &lt; UTEMP || va &gt;= UTOP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><blockquote><p><strong>Breaking News!</strong> Understanding of how <code>page_insert</code> works. Basically, it just fill the address field of the page table entry for <code>va</code> with the physical page number of the page. Thus we can use the physical memory though this <code>va</code>. It can be divided into two steps.</p><ol><li>First, it ensures page table entry for <code>va</code> exists. If such entry exists, but not mapped to the given page, it will remove the page. If mapped to, it will flush TLB and reset permission. If doesn’t exist, it will create one.</li><li>Then, it fills the page table entry with the physical address of the page.</li></ol><p><strong>Important!</strong> When we talk about mapping or un-mapping a page to virtual memory, we simply fill or clear the page table entry of the given virtual memory.</p><p><strong>Again!</strong> <code>page_insert</code> <strong>does not</strong> create new page! It only add the physical address of the given page to a specific page table entry. The same as <code>page_remove</code>.</p><p>For a more detailed understanding of virtual memory and page table entry, you can refer to my previous post here: <a href="/posts/Page-Directory-Self-Mapping/">Page Directory Self Mapping</a>.</p></blockquote><h3 id="sys-mem-map"><a href="#sys-mem-map" class="headerlink" title="sys_mem_map"></a><code>sys_mem_map</code></h3><p>This is a tricky function. What it does is mapping the physical memory, that mapped to source Env with id <code>srcid</code> at virtual address <code>srcva</code> to the destination Env with id <code>dstid</code> at virtual address <code>dstva</code>. That is to say, make these two Env share a same page.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_mem_map</span><span class="params">(u_int srcid, u_int srcva, u_int dstid, u_int dstva, u_int perm)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>sys_mem_map</summary><div class="toggle-content"><p>Here is the realization of it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Find the physical page mapped at &#x27;srcva&#x27; in the address space of env &#x27;srcid&#x27;,</span></span><br><span class="line"><span class="comment"> * and map &#x27;dstid&#x27;&#x27;s &#x27;dstva&#x27; to it with &#x27;perm&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Return 0 on success.</span></span><br><span class="line"><span class="comment"> *   Return -E_BAD_ENV: &#x27;checkperm&#x27; of &#x27;envid2env&#x27; fails for &#x27;srcid&#x27; or &#x27;dstid&#x27;.</span></span><br><span class="line"><span class="comment"> *   Return -E_INVAL: &#x27;srcva&#x27; or &#x27;dstva&#x27; is illegal, or &#x27;srcva&#x27; is unmapped in &#x27;srcid&#x27;.</span></span><br><span class="line"><span class="comment"> *   Return the original error: underlying calls fail.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Hint:</span></span><br><span class="line"><span class="comment"> *   You may want to use the following functions:</span></span><br><span class="line"><span class="comment"> *   &#x27;envid2env&#x27;, &#x27;page_lookup&#x27;, &#x27;page_insert&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_mem_map</span><span class="params">(u_int srcid, u_int srcva, u_int dstid, u_int dstva, u_int perm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Step 1: Check if &#x27;srcva&#x27; and &#x27;dstva&#x27; are legal user virtual addresses using</span></span><br><span class="line"><span class="comment">     * &#x27;is_illegal_va&#x27;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (is_illegal_va(srcva) || is_illegal_va(dstva))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">srcenv</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">dstenv</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Step 2: Convert the &#x27;srcid&#x27; to its corresponding &#x27;struct Env *&#x27; using &#x27;envid2env&#x27;. */</span></span><br><span class="line">    try(envid2env(srcid, &amp;srcenv, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Convert the &#x27;dstid&#x27; to its corresponding &#x27;struct Env *&#x27; using &#x27;envid2env&#x27;. */</span></span><br><span class="line">    try(envid2env(dstid, &amp;dstenv, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 4: Find the physical page mapped at &#x27;srcva&#x27; in the address space of &#x27;srcid&#x27;. */</span></span><br><span class="line">    <span class="comment">/* Return -E_INVAL if &#x27;srcva&#x27; is not mapped. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">pp</span> =</span> page_lookup(srcenv-&gt;env_pgdir, srcva, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pp)</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 5: Map the physical page at &#x27;dstva&#x27; in the address space of &#x27;dstid&#x27;. */</span></span><br><span class="line">    <span class="keyword">return</span> page_insert(dstenv-&gt;env_pgdir, dstenv-&gt;env_asid, pp, dstva, perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="sys-mem-unmap"><a href="#sys-mem-unmap" class="headerlink" title="sys_mem_unmap"></a><code>sys_mem_unmap</code></h3><p>Well, <code>sys_mem_unmap</code> is similar to its map brother. Just un-map the physical address of given virtual memory, making it no longer valid to access.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_mem_unmap</span><span class="params">(u_int envid, u_int va)</span>;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>sys_mem_unmap</summary><div class="toggle-content"><p>Just, quite simple.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Unmap the physical page mapped at &#x27;va&#x27; in the address space of &#x27;envid&#x27;.</span></span><br><span class="line"><span class="comment"> *   If no physical page is mapped there, this function silently succeeds.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Return 0 on success.</span></span><br><span class="line"><span class="comment"> *   Return -E_BAD_ENV: &#x27;checkperm&#x27; of &#x27;envid2env&#x27; fails for &#x27;envid&#x27;.</span></span><br><span class="line"><span class="comment"> *   Return -E_INVAL:   &#x27;va&#x27; is illegal.</span></span><br><span class="line"><span class="comment"> *   Return the original error when underlying calls fail.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_mem_unmap</span><span class="params">(u_int envid, u_int va)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Check if &#x27;va&#x27; is a legal user virtual address using &#x27;is_illegal_va&#x27;. */</span></span><br><span class="line">    <span class="keyword">if</span> (is_illegal_va(va))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 2: Convert the envid to its corresponding &#x27;struct Env *&#x27; using &#x27;envid2env&#x27;. */</span></span><br><span class="line">    try(envid2env(envid, &amp;e, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Unmap the physical page at &#x27;va&#x27; in the address space of &#x27;envid&#x27;. */</span></span><br><span class="line">    page_remove(e-&gt;env_pgdir, e-&gt;env_asid, va);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a>Schedule</h2><p>Schedule is also an important part of OS. And yield is to give up possession of CPU, due to inability to continue, or some other reasons. It is simple, just make kernel schedule again is OK.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Give up remaining CPU time slice for &#x27;curenv&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Another env is scheduled.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Hint:</span></span><br><span class="line"><span class="comment"> *   This function will never return.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> __attribute__((<span class="keyword">noreturn</span>)) sys_yield(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Hint: Just use &#x27;schedule&#x27; with &#x27;yield&#x27; set.</span></span><br><span class="line">    schedule(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Notice that it will not return, since <code>schedule</code> is a no-return.</p></blockquote><hr><h1 id="Inter-Process-Communication"><a href="#Inter-Process-Communication" class="headerlink" title="Inter-Process Communication"></a>Inter-Process Communication</h1><p>Well, IPC, huh? The fundamental support of IPC lies within Env, so let’s have a look.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// ... other members</span></span><br><span class="line">    u_int env_ipc_value;   <span class="comment">// data value sent to us</span></span><br><span class="line">    u_int env_ipc_from;    <span class="comment">// envid of the sender</span></span><br><span class="line">    u_int env_ipc_recving; <span class="comment">// env receiving status (block 0 or accept 1)</span></span><br><span class="line">    u_int env_ipc_dstva;   <span class="comment">// va at which to map received page</span></span><br><span class="line">    u_int env_ipc_perm;    <span class="comment">// perm of page mapping received</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>As receiver, we can decide whether to receive message or not. e.g. We can set <code>Env::env_ipc_receiving</code> to 1, which indicate that we are receiving message, or 0 to block any message, and make sender’s sending request fail. Plus, we need <code>Env::env_ipc_from</code> to know the source of the message.</p><p>If we only send a value, we only need <code>Env::env_ipc_value</code>, and set <code>Env::env_ipc_dstva</code> to 0. Otherwise, a valid virtual address is required.</p><p>As sender, we can set the receiver’s <code>Env::env_ipc_value</code> and <code>Env::env_ipc_from</code>, and, if there is, map message page to <code>Env::env_ipc_dstva</code>.</p><p>Now, let’s see some core functions of IPC.</p><h2 id="sys-ipc-recv"><a href="#sys-ipc-recv" class="headerlink" title="sys_ipc_recv"></a><code>sys_ipc_recv</code></h2><p>This system call make current process starts to receive a message. Such action will block current process from continue, until it receives the desired message. Here is its declaration.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_ipc_recv</span><span class="params">(u_int dstva)</span>;</span><br></pre></td></tr></table></figure><p>The caller of this system call is current process. If we only want to receive a value, we simply set <code>dstva</code> to 0. Otherwise, we should set it to our desired virtual address. Then, since the process will be blocked, we’ll set its status to <code>ENV_NOT_RUNNABLE</code> and remove it from <code>env_sched_list</code>. At last, we should set the default return value 0 to <code>$v0</code>.</p><details class="toggle"><summary class="toggle-button" style>sys_ipc_recv</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Wait for a message (a value, together with a page if &#x27;dstva&#x27; is not 0) from</span></span><br><span class="line"><span class="comment"> *   other envs.</span></span><br><span class="line"><span class="comment"> *   &#x27;curenv&#x27; is blocked until a message is sent.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Return 0 on success.</span></span><br><span class="line"><span class="comment"> *   Return -E_INVAL: &#x27;dstva&#x27; is neither 0 nor a legal address.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_ipc_recv</span><span class="params">(u_int dstva)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Step 1: Check if &#x27;dstva&#x27; is either zero or a legal address. */</span></span><br><span class="line">    <span class="keyword">if</span> ((dstva != <span class="number">0</span>) &amp;&amp; is_illegal_va(dstva))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 2: Set &#x27;curenv-&gt;env_ipc_recving&#x27; to 1. */</span></span><br><span class="line">    curenv-&gt;env_ipc_recving = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Set the value of &#x27;curenv-&gt;env_ipc_dstva&#x27;. */</span></span><br><span class="line">    curenv-&gt;env_ipc_dstva = dstva;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Step 4: Set the status of &#x27;curenv&#x27; to &#x27;ENV_NOT_RUNNABLE&#x27; and remove it from</span></span><br><span class="line"><span class="comment">     * &#x27;env_sched_list&#x27;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    curenv-&gt;env_status = ENV_NOT_RUNNABLE;</span><br><span class="line">    TAILQ_REMOVE(&amp;env_sched_list, curenv, env_sched_link);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 5: Give up the CPU and block until a message is received. */</span></span><br><span class="line">    ((<span class="keyword">struct</span> Trapframe*)KSTACKTOP - <span class="number">1</span>)-&gt;regs[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    schedule(<span class="number">1</span>);  <span class="comment">// with yeild set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="sys-ipc-try-send"><a href="#sys-ipc-try-send" class="headerlink" title="sys_ipc_try_send"></a><code>sys_ipc_try_send</code></h2><p>He’s waiting for us! Let’s send him a message! It is quite straightforward, with all parameters receiver need. Notice that here we use ‘try’ send, because we may fail to send due to target process is not receiving or other errors.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_ipc_try_send</span><span class="params">(u_int envid, u_int value, u_int srcva, u_int perm)</span>;</span><br></pre></td></tr></table></figure><p>Since the receiver was suspended because of waiting for message, we need to wake him up after we send the message. If we also send a page, we should map our page to <code>Env::env_ipc_dstva</code> of our receiver using <code>page_insert</code>. And set its <code>Env::env_ipc_recving</code> 0 to mark completion.</p><blockquote><p>The same with <code>page_insert</code>, we only link sender’s page to receiver’s page table entry. Only.</p></blockquote><p>One more thing, in this system call, we <strong>do not</strong> restrict permission in <code>envid2env</code>, since message can be exchanged between processes with no relations.</p><details class="toggle"><summary class="toggle-button" style>sys_ipc_try_send</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Try to send a &#x27;value&#x27; (together with a page if &#x27;srcva&#x27; is not 0) to the target</span></span><br><span class="line"><span class="comment"> * env &#x27;envid&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Return 0 on success, and the target env is updated as follows:</span></span><br><span class="line"><span class="comment"> *   - &#x27;env_ipc_recving&#x27; is set to 0 to block future sends.</span></span><br><span class="line"><span class="comment"> *   - &#x27;env_ipc_from&#x27; is set to the sender&#x27;s envid.</span></span><br><span class="line"><span class="comment"> *   - &#x27;env_ipc_value&#x27; is set to the &#x27;value&#x27;.</span></span><br><span class="line"><span class="comment"> *   - &#x27;env_status&#x27; is set to &#x27;ENV_RUNNABLE&#x27; again to recover from &#x27;ipc_recv&#x27;.</span></span><br><span class="line"><span class="comment"> *   - if &#x27;srcva&#x27; is not NULL, map &#x27;env_ipc_dstva&#x27; to the same page mapped at &#x27;srcva&#x27; in &#x27;curenv&#x27;</span></span><br><span class="line"><span class="comment"> *     with &#x27;perm&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Return -E_IPC_NOT_RECV if the target has not been waiting for an IPC message with</span></span><br><span class="line"><span class="comment"> *   &#x27;sys_ipc_recv&#x27;.</span></span><br><span class="line"><span class="comment"> *   Return the original error when underlying calls fail.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_ipc_try_send</span><span class="params">(u_int envid, u_int value, u_int srcva, u_int perm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">p</span>;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* Step 1: Check if &#x27;srcva&#x27; is either zero or a legal address. */</span></span><br><span class="line">    <span class="keyword">if</span> ((srcva != <span class="number">0</span>) &amp;&amp; is_illegal_va(srcva))</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Step 2: Convert &#x27;envid&#x27; to &#x27;struct Env *e&#x27;. */</span></span><br><span class="line">    <span class="comment">/* This is the only syscall where the &#x27;envid2env&#x27; should be used with &#x27;checkperm&#x27; UNSET,</span></span><br><span class="line"><span class="comment">     * because the target env is not restricted to &#x27;curenv&#x27;&#x27;s children. */</span></span><br><span class="line">    try(envid2env(envid, &amp;e, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Check if the target is waiting for a message. */</span></span><br><span class="line">    <span class="keyword">if</span> (!e-&gt;env_ipc_recving)</span><br><span class="line">        <span class="keyword">return</span> -E_IPC_NOT_RECV;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 4: Set the target&#x27;s ipc fields. */</span></span><br><span class="line">    e-&gt;env_ipc_value = value;</span><br><span class="line">    e-&gt;env_ipc_from = curenv-&gt;env_id;</span><br><span class="line">    e-&gt;env_ipc_perm = PTE_V | perm;</span><br><span class="line">    e-&gt;env_ipc_recving = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 5: Set the target&#x27;s status to &#x27;ENV_RUNNABLE&#x27; again and insert it to</span></span><br><span class="line"><span class="comment">     * the tail of &#x27;env_sched_list&#x27;. */</span></span><br><span class="line">    e-&gt;env_status = ENV_RUNNABLE;</span><br><span class="line">    TAILQ_INSERT_TAIL(&amp;env_sched_list, e, env_sched_link);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 6: If &#x27;srcva&#x27; is not zero, map the page at &#x27;srcva&#x27; in &#x27;curenv&#x27; to</span></span><br><span class="line"><span class="comment">     * &#x27;e-&gt;env_ipc_dstva&#x27; in &#x27;e&#x27;. */</span></span><br><span class="line">    <span class="comment">/* Return -E_INVAL if &#x27;srcva&#x27; is not zero and not mapped in &#x27;curenv&#x27;. */</span></span><br><span class="line">    <span class="keyword">if</span> (srcva != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = page_lookup(curenv-&gt;env_pgdir, srcva, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (!p)</span><br><span class="line">            <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Though we didn&#x27;t check if receiver accepts page or not, we can still </span></span><br><span class="line"><span class="comment">         * check it indirectly by `page_insert` since this functino will return </span></span><br><span class="line"><span class="comment">         * error in that case.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        try(page_insert(e-&gt;env_pgdir, e-&gt;env_asid, p, e-&gt;env_ipc_dstva, perm));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You may wonder, what if receiver’s <code>Env::env_ipc_dstva</code> is 0, and it is a valid virtual address? Haha, don’t worry, you can check <code>include/mmu.h</code>, address from <code>0x0</code> to <code>UTEMP</code>, which is larger than one page, is invalid memory. :P</p></div></details><hr><h1 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h1><p>As we know before, fork is a useful function to duplicate process. It is fascinating, as we’ve been curious about its realization long before when we first encountered it here <a href="/posts/Process/">Process</a>. You could use this as application of fork first.</p><p>In this part, I’d like to demonstrate stuffs from top to bottom. :)</p><h2 id="Fork-in-Kernel-Space"><a href="#Fork-in-Kernel-Space" class="headerlink" title="Fork in Kernel Space"></a>Fork in Kernel Space</h2><p>Well, fork is actually a lib function in user space, and the core of it is a system call named <code>syscall_exofork</code>, which eventually calls <code>sys_exofork</code>, and this system call explains how we get a new process out of nowhere. Now, let’s have a look of it. It’s surprisingly not that long, but each line has its meaning.</p><p>First, it’s declaration. Err… really simple.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_exofork</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><p>First, we really create a PCB (Env) from nowhere.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Step 1: Allocate a new env using &#x27;env_alloc&#x27;. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line">try(env_alloc(&amp;e, curenv-&gt;env_id));</span><br></pre></td></tr></table></figure><p>Then, the most important step, we copy current PCB’s Trapframe to it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Step 2: Copy the current Trapframe below &#x27;KSTACKTOP&#x27; to the new env&#x27;s &#x27;env_tf&#x27;. */</span></span><br><span class="line">e-&gt;env_tf = *((<span class="keyword">struct</span> Trapframe*)KSTACKTOP - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Important!</strong> By copying current Trapframe, we copy the break point of current process to its child, which <strong>makes it resume at the same point</strong> with its parent! Notice that, Trapframe is set at once when process makes the system call, and the system call dispatcher will increase CP0.epc by 4 bytes before entering the handler, which make it jump over <code>syscall</code>. Then, we enter the real hander and do the fork. So, anything we do in system call <strong>does not affect the break point</strong> (mainly focus on PC), and child process will <strong>not</strong> execute system call again!</p></blockquote><p>Here, why we don’t just copy <code>curenv-&gt;env_tf</code> to it?  This is a little complicated, you can expand it optionally.</p><details class="toggle"><summary class="toggle-button" style>which one to copy</summary><div class="toggle-content"><p>Go carefully about the source code, and you’ll find that, for system calls that don’t make schedule, we only use <code>KSTACKTOP - TF_SIZE</code> to <code>KSTACK_TOP</code> to save and restore process break point. <code>Env::env_tf</code> is only used when schedule happens, to store process status and use it to restore that memory block next time it runs. So <code>Env::env_tf</code> is usually out of date.</p><p>As a further explanation, system call use <code>ret_from_exception</code> to restore registers with <code>KSTACK_TOP - TF_SIZE</code> to <code>KSTACK_TOP</code>, which also resets PC so it will go directly to the user process. This is what most system calls do at last. However, for system calls that involves schedule, be fore <code>ret_from_exception</code>, it will use <code>env_pop_tf</code> to restore <code>KSTACK_TOP - TF_SIZE</code> with <code>Env::env_tf</code> first, and then call <code>ret_from_exception</code> to jump to the new process.</p></div></details><p>To distinguish between parent and child, we set child process’s return value to 0.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Step 3: Set the new env&#x27;s &#x27;env_tf.regs[2]&#x27; to 0 to indicate the return value in child. */</span></span><br><span class="line">e-&gt;env_tf.regs[<span class="number">2</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Notice that, parent process hasn’t got its return value yet.</p></blockquote><p>At last, since child process is not ready to run (no memory allocated), we temporarily set its status to <code>ENV_NOT_RUNNABLE</code>, and priority the same as its parent.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Step 4: Set up the new env&#x27;s &#x27;env_status&#x27; and &#x27;env_pri&#x27;.  */</span></span><br><span class="line">e-&gt;env_status = ENV_NOT_RUNNABLE;</span><br><span class="line">e-&gt;env_pri = curenv-&gt;env_pri;</span><br></pre></td></tr></table></figure><p>As all these things are executed in parent process, though in kernel, the return value will also be returned to parent process directly. So here we just return child process’ <code>Env::env_id</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> e-&gt;env_id;</span><br></pre></td></tr></table></figure><blockquote><p>So what’s the difference between the return value of parent and child? Well, parent process is a complete process then, yet child process only has a PCB. So child could not receive return value from function, so we have to ‘make’ its return value from nowhere.</p></blockquote><p>A complete view of this function.</p><details class="toggle"><summary class="toggle-button" style>sys_exofork</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_exofork</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line">    try(env_alloc(&amp;e, curenv-&gt;env_id));</span><br><span class="line"></span><br><span class="line">    e-&gt;env_tf = *((<span class="keyword">struct</span> Trapframe*)KSTACKTOP - <span class="number">1</span>);</span><br><span class="line">    e-&gt;env_tf.regs[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    e-&gt;env_status = ENV_NOT_RUNNABLE;</span><br><span class="line">    e-&gt;env_pri = curenv-&gt;env_pri;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e-&gt;env_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>It doesn’t do much. Yeah, I though it does everything. But it does not, other stuffs are done in user space.</p><h2 id="Fork-in-User-Space"><a href="#Fork-in-User-Space" class="headerlink" title="Fork in User Space"></a>Fork in User Space</h2><p>You can find user space fork in <code>user/include/lib.h</code> and <code>user/lib/fork.c</code>. But hold your horse, please. There are some basic concepts to understand before we meet fork.</p><h3 id="Copy-on-Write"><a href="#Copy-on-Write" class="headerlink" title="Copy on Write"></a>Copy on Write</h3><p>To reduce physical memory use, when we fork a child, we first make child share parent’s physical pages. If both parent and child do not write them, then we can save much memory. However, if one of them write one of the pages, it will invoke a TLB mod exception, which will then duplicate the page.</p><p>To mark such pages, we use <code>PTE_COW</code>. <code>PTE_COW</code> and <code>PTE_D</code> (write) is mutual exclusive. That is to say, such page can’t be written before copy.</p><p>However, though it is a kernel exception, the actual work is done by a user space function, which is stored in <code>Env::env_user_tlb_mod_entry</code>, and this entry is set to a user space handler <code>cow_entry</code>. <strong>This is a little tricky</strong>, and I’ll elaborate on it later, real soon.</p><p>What this entry does is just make a copy of the page, and jump back to the instruction that cause this exception.</p><details class="toggle"><summary class="toggle-button" style>cow_entry</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Map the faulting page to a private writable copy.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Pre-Condition:</span></span><br><span class="line"><span class="comment"> * &#x27;va&#x27; is the address which led to the TLB Mod exception.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *  - Launch a &#x27;user_panic&#x27; if &#x27;va&#x27; is not a copy-on-write page.</span></span><br><span class="line"><span class="comment"> *  - Otherwise, this handler should map a private writable copy of</span></span><br><span class="line"><span class="comment"> *    the faulting page at the same address.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((<span class="keyword">noreturn</span>)) cow_entry(<span class="keyword">struct</span> Trapframe* tf)</span><br><span class="line">&#123;</span><br><span class="line">u_int va = tf-&gt;cp0_badvaddr;</span><br><span class="line">u_int perm;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Step 1: Find the &#x27;perm&#x27; in which the faulting address &#x27;va&#x27; is mapped. */</span></span><br><span class="line"><span class="comment">/* Hint: Use &#x27;vpt&#x27; and &#x27;VPN&#x27; to find the page table entry. If the &#x27;perm&#x27;</span></span><br><span class="line"><span class="comment"> * doesn&#x27;t have &#x27;PTE_COW&#x27;, launch a &#x27;user_panic&#x27;. */</span></span><br><span class="line">perm = PTE_PERM(vpt[VPN(va)]);</span><br><span class="line">panic_on(!(perm &amp; PTE_COW));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Step 2: Remove &#x27;PTE_COW&#x27; from the &#x27;perm&#x27;, and add &#x27;PTE_D&#x27; to it. */</span></span><br><span class="line">perm = PTE_CLR(perm, PTE_COW);</span><br><span class="line">perm = PTE_SET(perm, PTE_D);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Step 3: Allocate a new page at &#x27;UCOW&#x27;. */</span></span><br><span class="line">syscall_mem_alloc(<span class="number">0</span>, (<span class="type">void</span>*)UCOW, perm);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Step 4: Copy the content of the faulting page at &#x27;va&#x27; to &#x27;UCOW&#x27;. */</span></span><br><span class="line"><span class="comment">/* Hint: &#x27;va&#x27; may not be aligned to a page! */</span></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span>*)UCOW, (<span class="type">void</span>*)ROUNDDOWN(va, BY2PG), BY2PG);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 5: Map the page at &#x27;UCOW&#x27; to &#x27;va&#x27; with the new &#x27;perm&#x27;.</span></span><br><span class="line">syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span>*)UCOW, <span class="number">0</span>, (<span class="type">void</span>*)ROUNDDOWN(va, BY2PG), perm);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 6: Unmap the page at &#x27;UCOW&#x27;.</span></span><br><span class="line">syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span>*)UCOW);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 7: Return to the faulting routine.</span></span><br><span class="line"><span class="type">int</span> r = syscall_set_trapframe(<span class="number">0</span>, tf);</span><br><span class="line">user_panic(<span class="string">&quot;syscall_set_trapframe returned %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>If you are confused about the jump between these functions, you can expand the following block.</p><details class="toggle"><summary class="toggle-button" style>tlb_mod_exception</summary><div class="toggle-content"><p>First, we have to review <code>do_tlb_mod</code>. When a TLB mod exception happens, we’ll first jump here.</p><details class="toggle"><summary class="toggle-button" style>do_tlb_mod</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_tlb_mod</span><span class="params">(<span class="keyword">struct</span> Trapframe* tf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Trapframe</span> <span class="title">tmp_tf</span> =</span> *tf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Set $sp to user exception stack top. Since the whole trapframe will</span></span><br><span class="line"><span class="comment">     * be restored to what it was on exception, we can change it here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (tf-&gt;regs[<span class="number">29</span>] &lt; USTACKTOP || tf-&gt;regs[<span class="number">29</span>] &gt;= UXSTACKTOP)</span><br><span class="line">        tf-&gt;regs[<span class="number">29</span>] = UXSTACKTOP;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Save current Trapframe to user exception stack. Since we have altered</span></span><br><span class="line"><span class="comment">     * base address of the stack, the user process won&#x27;t feel the difference.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    tf-&gt;regs[<span class="number">29</span>] -= <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Trapframe);</span><br><span class="line">    *(<span class="keyword">struct</span> Trapframe*)tf-&gt;regs[<span class="number">29</span>] = tmp_tf;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// User must have such handler.</span></span><br><span class="line">    <span class="keyword">if</span> (curenv-&gt;env_user_tlb_mod_entry)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Set parameter ($a0) of the following function call, this is the</span></span><br><span class="line"><span class="comment">         * parameter in env_user_tlb_mod_entry function, which is set to</span></span><br><span class="line"><span class="comment">         * cow_entry!</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        tf-&gt;regs[<span class="number">4</span>] = tf-&gt;regs[<span class="number">29</span>];           <span class="comment">// $a0 = &amp;temp_tf !</span></span><br><span class="line">        tf-&gt;regs[<span class="number">29</span>] -= <span class="keyword">sizeof</span>(tf-&gt;regs[<span class="number">4</span>]);  <span class="comment">// push $a0 to stack as param.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Make uesr process execute its TLB mod handler next, instead of</span></span><br><span class="line"><span class="comment">         * the normal order.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        tf-&gt;cp0_epc = curenv-&gt;env_user_tlb_mod_entry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        panic(<span class="string">&quot;TLB Mod but no user handler registered&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * So, you can see that, this kernel exception handler does nothing,</span></span><br><span class="line"><span class="comment">     * but changes user process&#x27; execution order only.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>After this, user process will continue to execute <code>cow_entry</code> after getting out of kernel. Notice that, user process still uses exception stack in <code>cow_entry</code> in order not to crash previous stack.</p><p>You may wonder, how do we get back to the right track? The answer is the parameter we passed to <code>env_user_tlb_mod_entry</code>. We stored the previous trapframe in exception stack to preserve it, and then from <code>cow_entry</code>, we can see that it uses this trapframe to jump back to where the exception happens! Brilliant!</p><blockquote><p>This is just like <code>setjmp()</code> and <code>longjmp</code> in C. :)</p></blockquote></div></details><h3 id="Duplicate-Pages"><a href="#Duplicate-Pages" class="headerlink" title="Duplicate Pages"></a>Duplicate Pages</h3><p>To achieve COW, we first need to make child process share those pages, and this is done by duplicating the link to them. And this is done by <code>duppage</code>. This function is relatively simple.</p><details class="toggle"><summary class="toggle-button" style>duppage</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">duppage</span><span class="params">(u_int envid, u_int vpn)</span></span><br><span class="line">&#123;</span><br><span class="line">    u_int addr;</span><br><span class="line">    u_int perm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Get the permission of the page. */</span></span><br><span class="line">    <span class="comment">/* Hint: Use &#x27;vpt&#x27; to find the page table entry. */</span></span><br><span class="line">    addr = vpn &lt;&lt; PGSHIFT;</span><br><span class="line">    perm = PTE_PERM(vpt[vpn]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Step 2: If the page is writable, and not shared with children, and not</span></span><br><span class="line"><span class="comment">     * marked as COW yet, then map it as copy-on-write, both in the parent (0)</span></span><br><span class="line"><span class="comment">     * and the child (envid).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> remap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((perm &amp; PTE_D) &amp;&amp; !(perm &amp; PTE_LIBRARY))</span><br><span class="line">    &#123;</span><br><span class="line">        perm = PTE_CLR(perm, PTE_D);</span><br><span class="line">        perm = PTE_SET(perm, PTE_COW);</span><br><span class="line">        remap = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    syscall_mem_map(<span class="number">0</span>, addr, envid, addr, perm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (remap)</span><br><span class="line">        syscall_mem_map(<span class="number">0</span>, addr, <span class="number">0</span>, addr, perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><blockquote><p>Don’t be afraid of accessing virtual memory, they will be intercepted by MMU at last and translated to physical memory.</p></blockquote><p>One problem, why map child before remap to parent?</p><blockquote><p>Because, once we remap to parent, the pages will become read only, but we still need to write pages because of function calling stack!</p></blockquote><h3 id="Fork-1"><a href="#Fork-1" class="headerlink" title="Fork"></a>Fork</h3><p>Finally, we could have a glance at fork in user space. Now, it should be easy to understand. Just about to exit fork, we should set child process’ TLB mod entry. And as we have prepared everything for it, we can set it status to RUNNABLE.</p><p>Notice that, for child process, we have to set its <code>env</code> manually, since <code>env</code> is set at the start of a process to the Env it corresponds to, but child process doesn’t start normally, which makes that the same as its parent.</p><details class="toggle"><summary class="toggle-button" style>fork</summary><div class="toggle-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">env</span>;</span></span><br><span class="line">    </span><br><span class="line">    u_int child;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 1: Set our TLB Mod user exception entry to &#x27;cow_entry&#x27; if not done yet. */</span></span><br><span class="line">    <span class="keyword">if</span> (env-&gt;env_user_tlb_mod_entry != (u_int)cow_entry)</span><br><span class="line">        try(syscall_set_tlb_mod_entry(<span class="number">0</span>, cow_entry));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Step 2: Create a child env that&#x27;s not ready to be scheduled. */</span></span><br><span class="line">    <span class="comment">// Hint: &#x27;env&#x27; should always point to the current env itself, so we should fix</span></span><br><span class="line">    <span class="comment">// it to the correct value.</span></span><br><span class="line">    child = syscall_exofork();</span><br><span class="line">    <span class="keyword">if</span> (child == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        env = envs + ENVX(syscall_getenvid());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 3: Map all mapped pages below &#x27;USTACKTOP&#x27; into the child&#x27;s address space. */</span></span><br><span class="line">    <span class="comment">// Hint: You should use &#x27;duppage&#x27;.</span></span><br><span class="line">    <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; USTACKTOP; i += BY2PG)</span><br><span class="line">    &#123;</span><br><span class="line">        u_int _vpn = VPN(i);</span><br><span class="line">        u_int _vpd = VPD(i);</span><br><span class="line">        <span class="keyword">if</span> ((vpd[_vpd] &amp; PTE_V) &amp;&amp; (vpt[_vpn] &amp; PTE_V))</span><br><span class="line">            duppage(child, _vpn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Step 4: Set up the child&#x27;s tlb mod handler and set child&#x27;s &#x27;env_status&#x27; to</span></span><br><span class="line"><span class="comment">     * &#x27;ENV_RUNNABLE&#x27;. */</span></span><br><span class="line">    <span class="comment">/* Hint:</span></span><br><span class="line"><span class="comment">     *   You may use &#x27;syscall_set_tlb_mod_entry&#x27; and &#x27;syscall_set_env_status&#x27;</span></span><br><span class="line"><span class="comment">     *   Child&#x27;s TLB Mod user exception entry should handle COW, so set it to &#x27;cow_entry&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    try(syscall_set_tlb_mod_entry(child, cow_entry));</span><br><span class="line">    try(syscall_set_env_status(child, ENV_RUNNABLE));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><hr><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h1><p>Well, I guess, this is it… Too many words. :(</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lab 2 Extra Reflection</title>
      <link href="/posts/Lab-2-Extra-Reflection/"/>
      <url>/posts/Lab-2-Extra-Reflection/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-OS-2023-Spring"><a href="#BUAA-OS-2023-Spring" class="headerlink" title="BUAA OS 2023 Spring"></a>BUAA OS 2023 Spring</h1><hr><p>Due to misunderstanding of some concepts and the meaning of some functions, I failed on lab 2 extra. So much thanks to the TA who helped me understand these stuffs. Thus, a reflection here, I have.</p><p>To be honest, the problem is not that difficult, but if you’re not clear with related concepts, you may get into much trouble. So, here I just want to demonstrate some key points of it.</p><p>Here is the original problem description, you can expand it optionally.</p><details class="toggle"><summary class="toggle-button" style>Problem</summary><div class="toggle-content"><p><img src="/posts/Lab-2-Extra-Reflection/image-20230406202127222.png" alt="image-20230406202127222"></p></div></details><hr><blockquote><p>To get a better understanding of this article, you can refer to my previous post here:</p><ul><li><a href="/posts/Page-Directory-Self-Mapping/">Page Directory Self Mapping</a></li></ul></blockquote><h2 id="Traverse-Page-Table-Entries"><a href="#Traverse-Page-Table-Entries" class="headerlink" title="Traverse Page Table Entries"></a>Traverse Page Table Entries</h2><p>In this problem, to swap in or out a page need a complete traverse of the page table of current process. But why? Why not just a single page? Well, you know, multiple virtual page could be mapped to the same physical address, so we have to make sure all these pages are correctly marked. Therefore, a complete traverse is needed.</p><p>Then, you may ask again, there are so many page table entries, won’t it take too long? Emm… some page directories are not valid, so the page table entries will be skipped.</p><p>So, how do we traverse page table entries?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Traverse page table entries.</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> PAGE_ENTRY_CNT = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> pdx = <span class="number">0</span>; pdx &lt; PAGE_ENTRY_CNT; pdx++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(pgdir[pdx] &amp; PTE_V))<span class="comment">// skip invalid page directory entry</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The address of page table should be kernel address for os access,</span></span><br><span class="line">    <span class="comment">// but the content of page table entry is physical address.</span></span><br><span class="line">    Pte* pgtbl = (Pte*)KADDR(PTE_ADDR(pgdir[pdx]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> ptx = <span class="number">0</span>; ptx &lt; PAGE_ENTRY_CNT; ptx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(pgtbl[ptx] &amp; PTE_V))</span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        <span class="comment">// operations on valid page table entry</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flush-TLB"><a href="#Flush-TLB" class="headerlink" title="Flush TLB"></a>Flush TLB</h2><p>Another point that is difficult to understand is the action to clear old TLB entry. The structure of TLB entry is as follows.</p><img src="/posts/Lab-2-Extra-Reflection/image-20230406204026763.png" alt="image-20230406204026763" style="zoom: 67%;"><p>VPN is virtual page number, if we takes it out and make low 12 bits zero, it will be the start virtual address of a virtual page. The same goes with PFN, which is Page Frame number, a.k.a. Physical Page number (PPN).</p><p>To invalidate a page directory entry, we actually flush the VPN it mapped to. Yeah, the VPN it mapped to, but how to get it? In <code>pgdir_walk()</code> function, we create or get a page table entry of the given <code>va</code>, which is exactly what we want here. So, again, what does <code>pgdir_walk()</code> really mean?</p><h3 id="pgdir-walk"><a href="#pgdir-walk" class="headerlink" title="pgdir_walk()"></a><code>pgdir_walk()</code></h3><p><del>I found that I didn’t understand this function before.</del> Here is the definition of this tricky function.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Overview:</span></span><br><span class="line"><span class="comment"> *   Given &#x27;pgdir&#x27;, a pointer to a page directory, &#x27;pgdir_walk&#x27; returns a pointer</span></span><br><span class="line"><span class="comment"> *   to the page table entry (with permission PTE_D|PTE_V) for virtual address &#x27;va&#x27;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Pre-Condition:</span></span><br><span class="line"><span class="comment"> *   &#x27;pgdir&#x27; is a two-level page table structure.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   If we&#x27;re out of memory, return -E_NO_MEM.</span></span><br><span class="line"><span class="comment"> *   Otherwise, we get the page table entry, store the value of page table entry</span></span><br><span class="line"><span class="comment"> *   to *ppte, and return 0, indicating success.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">pgdir_walk</span><span class="params">(Pde* pgdir, u_long va, <span class="type">int</span> create, Pte** ppte)</span>;</span><br></pre></td></tr></table></figure><p>Depending on the value of <code>create</code>, we can get the page table entry mapped to virtual address <code>va</code>, or create the missing page table. (Since we use two-level page table, where the second level won’t be created until needed.) And what we used here is the so called VPN, which could be further explained as PDX and PTX. Again, here is a picture of it. </p><img src="/posts/Lab-2-Extra-Reflection/image-20230406205510542.png" alt="image-20230406205510542" style="zoom:67%;"><p>Get it? Are we getting it? (By Steve Jobs on iPhone’s release conference.)</p><p>The <code>va</code> here is exactly what we use later in <code>tlb_invalidate()</code>. What? You still don’t know what <code>va</code> is? Just take some time to read the previous post <a href="/posts/Page-Directory-Self-Mapping/">Page Directory Self Mapping</a>.</p><p>So the purpose of <code>pgdir_walk()</code> is just to get the corresponding page table entry of the virtual address <code>va</code>, or create it if not allocated before.</p><h3 id="tlb-invalidate"><a href="#tlb-invalidate" class="headerlink" title="tlb_invalidate()"></a><code>tlb_invalidate()</code></h3><p>Here is the definition of related functions. Now you should know what’s the correct <code>va</code> to pass.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Invalidate the TLB entry with specified &#x27;asid&#x27; and virtual address &#x27;va&#x27;.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tlb_invalidate</span><span class="params">(u_int asid, u_long va)</span></span><br><span class="line">&#123;</span><br><span class="line">    tlb_out(PTE_ADDR(va) | (asid &lt;&lt; <span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flush the TLB entry with EntryHi Register set to &#x27;entryhi&#x27;.</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">tlb_out</span><span class="params">(u_int entryhi)</span>;</span><br></pre></td></tr></table></figure><p>In <code>tlb_invalidate()</code>, we called <code>tlb_out()</code> function, which is written in MIPS. To access TLB in MIPS, we use <code>EntryHi</code> and <code>EntryLo</code> registers. <code>EntryHi</code> as key and <code>EntryLo</code> as value. So, here, to flush the entry, we need the key to specify which entry to flush, and the key is what we call <code>entryhi</code>. As a parameter and the first parameter, it will be passed as <code>$a0</code> in MIPS.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">LEAF(tlb_out)</span><br><span class="line">.set noreorder</span><br><span class="line">    mfc0    t0, CP0_ENTRYHI  # Store previous value for context restore.</span><br><span class="line">    mtc0    a0, CP0_ENTRYHI  # Make CP0.EntryHi the parameter we passed.</span><br><span class="line">    </span><br><span class="line">    # Get corresponding value of CP0.EntryHi and store it to CP0.Index register.</span><br><span class="line">    # nop has to be added for pipline execution reason.</span><br><span class="line">    nop</span><br><span class="line">    tlbp</span><br><span class="line">    nop</span><br><span class="line">    </span><br><span class="line">    # Get the result of tlbp from CP0.Index</span><br><span class="line">    mfc0    t1, CP0_INDEX</span><br><span class="line">    </span><br><span class="line">.set reorder</span><br><span class="line">    # If no such entry, highest bit of Index will be set to 1, which</span><br><span class="line">    # makes it a negative value, and then skip flush operation.</span><br><span class="line">    bltz    t1, NO_SUCH_ENTRY  # bltz: branch (if) less than zero</span><br><span class="line"></span><br><span class="line">.set noreorder</span><br><span class="line">    # Clear TLB entry by setting key and value to zero.</span><br><span class="line">    # Here, CP0.EntryHi and CP0.EntryLo0 are just a step stone for us</span><br><span class="line">    # to operate TLB, they will be used later in tlbwi</span><br><span class="line">    mtc0    zero, CP0_ENTRYHI</span><br><span class="line">    mtc0    zero, CP0_ENTRYLO0  # MIPS 3000 only has CP0.EntryLo0.</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    # Write CP0.EntryLo0 and CP0.EntryLo1 to TLB</span><br><span class="line">    tlbwi</span><br><span class="line"></span><br><span class="line">.set reorder</span><br><span class="line"></span><br><span class="line"># These instructions will be executed whether there is such an entry or not.</span><br><span class="line">NO_SUCH_ENTRY:</span><br><span class="line">    mtc0    t0, CP0_ENTRYHI  # Restore old value.</span><br><span class="line">    j       ra</span><br><span class="line">END(tlb_out)</span><br></pre></td></tr></table></figure><blockquote><p>“The even page entries in the TLB (such as PFN0) come from <code>CP0.EntryLo0</code>. Similarly, odd page entries come from <code>CP0.EntryLo1</code>.” From <em>MD00090-2B-MIPS32PRA-AFP-06.02</em>, Page 32.</p><p>However, we use MIPS 3000, which doesn’t have such feature. It only has <code>CP0.EntryLo0</code>.</p></blockquote><p>Here are some explanation to TLB related instructions.</p><blockquote><p><code>tlbr</code> (read): Using the value in <code>CP0.Index</code> to read the corresponding entry to <code>CP0.EntryHi</code> and <code>CP0.EntryLo</code>.</p><p><code>tlbwi</code> (write): Using the value in <code>CP0.Index</code> to write the value of <code>CP0.EntryHi</code> and <code>CP0.EntryLo</code> to corresponding TLB entry.</p><p><code>tlbwr</code> (write random): Write <code>CP0.EntryHi</code> and <code>CP0.EntryLo</code> to a random TLB entry. Here, a register with random value is used, which is in fact a counter.</p><p><code>tlbp</code> (probe): Using the value in <code>CP0.EntryHi</code> as key (including VPN and ASID) to find corresponding entry in TLB. If there is such an entry, the index of it will be stored at <code>CP0.Index</code>. Other wise, the highest bit of <code>CP0.Index</code> will be set to 1 to make it a negative number, indicating a failure.</p></blockquote><p>So, let get back to the problem one last time. Now, everything is clear. We traverse the page table entries, and get the legal ones. Then, do the … things.</p><p>As we know, “Talk is cheap, show me the code.” So, just show the code. ;)</p><details class="toggle"><summary class="toggle-button" style>Code</summary><div class="toggle-content"><p>To make it shorter, I removed some blank lines. We’re really sorry about this. :(</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Swap out</button><button type="button" class="tab">Swap in</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface for &#x27;Passive Swap Out&#x27;</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ensure_free_page</span><span class="params">(Pde* pgdir, u_int asid)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Select a page to swap out to disk.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">pp</span> =</span> pa2page(SWAP_PAGE_BASE);</span><br><span class="line">    <span class="comment">// Allocate swap page on disk.</span></span><br><span class="line">    u_char* da = disk_alloc();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pdx = <span class="number">0</span>; pdx &lt; PAGE_ENTRY_CNT; pdx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(pgdir[pdx] &amp; PTE_V))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        Pte* pgtbl = (Pte*)KADDR(PTE_ADDR(pgdir[pdx]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> ptx = <span class="number">0</span>; ptx &lt; PAGE_ENTRY_CNT; ptx++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(pgtbl[ptx] &amp; PTE_V))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (PPN(pgtbl[ptx]) == page2ppn(pp))</span><br><span class="line">            &#123;</span><br><span class="line">                u_long va = (pdx &lt;&lt; PDSHIFT) | (ptx &lt;&lt; PGSHIFT);</span><br><span class="line">                u_long perm = PTE_PERM(pgtbl[ptx]);</span><br><span class="line">                perm = PTE_CLR(perm, PTE_V);</span><br><span class="line">                perm = PTE_SET(perm, PTE_SWP);</span><br><span class="line">                pgtbl[ptx] = PTE_ADDR(da) | perm;</span><br><span class="line">                <span class="comment">// Now you should know what &#x27;va&#x27; means. :P</span></span><br><span class="line">                tlb_invalidate(asid, va);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(da, (<span class="type">void</span>*)page2kva(pp), BY2PG);</span><br><span class="line">    LIST_INSERT_HEAD(&amp;page_free_swappable_list, pp, pp_link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Page* <span class="title function_">swap_alloc</span><span class="params">(Pde* pgdir, u_int asid)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Must ensure there is page to swap.</span></span><br><span class="line">    <span class="keyword">if</span> (LIST_EMPTY(&amp;page_free_swappable_list))</span><br><span class="line">       ensure_free_page(pgdir, asid);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">pp</span> =</span> LIST_FIRST(&amp;page_free_swappable_list);</span><br><span class="line">    LIST_REMOVE(pp, pp_link);</span><br><span class="line">    <span class="built_in">memset</span>((<span class="type">void</span>*)page2kva(pp), <span class="number">0</span>, BY2PG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interfaces for &#x27;Active Swap In&#x27;</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">is_swapped</span><span class="params">(Pde* pgdir, u_long va)</span></span><br><span class="line">&#123;</span><br><span class="line">    Pte* pte;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Not page_lookup() here, since the page we look for might be</span></span><br><span class="line"><span class="comment">     * swapped out with PTE_V set to zero. This will be regarded as</span></span><br><span class="line"><span class="comment">     * error by page_lookup(), which will then make pte NULL, causing</span></span><br><span class="line"><span class="comment">     * the final return to be false, rather than true.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    pgdir_walk(pgdir, va, <span class="number">0</span>, &amp;pte);</span><br><span class="line">    <span class="keyword">return</span> pte &amp;&amp; (*pte &amp; PTE_SWP) &amp;&amp; !(*pte &amp; PTE_V);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">swap</span><span class="params">(Pde* pgdir, u_int asid, u_long va)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// va may not be aligned by page, but this doesn&#x27;t affect this lab.</span></span><br><span class="line">    va = ROUNDDOWN(va, BY2PG);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Page</span>* <span class="title">pp</span> =</span> swap_alloc(pgdir, asid);</span><br><span class="line">    Pte* pte;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Find the pte corresponding to given va.</span></span><br><span class="line"><span class="comment">     * Notice that, this va is one of the pte that mapped to the swapped out</span></span><br><span class="line"><span class="comment">     * page, while all pte(s) that mapped to the swapped page contains the</span></span><br><span class="line"><span class="comment">     * da we want.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    pgdir_walk(pgdir, va, &amp;pte);</span><br><span class="line">    assert(pte);</span><br><span class="line"></span><br><span class="line">    u_char* da = (u_char*)PTE_ADDR(*pte);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)page2kva(pp), da, BY2PG);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> pdx = <span class="number">0</span>; pdx &lt; PAGE_ENTRY_CNT; pdx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(pgdir[pdx] &amp; PTE_V))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        Pte* pgtbl = (Pte*)KADDR(PTE_ADDR(pgdir[pdx]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> ptx = <span class="number">0</span>; ptx &lt; PAGE_ENTRY_CNT; ptx++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!((pgtbl[ptx] &amp; PTE_SWP) &amp;&amp; !(pgtbl[ptx] &amp; PTE_V)))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (PPN(pgtbl[ptx]) == PPN(da))</span><br><span class="line">            &#123;</span><br><span class="line">                u_long vaddr = (pdx &lt;&lt; PDSHIFT) | (ptx &lt;&lt; PGSHIFT);</span><br><span class="line">                u_long perm = PTE_PERM(pgtbl[ptx]);</span><br><span class="line">                perm = PTE_SET(perm, PTE_V);</span><br><span class="line">                perm = PTE_CLR(perm, PTE_SWP);</span><br><span class="line">                pgtbl[ptx] = page2pa(pp) | perm;</span><br><span class="line">                tlb_invalidate(asid, vaddr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    disk_free(da);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pte <span class="title function_">swap_lookup</span><span class="params">(Pde* pgdir, u_int asid, u_long va)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// If corresponding page is swapped out, swap it in</span></span><br><span class="line">    <span class="keyword">if</span> (is_swapped(pgdir, va))</span><br><span class="line">    swap(pgdir, asid, va);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Look up page table element.</span></span><br><span class="line">    <span class="comment">// Here, the pte to va is sure to exist</span></span><br><span class="line">    Pte* ppte;</span><br><span class="line">    page_lookup(pgdir, va, &amp;ppte);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ppte == <span class="literal">NULL</span> ? <span class="number">0</span> : *ppte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></details>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Page Directory Self Mapping</title>
      <link href="/posts/Page-Directory-Self-Mapping/"/>
      <url>/posts/Page-Directory-Self-Mapping/</url>
      
        <content type="html"><![CDATA[<h1 id="BUAA-OS-2023-Spring"><a href="#BUAA-OS-2023-Spring" class="headerlink" title="BUAA OS 2023 Spring"></a>BUAA OS 2023 Spring</h1><hr><p>We use mutiple levels of pages to manage virtual memory, but how does it work?</p><h2 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h2><p>Before we start, there are some concepts that we should be aware of:</p><ul><li>In 32 bit operating system, virtual memory is $4GB$ ($2^{32}$B).</li><li>Usually, page size is 4KB, so it require $4G \div 4K &#x3D; 1M$ page table entry, one page table entry is $4B$, so one process need $4MB$ space to store page table. Therefore, the virtual memory is aligned in $4M$ to make mapping esier.</li><li>The space of page table is mapped to $4G$ virtual memory together with the program. Since $4M$ page table describes all $4GB$ virtual memory, there is one special page that will be mapped to the $4M$ virtual memory that stores page table, which is the so-called page directory.</li><li>For 2-level page table, the 1 level is called page directory. One page directory covers $1K$ page table, while $1K$ page table covers $1K \times 4KB &#x3D; 4MB$ virtual memory. So there are $1K$ page directory, which precisely occupy one page.</li></ul><h2 id="Page-Table-in-Virtual-Memory"><a href="#Page-Table-in-Virtual-Memory" class="headerlink" title="Page Table in Virtual Memory"></a>Page Table in Virtual Memory</h2><p>Here is a really good figure to show the mapping mechanism.</p><img src="/posts/Page-Directory-Self-Mapping/Self Mapping.svg" alt="Self Mapping" style="zoom:80%;"><blockquote><p>Notice that, page directory and page table all comes from the red $4M$ space in virtual memory.</p><p>Be careful about the mapping relationship.</p></blockquote><h3 id="Page-Table-Base"><a href="#Page-Table-Base" class="headerlink" title="Page Table Base"></a>Page Table Base</h3><p>$PT_{base}$ is assigned by OS, and is fixed. The $4M$ space after it is the page table.</p><h3 id="Page-Directory-Base"><a href="#Page-Directory-Base" class="headerlink" title="Page Directory Base"></a>Page Directory Base</h3><p>$PD_{base}$ is mapped to $PT_{base}$, the $4K$ space after it is the page directory, which covers the $4M$ page table in virtual memory.</p><p>To calculate $PD_{base}$, we just need the offset of it from $PT_{base}$. There are two ways to understand this.</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">From Page Table</button><button type="button" class="tab">From Page Directory</button></div><div class="tab-contents"><div class="tab-item-content active"><p>One page table entry ($4B$) covers $4K$ virtual memory, so we just need to find how many $4K$ are there before $PT_{base}$.<br>$$<br>PD_{offset} &#x3D; (PT_{base} &gt;&gt; 12) &lt;&lt; 2<br>$$<br>$$<br>PD_{base} &#x3D; PT_{base} + PD_{offset} &#x3D; PT_{base} + (PT_{base} &gt;&gt; 10)<br>$$</p></div><div class="tab-item-content"><p>One page directory covers $4M$ virtual memory, and since virtual memory is aligned with $4M$, it is easy to get how many page directories are there before $PT_{base}$. The number of PD is just the number of $4K$ in $PD_{offset}$.<br>$$<br>PD_{count} &#x3D; PT_{base} &gt;&gt; 22<br>$$<br>$$<br>PD_{offset} &#x3D; PD_{count} &lt;&lt; 12<br>$$</p><p>$$<br>PD_{base} &#x3D; PT_{base} + PD_{offset} &#x3D; PT_{base} + (PT_{base} &gt;&gt; 10)<br>$$</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="Page-Directory-Self-Mapping"><a href="#Page-Directory-Self-Mapping" class="headerlink" title="Page Directory Self Mapping"></a>Page Directory Self Mapping</h3><p>Similar to $PD_{base}$ in page table, which is mapped to $PT_{base}$, there is an entry called $PDE_{self-mapping}$ in page directory which is mapped to $PD_{base}$.</p><p>So, with similar idea, we want to find the offset from $PD_{base}$ to $PDE_{self-mapping}$. Through carefully ovservation, we can find that the number of $PDE$ before $PDE_{self-mapping}$ is the number of $4K$ in page table before $PD_{base}$. Furthermore, the number of $4K$ in page table before $PD_{base}$ is exactly the number of $4M$ in virtual memory before $PT_{base}$! What an amazing coincidence! (I guess this is the benefit of $4MB$ alignment.)</p><p>So the solution is easy.<br>$$<br>PDE_{count} &#x3D; PT_{base} &gt;&gt; 22<br>$$</p><p>$$<br>PDE_{self-mapping} &#x3D; PD_{base} + (PDE_{count} &lt;&lt; 2) &#x3D; PD_{base} + (PT_{base} &gt;&gt; 20)<br>$$</p><p>We can substitute $PD_{base}$ here.<br>$$<br>PDE_{self-mapping} &#x3D; PT_{base} + (PT_{base} &gt;&gt; 10) + (PT_{base} &gt;&gt; 20)<br>$$</p><hr><h2 id="Page-Table-in-Physical-Memory"><a href="#Page-Table-in-Physical-Memory" class="headerlink" title="Page Table in Physical Memory"></a>Page Table in Physical Memory</h2><p>Above is how page table is represented in virtual memory as virtual address. Program, or more directly, CPU send instructions with <strong>virtual address</strong>, which is then intercepted by MMU. MMU will interpret this address to PDX, PTX and VPO (equals to PPO), and use CR3 register, which stores the <strong>physical address of page directory</strong>, to find the corresponding <strong>physical address</strong>.</p><p>So, how could this be done?</p><blockquote><p>Before we start, there’s one thing to get through, and it is the key to the following stuffs.</p><p>We use virtual address to find the page table entry, but the content of the page table entry is actually physical address! All jumps from page table entry to page table entry or physical page is through physical address!</p></blockquote><p>To access memory through virtual address, we have to use page table to translate it to physical address. To achieve this,  we need two parameters: <strong>CR3</strong> and <strong>virtual address</strong>.</p><p>CR3 is the register in MMU, which stores the physical address of the page directory of the current process. It is known as <code>Env::env_pgdir</code> in MOS.</p><p>Virtual address is what the CPU sends to MMU, which is in the format of <code>PDX | PTX | VPO</code>.</p><p>Having these in mind, we could draw a simple figure to show how virtual address is translated to be used in page table. Page table entry stores the physical page number of the page it mapped to in the high 20 bits, and permission bits in the low 12 bits.</p><img src="/posts/Page-Directory-Self-Mapping/Page Table-Page-1.svg" alt="Page Table-Page-1" style="zoom:80%;"><p>Now, let’s have a look at how we access the physical address via virtual address. Here’s another figure to elaborate this process.</p><img src="/posts/Page-Directory-Self-Mapping/Page Table-Page-2.svg" alt="Page Table-Page-2" style="zoom:80%;"><p><strong>Step 1)</strong> As mentioned before, we need CR3 (a.k.a. <code>Env::env_pgdir</code>) and virtual address. CR3 stores the physical address of page directory, which is the value of <code>Pde* Env::env_pgdir</code> (just the value of the pointer, not the content it points to, it is the beginning of page directory entry array). And we can easily get PDX, PTX and PPO (equals to VPO) from virtual address.</p><p><strong>Step 2)</strong> Use PDX as offset from <code>Env::env_pgdir</code> to get the page directory entry we want. Usually, we first check the permission bit <code>PTE_V</code> to ensure the page is valid, and some other bits like <code>PTE_D</code> to determine whether it is writable. Then, we can get the corresponding physical address of the second-level page table using <code>PTE_ADDR()</code> macro.</p><p><strong>Step 3)</strong> Since page table and page directory are the same at the very essence, the process of getting the physical address of the page frame is of no difference.</p><blockquote><p>If we want to use self mapping, we just need to get the self-mapping page directory entry in page directory, and the <code>PTE_ADDR()</code> of this entry is always set to the physical address of page directory, which is <code>Env::env_pgdir</code>. </p><p>What? How to get this page directory entry? Check out the previous section, as we already know $PD_{base}$, which is the <code>Env::env_pgdir</code>, we only need the corresponding <code>PDX</code>. And it is easy to get.<br>$$<br>PDX_{self-mapping} &#x3D; PDX(PT_{base})<br>$$</p></blockquote><p>So, here is a piece of code regarding this process.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">u_long pdx = PDX(va);  <span class="comment">// #define PDX(va) ((((u_long)(va)) &gt;&gt; 22) &amp; 0x03FF)</span></span><br><span class="line">u_long ptx = PTX(va);  <span class="comment">// #define PTX(va) ((((u_long)(va)) &gt;&gt; 12) &amp; 0x03FF)</span></span><br><span class="line">u_long ppo = PPO(va);  <span class="comment">// #define PPO(va) (((u_long)(va)) &amp; 0xFFF)</span></span><br><span class="line"><span class="keyword">if</span> (pgdir[pdx] &amp; PTEV)</span><br><span class="line">&#123;</span><br><span class="line">    Pte* pgtbl = KADDR(PTE_ADDR(pgdir[pdx]));</span><br><span class="line">    <span class="keyword">if</span> (pgtbl[ptx] &amp; PTE_V)</span><br><span class="line">    &#123;</span><br><span class="line">        u_long pa = PTE_ADDR(pgtbl[ptx]) | ppo;</span><br><span class="line">        <span class="comment">// some other actions...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Why <code>KADDR()</code>? Because page operation is done by our kernel in <code>kuseg0</code>, and this macro simply adds an offset to the address to make it a <code>kuseg0</code> address. A further reason is that when <code>kuseg0</code> address intercepted by MMU, it will not go through TLB, but go directly to the physical address with the offset erased. So we just add <code>KADDR()</code> for page table access. Later, physical page won’t need this.</p></blockquote><hr><p>Well, I guess this is it. Just keep in mind that page table is a mediator to translate virtual address into physical address.</p>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> BUAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uninstall JetBrains Products</title>
      <link href="/posts/Uninstall-JetBrains-Products/"/>
      <url>/posts/Uninstall-JetBrains-Products/</url>
      
        <content type="html"><![CDATA[<h1 id="Uninstall-JetBrains-Products"><a href="#Uninstall-JetBrains-Products" class="headerlink" title="Uninstall JetBrains Products"></a>Uninstall JetBrains Products</h1><hr><p>JetBrains makes good IDEs, but… sometimes they could be a problem.</p><p>You may encounter this error during uninstalling after some major updates.</p><p><img src="/posts/Uninstall-JetBrains-Products/image-20230318173515490.png" alt="image-20230318173515490"></p><p>This is so annoying!!! And in this article, we are going to solve this problem. Fortunately, the solution is not complex.</p><hr><p>The root of the problem is that the corresponding JetBrains product got major updates, which makes the uninstall program not compatible any more.</p><p>To update the uninstaller, go to JetBrains official site, download and install the latest version of your IDE at somewhere else. Of course, the local IDE should be updated to the latest, too. Then, go to bin folder and find the latest uninstallation program, then copy it, and override the old one.</p><img src="/posts/Uninstall-JetBrains-Products/image-20230318173643864.png" alt="image-20230318173643864" style="zoom:50%;"><p>After you replace the uninstaller, you can then uninstall it properly.</p><hr><p>This is it, so unfriendly, huh? That’s why I use Visual Studio, the ultimate IDE in the universe!</p>]]></content>
      
      
      <categories>
          
          <category> Operating Systems &amp; Tools </category>
          
          <category> IDE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tutorial </tag>
            
            <tag> Troubleshoot </tag>
            
            <tag> JetBrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy and Connect MySQL Server</title>
      <link href="/posts/Deploy-And-Connect-MySQL-Server/"/>
      <url>/posts/Deploy-And-Connect-MySQL-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploy-And-Connect-MySQL-Server"><a href="#Deploy-And-Connect-MySQL-Server" class="headerlink" title="Deploy And Connect MySQL Server"></a>Deploy And Connect MySQL Server</h1><hr><p>In this article, I’ll talk about how to deploy MySQL service on a remote Windows server, and then how to connect it locally via Navicat.</p><h2 id="Step-1-Download-MySQL"><a href="#Step-1-Download-MySQL" class="headerlink" title="Step.1 Download MySQL"></a>Step.1 Download MySQL</h2><p>You can download MySQL community server installer here. Web installer is not recommended since the remote server has relatively low performance.</p><blockquote><p><a href="https://dev.mysql.com/downloads/installer/">https://dev.mysql.com/downloads/installer/</a></p></blockquote><img src="/posts/Deploy-And-Connect-MySQL-Server/image-20230311132223231.png" alt="image-20230311132223231" style="zoom:50%;"><p>After you downloaded it, just copy it to the remote server.</p><h2 id="Step-2-Install-MySQL-Server"><a href="#Step-2-Install-MySQL-Server" class="headerlink" title="Step.2 Install MySQL Server"></a>Step.2 Install MySQL Server</h2><p>Now, in your Windows server, launch MySQL installer.</p><blockquote><p>Notice that it may take quite a long time due to the low performance of the remote server. So, just be patient.</p></blockquote><p>Below are some important steps during installation.</p><p><strong>Choosing a Setup Type</strong><br>In this step, select custom, since we only need a minimum part of it.</p><p><strong>Select Products</strong><br>The remote server only stores the database, so here we can choose only the MySQL server.</p><img src="/posts/Deploy-And-Connect-MySQL-Server/image-20230311133022001.png" alt="image-20230311133022001" style="zoom:50%;"><blockquote><p>I’ve already installed it, so they turned grey. :P Just select the latest one, and click the right arrow to add it to products to be installed. Then, click next to continue.</p></blockquote><p><strong>Product Configuration</strong></p><p>In the Type and Networking panel, you can optionally change the type from Development Computer to Server, since it is really installed on a server computer.</p><p>Then, you can just follow the default configuration to the end.</p><blockquote><p>Just make sure you remember the root password!</p></blockquote><h2 id="Step-3-Configure-MySQL"><a href="#Step-3-Configure-MySQL" class="headerlink" title="Step.3 Configure MySQL"></a>Step.3 Configure MySQL</h2><p>First, we need to add it to the system path.</p><p>By default, MySQL is installed at <code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code>. Just add this path to the system <code>Path</code> variable.</p><p>Then, we need configure MySQL server to make it accessible at out local machine. Open <code>cmd</code> on the server, and execute the following commands.</p><blockquote><p>Reference: <a href="https://developer.aliyun.com/article/801237">https://developer.aliyun.com/article/801237</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;mysql -u root -p</span><br><span class="line">Enter password: ********</span><br><span class="line"><span class="comment"># Some more output...</span></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">Query OK, 1 rows affected (0.12 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> User,authentication_string,Host from user;</span><br><span class="line">+-------------+----------------------------------------------------+-----------+</span><br><span class="line">| User        | authentication_string                              | Host      |</span><br><span class="line">+-------------+----------------------------------------------------+-----------+</span><br><span class="line">| root        | $A<span class="variable">$OIJijOuj</span>]5l\%NKRAgdjEedPQZKJ5ZglgTB.OzviB/jR4f4 | %         |</span><br><span class="line">+-------------+----------------------------------------------------+-----------+</span><br><span class="line">+ ....        | ......                                             | ......    |</span><br><span class="line">+-------------+----------------------------------------------------+-----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>You are all done if <code>Host</code> of <code>root</code> is set to <code>%</code>.</p><h2 id="Step-4-Update-Firewall"><a href="#Step-4-Update-Firewall" class="headerlink" title="Step.4 Update Firewall"></a>Step.4 Update Firewall</h2><p>Remember to open port 3306 (default port of MySQL) of your remote server.</p><h2 id="Step-5-Connect-MySQL"><a href="#Step-5-Connect-MySQL" class="headerlink" title="Step.5 Connect MySQL"></a>Step.5 Connect MySQL</h2><p>In Navicat, create a new MySQL connection. Then, in the configuration panel, enter the host name of your remote server and the root password.</p><img src="/posts/Deploy-And-Connect-MySQL-Server/image-20230311135419391.png" alt="image-20230311135419391" style="zoom:50%;"><p>Tada! You successfully connected to your MySQL server! Congratulations!</p><hr><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><h3 id="Why-MySQL-service-could-not-be-started"><a href="#Why-MySQL-service-could-not-be-started" class="headerlink" title="Why MySQL service could not be started?"></a>Why MySQL service could not be started?</h3><p>I don’t know either… MySQL service will automatically start after installation, but if you shut it down, it might not start again properly… :(</p><p>So, you can choose to uninstall and then reinstall the server in the MySQL installer. (You can choose not to uninstall the installer.)</p>]]></content>
      
      
      <categories>
          
          <category> DevOps &amp; Deployment </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deployment </tag>
            
            <tag> Database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database Data Model</title>
      <link href="/posts/Database-Data-Model/"/>
      <url>/posts/Database-Data-Model/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>Database</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2023</p><hr><h1 id="Chapter-Two-Data-Model"><a href="#Chapter-Two-Data-Model" class="headerlink" title="Chapter Two - Data Model"></a>Chapter Two - Data Model</h1><blockquote><p> Generally, there are three types of data models:</p><ul><li>Concept Data Model</li><li>Logical Data Model</li><li>Physical Data Model</li></ul></blockquote><h2 id="2-1-Concept-Data-Model"><a href="#2-1-Concept-Data-Model" class="headerlink" title="2.1 Concept Data Model"></a>2.1 Concept Data Model</h2><h3 id="2-1-1-Entity-Relationship-Data-Model"><a href="#2-1-1-Entity-Relationship-Data-Model" class="headerlink" title="2.1.1 Entity-Relationship Data Model"></a>2.1.1 Entity-Relationship Data Model</h3><p>This is the most common one. Here are some examples.</p><p><strong>Sales System</strong></p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Stage 1</button><button type="button" class="tab">Stage 2</button><button type="button" class="tab">Stage 3</button><button type="button" class="tab">Stage 4</button><button type="button" class="tab">Stage 5</button></div><div class="tab-contents"><div class="tab-item-content active"><p>现开发一套销售管理系统，需保存交易记录信息，包括销售人员身份证号、顾客身份证号、售卖货品名称、数量、单价。请绘制数据库建模的ER图。</p><p><img src="/posts/Database-Data-Model/PPT-Page-1.svg" alt="PPT-Page-1"></p></div><div class="tab-item-content"><p>现开发一套销售管理系统，需保存进销存信息，包括：</p><ol><li>货品清单，包括货品编号、货品名称、单价、库存数量；</li><li>交易记录，包括销售人员身份证号、顾客身份证号、售卖货品编号。请绘制数据库建模的ER图。</li></ol><p><img src="/posts/Database-Data-Model/PPT-Page-2.svg" alt="PPT-Page-2"></p></div><div class="tab-item-content"><p>现开发一套销售管理系统，需保存进销存信息，包括：</p><ol><li>货品清单，包括货品编号、货品名称、单价、库存数量；</li><li>人员信息，包括人员身份证号，姓名，性别；</li><li>交易记录，包括销售人员身份证号、顾客身份证号、售卖货品编号。请绘制数据库建模的ER图。</li></ol><p><img src="/posts/Database-Data-Model/PPT-Page-3.svg" alt="PPT-Page-3"></p></div><div class="tab-item-content"><p>现开发一套销售管理系统，需保存进销存信息，包括：</p><ol><li>货品清单，包括货品编号、货品名称、单价、库存数量；</li><li>销售人员信息，包括人员身份证号，姓名，性别，职级，薪水；</li><li>顾客信息，包括身份证号，姓名，会员卡号，生日；</li><li>交易记录，包括销售人员身份证号、顾客身份证号、售卖货品编号。</li></ol><p><img src="/posts/Database-Data-Model/PPT-Page-4.svg" alt="PPT-Page-4"></p></div><div class="tab-item-content"><p>进一步的，若要记录的是口罩销售，每人限定只能买一次，怎样建模？</p><p><img src="/posts/Database-Data-Model/PPT-Page-5.svg" alt="PPT-Page-5"></p><p>这里三个基数比约束均为 1，否则一个顾客可以从多个销售人员处买到口罩。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p><strong>School</strong></p><blockquote><p> <strong>学校</strong>中有若干<strong>系</strong>，每个系有若干<strong>班级</strong>和<strong>教研室</strong>，每个教研室有若干<strong>教员</strong>，其中有的教授和副教授每人各带若干研究生，每个班有若干学生，每个学生选修若干<strong>课程</strong>，每门课可由若干学生选修。请用 E-R 图画出此学校的概念模型</p><p><img src="/posts/Database-Data-Model/School.svg" alt="School"></p></blockquote><p><strong>Factory</strong></p><blockquote><p>某<strong>工厂</strong>生产若干产品，每种产品由不同的<strong>零件</strong>组成，有的零件可用在不同的产品上。这些零件由不同的<strong>原材料</strong>制成，不同零件所用的材料可以相同。这些零件按所属的不同产品分别放在<strong>仓库</strong>中,原材料按照类别放在若干仓库中。请用 E-R 图画出此工厂产品、零件、材料、仓库的概念模型。</p><p><img src="/posts/Database-Data-Model/Factory.svg" alt="Factory"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUAA </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database Overview</title>
      <link href="/posts/Database-Overview/"/>
      <url>/posts/Database-Overview/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>Database</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2023</p><hr><h1 id="Chapter-One-Database-Overview"><a href="#Chapter-One-Database-Overview" class="headerlink" title="Chapter One - Database Overview"></a>Chapter One - Database Overview</h1><h2 id="1-1-Concepts-Overview"><a href="#1-1-Concepts-Overview" class="headerlink" title="1.1 Concepts Overview"></a>1.1 Concepts Overview</h2><h3 id="1-1-1-Basic-Terms"><a href="#1-1-1-Basic-Terms" class="headerlink" title="1.1.1 Basic Terms"></a>1.1.1 Basic Terms</h3><blockquote><p><strong>Information</strong> -&gt; <strong>Data</strong> -&gt; <strong>Database</strong> -&gt; <strong>Database Management System</strong> -&gt; <strong>Database System</strong></p></blockquote><h3 id="1-1-2-Data"><a href="#1-1-2-Data" class="headerlink" title="1.1.2 Data"></a>1.1.2 Data</h3><blockquote><p>数据是对事物进行定性或定量描述的值，将客观事物转化为可以鉴别的符号使其得以被记录。是数据库中存储的基本对象。</p></blockquote><h3 id="1-1-2-Database"><a href="#1-1-2-Database" class="headerlink" title="1.1.2 Database"></a>1.1.2 Database</h3><blockquote><p>Narrow Definition: <strong>Efficient</strong>, <strong>convenient</strong>, and <strong>safe multi-user</strong> “<strong>storage</strong>“ of <strong>massive</strong> amounts of well organized <strong>persistent data</strong>.</p><p>特点：永久储存、有组织、可共享。</p></blockquote><h3 id="1-1-3-Database-Management-System-DBMS"><a href="#1-1-3-Database-Management-System-DBMS" class="headerlink" title="1.1.3 Database Management System (DBMS)"></a>1.1.3 Database Management System (DBMS)</h3><blockquote><p>管理数据库的软件系统。</p><img src="/posts/Database-Overview/image-20230225103337873.png" alt="image-20230225103337873" style="zoom:50%;"></blockquote><h4 id="1-1-3-1-主要功能"><a href="#1-1-3-1-主要功能" class="headerlink" title="1.1.3.1 主要功能"></a>1.1.3.1 主要功能</h4><blockquote><ul><li>数据库定义</li><li>数据库的建立和维护</li><li>数据库的是与管理和运行管理</li><li>数据组织、存储和管理</li><li>数据操纵、控制功能（详见 1.1.3.2）</li><li>其他，如不同数据库之间的互访问和互操作</li></ul></blockquote><h4 id="1-1-3-2-数据控制功能"><a href="#1-1-3-2-数据控制功能" class="headerlink" title="1.1.3.2 数据控制功能"></a>1.1.3.2 数据控制功能</h4><blockquote><ul><li>数据库的安全性保护</li><li>数据库的完整性检查</li><li>并发控制</li><li>数据库恢复</li></ul></blockquote><h3 id="1-1-4-Database-System"><a href="#1-1-4-Database-System" class="headerlink" title="1.1.4 Database System"></a>1.1.4 Database System</h3><blockquote><p>基于数据库建立的一种信息系统。</p><p>通常由<strong>应用程序</strong>、<strong>数据库</strong>、<strong>数据库管理系统</strong>和<strong>用户</strong>组成。</p><img src="/posts/Database-Overview/image-20230225103507250.png" alt="image-20230225103507250" style="zoom:50%;"><p>特点：</p><blockquote><ul><li>数据结构化</li><li>数据独立性高</li><li>高共享，低冗余，易扩充</li><li>数据由 DBMS 统一管理和控制</li></ul></blockquote></blockquote><h2 id="1-2-数据库结构"><a href="#1-2-数据库结构" class="headerlink" title="1.2 数据库结构"></a>1.2 数据库结构</h2><h3 id="1-2-1-数据库基本结构"><a href="#1-2-1-数据库基本结构" class="headerlink" title="1.2.1 数据库基本结构"></a>1.2.1 数据库基本结构</h3><blockquote><ul><li>用户角度：模式结构</li><li>系统角度：功能结构</li><li>数据库体系结构</li></ul></blockquote><h3 id="1-2-2-模式结构"><a href="#1-2-2-模式结构" class="headerlink" title="1.2.2 模式结构"></a>1.2.2 模式结构</h3><h4 id="1-2-2-1-Concept"><a href="#1-2-2-1-Concept" class="headerlink" title="1.2.2.1 Concept"></a>1.2.2.1 Concept</h4><blockquote><ul><li>模式（Schema）<ul><li>数据库逻辑结构和特征的描述</li><li>反应数据的结构及其联系，于数据库创建时建立</li><li>相对稳定</li></ul></li><li>实例（Instance）<ul><li>模式的具体值</li><li>反应数据库某一时刻的状态</li><li>随数据更新而变动。</li></ul></li></ul><table><thead><tr><th align="center">Schema</th><th align="center">Name</th><th align="center">Sex</th><th align="center">Age</th></tr></thead><tbody><tr><td align="center"><strong>Instance</strong></td><td align="center">Alpha</td><td align="center">Male</td><td align="center">66</td></tr><tr><td align="center"><strong>Instance</strong></td><td align="center">Omega</td><td align="center">Female</td><td align="center">18</td></tr><tr><td align="center"><strong>…</strong></td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr></tbody></table></blockquote><h4 id="1-2-2-2-三级模式结构"><a href="#1-2-2-2-三级模式结构" class="headerlink" title="1.2.2.2 三级模式结构"></a>1.2.2.2 三级模式结构</h4><blockquote><img src="/posts/Database-Overview/image-20230225122241631.png" alt="image-20230225122241631" style="zoom:50%;"><p><img src="/posts/Database-Overview/image-20230225122953459.png" alt="image-20230225122953459"></p><ul><li><p>外模式 - 用户层：</p><blockquote><p>a.k.a. 子模式、用户模式</p><ul><li><p>数据库用户（包括程序员和最终用户）使用的<strong>局部</strong>数据的逻辑结构和特征描述。</p></li><li><p>多个外模式对应一个内模式，外模式通常为模式的子集。</p></li><li><p>对模式中同一数据，在外模式中的结构、类型、长度、保密级别等都可以不同。</p></li><li><p>保证数据库安全性和数据独立的措施，用户只能看见和访问对应外模式中的数据。</p></li></ul></blockquote></li><li><p>模式（概念模式）- 逻辑层：</p><blockquote><ul><li><p>数据库中全体数据的逻辑结构和特征的描述，所有用户的公共数据视图，综合了所有用户的需求。</p></li><li><p>一个数据库只有一个模式。</p></li><li><p>是数据库系统模式的中间层，与存储硬件环境、具体应用程序及高级程序设计语言无关。</p></li></ul></blockquote></li><li><p>内模式（存储模式）：物理层：</p><blockquote><ul><li>是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</li><li>一个数据库只有一个内模式。</li></ul></blockquote></li></ul></blockquote><h2 id="1-x-Exercise"><a href="#1-x-Exercise" class="headerlink" title="1.x Exercise"></a>1.x Exercise</h2><blockquote><p>摘自《数据库系统概论（第五版）》第 33 页习题。</p></blockquote><h3 id="1-x-1-试述数据、数据库、数据库管理系统、数据库系统的概念。"><a href="#1-x-1-试述数据、数据库、数据库管理系统、数据库系统的概念。" class="headerlink" title="1.x.1 试述数据、数据库、数据库管理系统、数据库系统的概念。"></a>1.x.1 试述数据、数据库、数据库管理系统、数据库系统的概念。</h3><blockquote><p>详见 1.1。</p><ul><li><p>数据（Data）</p><blockquote><p>数据是对事物进行定性或定量描述的值，将客观事物转化为可以鉴别的符号使其得以被记录。是数据库中存储的基本对象。</p></blockquote></li><li><p>数据库（Database, DB）</p><blockquote><p>Narrow: <strong>Efficient</strong>, <strong>convenient</strong>, and <strong>safe multi-user</strong> “<strong>storage</strong>“ of <strong>massive</strong> amounts of well organized <strong>persistent data</strong>.</p><p>特点：永久储存、有组织、可共享。</p></blockquote></li><li><p>数据库管理系统（Database Management System, DBMS）</p><blockquote><p>管理数据库的软件系统。</p></blockquote></li><li><p>数据库系统（Database System）</p><blockquote><p>基于数据库建立的一种信息系统。</p><p>通常由<strong>应用程序</strong>、<strong>数据库</strong>、<strong>数据库管理系统</strong>和<strong>用户</strong>组成。</p></blockquote></li></ul></blockquote><h3 id="1-x-2-使用数据库系统有什么好处？"><a href="#1-x-2-使用数据库系统有什么好处？" class="headerlink" title="1.x.2 使用数据库系统有什么好处？"></a>1.x.2 使用数据库系统有什么好处？</h3><blockquote><p>便于数据统一管理，提高数据的物理与逻辑独立性，便于数据共享、消除冗余，方便数据的扩充。</p></blockquote><h3 id="1-x-3-试述文件系统与数据库系统的区别和联系。"><a href="#1-x-3-试述文件系统与数据库系统的区别和联系。" class="headerlink" title="1.x.3 试述文件系统与数据库系统的区别和联系。"></a>1.x.3 试述文件系统与数据库系统的区别和联系。</h3><blockquote><p>相同：</p><blockquote><ul><li>数据可长期保存</li><li>数据可管理</li></ul></blockquote><p>不同：</p><blockquote><ul><li>文件系统共享性差、冗余度大，数据物理、 逻辑独立性差</li><li>数据库系统则解决了文件系统的缺点，并提供更高的数据安全性、完整性、并发控制、恢复功能等</li></ul></blockquote><p>联系：</p><blockquote><p>都是管理数据的系统，文件系统来自操作系统，数据库系统对数据的存储修改等操作最终转化为文件操作。</p></blockquote></blockquote><h3 id="1-x-4-举出适合用文件系统而不是数据库系统的例子，以及适合用数据库系统的例子。"><a href="#1-x-4-举出适合用文件系统而不是数据库系统的例子，以及适合用数据库系统的例子。" class="headerlink" title="1.x.4 举出适合用文件系统而不是数据库系统的例子，以及适合用数据库系统的例子。"></a>1.x.4 举出适合用文件系统而不是数据库系统的例子，以及适合用数据库系统的例子。</h3><blockquote><p>适合文件系统：</p><ul><li>个人终端的文本、多媒体文件的存储，小型程序的数据存储。</li></ul><p>适合数据库系统：</p><ul><li>网站、企业级数据管理，社交软件数据记录等。</li></ul></blockquote><h3 id="1-x-5-试述数据库系统的特点。"><a href="#1-x-5-试述数据库系统的特点。" class="headerlink" title="1.x.5 试述数据库系统的特点。"></a>1.x.5 试述数据库系统的特点。</h3><blockquote><ul><li>数据结构化</li><li>数据独立性高</li><li>高共享，低冗余，易扩充</li><li>数据由 DBMS 统一管理和控制</li></ul></blockquote><h3 id="1-x-6-数据库管理系统（DBMS）的主要功能有哪些？"><a href="#1-x-6-数据库管理系统（DBMS）的主要功能有哪些？" class="headerlink" title="1.x.6 数据库管理系统（DBMS）的主要功能有哪些？"></a>1.x.6 数据库管理系统（DBMS）的主要功能有哪些？</h3><blockquote><p>见 1.1.3.1。</p></blockquote><h3 id="1-x-7-什么是概念模型？试述概念模型的作用？"><a href="#1-x-7-什么是概念模型？试述概念模型的作用？" class="headerlink" title="1.x.7 什么是概念模型？试述概念模型的作用？"></a>1.x.7 什么是概念模型？试述概念模型的作用？</h3><blockquote><p>概念模型是现实世界到机器世界的一个中间层次。</p><p>概念模型用于<strong>信息世界的建模</strong>，是数据库设计人员进行数据库设计的工具，与用户之间进行交流的语言。</p></blockquote><h3 id="1-x-8-定义并解释概念模型中的实体、实体型、实体集、实体之间的联系。"><a href="#1-x-8-定义并解释概念模型中的实体、实体型、实体集、实体之间的联系。" class="headerlink" title="1.x.8 定义并解释概念模型中的实体、实体型、实体集、实体之间的联系。"></a>1.x.8 定义并解释概念模型中的实体、实体型、实体集、实体之间的联系。</h3><blockquote><p>实体：客观存在并可以相互区分的客观事物或抽象事件称为实体。</p><p>实体型：用实体名及其属性名集合来抽象和刻画同类型实体</p><p>实体集：同型实体的集合</p><p>实体之间的联系：实体型内部的联系，组成实体的各个属性之间的联系；实体型之间的联系，不同实体集之间的联系，如一对一、一对多、多对多等。</p></blockquote><h3 id="1-x-15-试述数据库系统的三级模式结构，并说明这种结构的优点是什么。"><a href="#1-x-15-试述数据库系统的三级模式结构，并说明这种结构的优点是什么。" class="headerlink" title="1.x.15 试述数据库系统的三级模式结构，并说明这种结构的优点是什么。"></a>1.x.15 试述数据库系统的三级模式结构，并说明这种结构的优点是什么。</h3><blockquote><p>三级模式包括内模式（存储模式）、模式（概念模式）、外模式（用户模式），同时，模式之间由两级映像。</p><p>内模式是对数据物理存储的抽象，保证了数据的物理独立性。模式是对数据逻辑的抽象，同时外模式在模式的基础上提供了用户的视图，保证了数据的逻辑独立性。</p></blockquote><h3 id="1-x-16-定义并解释以下术语：模式、外模式、内模式、数据定义语言、数据操作语言。"><a href="#1-x-16-定义并解释以下术语：模式、外模式、内模式、数据定义语言、数据操作语言。" class="headerlink" title="1.x.16 定义并解释以下术语：模式、外模式、内模式、数据定义语言、数据操作语言。"></a>1.x.16 定义并解释以下术语：模式、外模式、内模式、数据定义语言、数据操作语言。</h3><blockquote><p>模式、外模式、内模式见 1.2.2.2。</p><p>数据定义语言：定义数据库模式、外模式和内模式的语言。</p><p>数据操纵语言：用来对数据库中的数据进行增删改查的语句。</p></blockquote><h3 id="1-x-17-什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库具有数据与程序的独立性？"><a href="#1-x-17-什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库具有数据与程序的独立性？" class="headerlink" title="1.x.17 什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库具有数据与程序的独立性？"></a>1.x.17 什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库具有数据与程序的独立性？</h3><blockquote><p>数据与程序的物理独立性：当数据库的物理存储结构发生改变，只需改变内模式与模式之间的映像，即可保证模式不发生改变，从而应用程序也不用修改。</p><p>数据与程序的逻辑独立性：当模式改变时，只需改变模式与外模式间的映像，即可保证外模式不发生改变，从而程序不用修改。</p><p>因为数据库的三级模式结构提供了数据与程序的物理与逻辑独立性。</p></blockquote><h3 id="1-x-18-试述数据库系统的组成。"><a href="#1-x-18-试述数据库系统的组成。" class="headerlink" title="1.x.18 试述数据库系统的组成。"></a>1.x.18 试述数据库系统的组成。</h3><blockquote><p>见 1.1.4。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUAA </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modify Shadow Fight 2 Data</title>
      <link href="/posts/Modify-Shadow-Fight-2-Data/"/>
      <url>/posts/Modify-Shadow-Fight-2-Data/</url>
      
        <content type="html"><![CDATA[<p style="text-align: center">    <i>&ldquo;It is never too late to be what you might have been.&rdquo;</i></p><p style="text-align: right"><i>&mdash; George Eliot</i></p><div class="note danger flat"><p>The method in this post may be OUTDATED, and may not work in the latest version of the game.</p></div><h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h1><p><a href="https://shadowfight2.com/">Shadow Fight 2</a> is a fantastic action game developed by <a href="https://nekki.com/">Nekki</a>. However, some items in game may not be easy to obtain through legal progress of the game, such as coins, gems, and enchantment materials. Also, some special weapons.</p><div class="note info flat"><p>My phone is HarmonyOS, which is slightly different from Android and totally not iOS. But I guess they’re all the same. And right now, when I’m writing this article, the game version is <code>2.26.0</code>.</p></div><p>If you got any problem, feel free to comment below.</p><h2 id="DISCLAIMER"><a href="#DISCLAIMER" class="headerlink" title="DISCLAIMER"></a>DISCLAIMER</h2><ul><li>Everything in this tutorial is for <strong>self entertainment</strong> purpose only.</li><li>You are at risk of <strong>losing your progress</strong> if I was wrong, or you made mistakes.</li></ul><hr><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>First, you need the game. Of course, you can download it from official software store. However, if you just want to go through it quickly, you can download it from <a href="https://androeed.ru/files/shadow-fight2--.html">androeed.ru</a>. It offers you optional unlimited money, which means you can still play it as the original game, and keeps the ability to have much money.</p><div class="note warning flat"><p>Notice that the game from androeed.ru doesn’t have unlimited enchantment material.</p></div><p>After you get the game, you can just play it and only make modifications when you really want to. And before you do so, you should prepare a text editor that could edit XML files. You can download one on the phone, or exchange files with a PC.</p><p>Any modification to the game is done in this directory on your phone: <code>Android/data/com.nekki.shadowfight/</code>. This is the location in HarmonyOS, and may vary in different OS. This directory will be called <strong>root folder</strong> in the following parts.</p><div class="note info flat"><p>You can connect your phone to a PC to make it easier for file operations. But do not launch the game during connection, real-time I&#x2F;O to the files may cause Windows Explorer to get extremely slow or freeze.</p></div><hr><h1 id="Back-up-Data"><a href="#Back-up-Data" class="headerlink" title="Back up Data"></a>Back up Data</h1><p>If you are afraid of losing your progress, or encountered some error and need to re-install the game, backing up your data is sure to be a good choice.</p><h2 id="Step-1-Files-to-Back-up"><a href="#Step-1-Files-to-Back-up" class="headerlink" title="Step 1. Files to Back up"></a>Step 1. Files to Back up</h2><p>Go to the root folder (<code>Android/data/com.nekki.shadowfight/</code>), you will see all data files that Shadow Fight 2 uses.</p><p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211132808125.png" alt="image-20230211132808125"></p><p><code>cache/</code> and <code>no_backup/</code> are trivial, you can simply ignore these two.</p><p>Now, enter <code>files/</code>, and you will see these, which is what we will back up then.</p><p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211132927159.png" alt="image-20230211132927159"></p><p>Here are some brief introductions to these folders.</p><ul><li><code>gamedata/</code>: Game resources, this is essential if you don’t want to re-download them.</li><li><code>userdata/</code>: Your progress, <strong>MUST</strong> be kept intact.</li><li><code>Unity/</code>: Shadow Fight 2 uses Unity?! Seems to be some archived logs. Not that vital.</li><li><code>il2cpp/</code>: Seems to be an asset comes together with Unity.</li></ul><h2 id="Step-2-Back-up-the-Files"><a href="#Step-2-Back-up-the-Files" class="headerlink" title="Step 2. Back up the Files"></a>Step 2. Back up the Files</h2><p>Basically, you can just copy the <code>files/</code> folder to your back up folder. However, this may take quite long, because there are too many files (though small) in <code>files/Unity/</code>!</p><p>Good news is that, these annoying files are totally unnecessary! Go to <code>files/Unity/ce8db467-e533-4c3a-8e87-96866484f08b/Analytics/ArchivedEvents</code>, and <strong>delete</strong> all sub folders, it won’t affect the game.</p><p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211134653321.png" alt="image-20230211134653321"></p><div class="note info flat"><p><code>ce8db467-e533-4c3a-8e87-96866484f08b</code> is the only folder in <code>Unity/</code>, and it may vary in different versions or devices.</p></div><p>Now, you can simply copy the <code>files/</code> folder to anywhere you want.</p><hr><h1 id="Modify-Game-Data"><a href="#Modify-Game-Data" class="headerlink" title="Modify Game Data"></a>Modify Game Data</h1><div class="note danger flat"><p>You are now at risk of losing your progress or corrupting your data! Make sure you have backed up your data!</p></div><p>Unlike other tutorials (or perhaps due to the game version?), you <strong>MUST</strong> connect to the Internet when open the game, or the game may report data crash!</p><div class="note success flat"><p>If you do this on your PC, you can show file extensions to make it easier to identify files.</p></div><h2 id="0-Introduction-to-Game-Data"><a href="#0-Introduction-to-Game-Data" class="headerlink" title="0. Introduction to Game Data"></a>0. Introduction to Game Data</h2><p>Before you actually modify the game data, spend some time to get a brief understanding of what you are dealing with.</p><p>Go to <code>files/userdata/</code>, and you’ll see your progress and settings data. The game creates corresponding hash files to validate data. If any file failed hash verification, you game will encounter data crash error! Your progress is stored in <code>users.xml</code>. Actually <code>users_backup.xml</code> is useless if you have <code>users.xml</code>.</p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211141043378.png" alt="image-20230211141043378" style="zoom:80%;"><p>Hash verification can be skipped by simply deleting the corresponding <code>.hash</code> file! (I don’t know why.😝) So if you want to modify the game, delete <code>users.xml.hash</code>, <code>users_backup.xml</code> and <code>users_backup.xml.hash</code>, then you can do whatever you want in <code>users.xml</code>! These three files will be regenerated by the game again, though. Just delete them before you modify the data. And remember to back up <code>users.xml</code> in case you made some mistake. To roll back, simple restore <code>users.xml</code>.</p><p>Below are some common modifications. They only change <code>users.xml</code>. Good luck.😉</p><blockquote><p>Tips: I use Visual Studio Code!</p><ul><li><a href="https://code.visualstudio.com/">Download</a></li><li><a href="https://vscode.dev/">Online</a></li></ul></blockquote><h2 id="1-Increase-Money"><a href="#1-Increase-Money" class="headerlink" title="1. Increase Money"></a>1. Increase Money</h2><p>Open <code>users.xml</code>, and you can see the structure of the xml file.</p><p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211135824139.png" alt="image-20230211135824139"></p><p>Find <code>Root/Warriors/Warrior</code> , it contains all your progress and data.</p><p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211142611697.png" alt="image-20230211142611697"></p><p> Money and Gems are stored as attribute (Gem is called Bonus in code), you can also modify your level, though.</p><div class="note danger flat"><p>If you modifies your level and defeat enemies that should be defeated later, game will proceed in an incorrect order, which may cause content missing, or you cannot trigger certain events.</p></div><h2 id="2-Increase-Enchantment-Material"><a href="#2-Increase-Enchantment-Material" class="headerlink" title="2. Increase Enchantment Material"></a>2. Increase Enchantment Material</h2><p>Some good mod doesn’t provide unlimited enchantment material, and it could be tiring to get enough of them.</p><p>Find <code>Root/Warriors/Warrior/Currencies</code>, <code>ForgeMaterial1 - ForgeMaterial3</code> are corresponding to the green, red and purple ball.</p><p><img src="/posts/Modify-Shadow-Fight-2-Data/image-20230211143227602.png" alt="image-20230211143227602"></p><h2 id="3-Mythical-Set"><a href="#3-Mythical-Set" class="headerlink" title="3. Mythical Set"></a>3. Mythical Set</h2><p>There are some sets that have mythical enchantments. You can just add them to <code>Root/Warriors/Warrior/Items/</code>.</p><p>Here are two templates, which will add an equipment of max level (52).</p><h3 id="Simple-Template"><a href="#Simple-Template" class="headerlink" title="Simple Template"></a>Simple Template</h3><p>You can easily add an item by adding this line to <code>Items/</code> by filling the <code>Name</code> attribute. However, you will have to enchant it with mythical enchantment in game after you add the complete set.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Complete-Template"><a href="#Complete-Template" class="headerlink" title="Complete Template"></a>Complete Template</h3><p>This template will brings mythical enchantment together. Just fill the two <code>Name</code> attribute.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Perk</span> <span class="attr">Name</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Here is a complete example of Monk Set.</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Simple</button><button type="button" class="tab">Complete</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;WEAPON_C2_Z2_MONK_KATAR&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;ARMOR_C2_Z2_MONK&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;HELM_C2_Z2_MONK&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;RANGED_C2_Z2_MONK_SHURIKEN&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;MAGIC_C2_Z2_MONK_ROOT_STUN&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;WEAPON_C2_Z2_MONK_KATAR&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Perk</span> <span class="attr">Name</span>=<span class="string">&quot;PERK_MONK_SET_WHIRL&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;ARMOR_C2_Z2_MONK&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Perk</span> <span class="attr">Name</span>=<span class="string">&quot;PERK_MONK_SET_WHIRL&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;HELM_C2_Z2_MONK&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Perk</span> <span class="attr">Name</span>=<span class="string">&quot;PERK_MONK_SET_WHIRL&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;RANGED_C2_Z2_MONK_SHURIKEN&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Perk</span> <span class="attr">Name</span>=<span class="string">&quot;PERK_MONK_SET_WHIRL&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;MAGIC_C2_Z2_MONK_ROOT_STUN&quot;</span> <span class="attr">Equipped</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Count</span>=<span class="string">&quot;1&quot;</span> <span class="attr">UpgradeLevel</span>=<span class="string">&quot;5240&quot;</span> <span class="attr">DeliveryTime</span>=<span class="string">&quot;0&quot;</span> <span class="attr">DeliveryUpgradeLevel</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">AcquireType</span>=<span class="string">&quot;Upgrade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Perk</span> <span class="attr">Name</span>=<span class="string">&quot;PERK_MONK_SET_WHIRL&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Enchantments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="Sets-Information"><a href="#Sets-Information" class="headerlink" title="Sets Information"></a>Sets Information</h3><p>Here are some sets, just replace the <code>Name</code>.</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Monk</button><button type="button" class="tab">Sentinel</button><button type="button" class="tab">Time Shifter</button><button type="button" class="tab">Warlock</button><button type="button" class="tab">Guardian</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Weapon</span>: <span class="string">WEAPON_C2_Z2_MONK_KATAR</span></span><br><span class="line"> <span class="attr">Armor</span>: <span class="string">ARMOR_C2_Z2_MONK</span></span><br><span class="line"><span class="attr">Helmet</span>: <span class="string">HELM_C2_Z2_MONK</span></span><br><span class="line"><span class="attr">Ranged</span>: <span class="string">RANGED_C2_Z2_MONK_SHURIKEN</span></span><br><span class="line"> <span class="attr">Magic</span>: <span class="string">MAGIC_C2_Z2_MONK_ROOT_STUN</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Enchantment</span>: <span class="string">PERK_MONK_SET_WHIRL</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Weapon</span>: <span class="string">WEAPON_C2_Z3_SENTINEL_SPEAR</span></span><br><span class="line"> <span class="attr">Armor</span>: <span class="string">ARMOR_C2_Z3_SENTINEL</span></span><br><span class="line"><span class="attr">Helmet</span>: <span class="string">HELM_C2_Z3_SENTINEL</span></span><br><span class="line"><span class="attr">Ranged</span>: <span class="string">RANGED_C2_Z3_SENTINEL_SHURIKEN</span></span><br><span class="line"> <span class="attr">Magic</span>: <span class="string">MAGIC_C2_Z3_SENTINEL_DRAGON</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Enchantment</span>: <span class="string">PERK_SENTINEL_SET_SUPER_RETURN</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Weapon</span>: <span class="string">WEAPON_BP_S5_TIME_SHIFTER</span></span><br><span class="line"> <span class="attr">Armor</span>: <span class="string">ARMOR_BP_S5_TIME_SHIFTER</span></span><br><span class="line"><span class="attr">Helmet</span>: <span class="string">HELM_BP_S5_TIME_SHIFTER</span></span><br><span class="line"><span class="attr">Ranged</span>: <span class="string">RANGED_BP_S5_TIME_SHIFTER</span></span><br><span class="line"> <span class="attr">Magic</span>: <span class="string">MAGIC_BP_S5_TIME_SHIFTER</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Enchantment</span>: <span class="string">PERK_TIME_SHIFT_SET_TIME_SHIFTER</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Weapon</span>: <span class="string">WEAPON_C4_Z1_WARLOCK_STAFF</span></span><br><span class="line"> <span class="attr">Armor</span>: <span class="string">ARMOR_C4_Z1_WARLOCK</span></span><br><span class="line"><span class="attr">Helmet</span>: <span class="string">HELM_C4_Z1_WARLOCK</span></span><br><span class="line"><span class="attr">Ranged</span>: <span class="string">RANGED_C4_Z1_WARLOCK_SHURIKEN</span></span><br><span class="line"> <span class="attr">Magic</span>: <span class="string">MAGIC_C4_Z1_WARLOCK_DARK_WAVE</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Enchantment</span>: <span class="string">PERK_WARLOCK_SET_CURSE</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Weapon</span>: <span class="string">WEAPON_BP_S1_GUARDIAN</span></span><br><span class="line"> <span class="attr">Armor</span>: <span class="string">ARMOR_BP_S1_GUARDIAN</span></span><br><span class="line"><span class="attr">Helmet</span>: <span class="string">HELM_BP_S1_GUARDIAN</span></span><br><span class="line"><span class="attr">Ranged</span>: <span class="string">RANGED_BP_S1_GUARDIAN</span></span><br><span class="line"> <span class="attr">Magic</span>: <span class="string">MAGIC_BP_S1_GUARDIAN</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">Enchantment</span>: <span class="string">PERK_GUARDIAN_SET_PROTECTION</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Shadow Fight 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube Web API</title>
      <link href="/posts/SonarQube-Web-API/"/>
      <url>/posts/SonarQube-Web-API/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center;"><b>SonarQube Web API</b></h1><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1. Intro"></a>1. Intro</h1><p>Web API is a convenient way to communicate with SonarQube server, but it is quite complicated at the same time.</p><p>It is recommended to use <a href="https://web.postman.co/">Postman</a> to check API quickly, and the following contents are developed with API categories.</p><p>In this passage, I’ll introduce some basic SonarQube Web APIs, and how to use these stuffs to complete a analyze, emm… actually a simple scan.</p><blockquote><p>If you do not have a SonarQube Server right now, you can use the example site of it: <a href="https://next.sonarqube.com/">https://next.sonarqube.com/</a></p></blockquote><hr><h1 id="2-Web-API"><a href="#2-Web-API" class="headerlink" title="2. Web API"></a>2. Web API</h1><p>In this section, API is presented in the format as shown below. Asterisk(*) is applied to required parameters.  Notice that, here I only listed some relatively more important properties. For more usage, please check SonarQube Web API documentation. :)</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[REQUEST_METHOD] API_FULL_NAME</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[OMITABLE_PARAM]  -- MEANING</span><br><span class="line">[REQUIRED_PARAM]* -- MEANING</span><br><span class="line">[INTERNAL_PARAM]# -- MEANING</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESPONSE EXAMPLE</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="2-0-Preparation"><a href="#2-0-Preparation" class="headerlink" title="2.0 Preparation"></a>2.0 Preparation</h2><p>Before you start, there’s one thing you have to know. SonarQube Web API use authentication by default, which is so called <code>Basic Auth</code>. To use API without repetitively getting <code>401 Unauthorized</code>, you may have to set authorization for your request. Just set it to <code>Basic Auth</code> with your <code>login</code> and <code>password</code>.</p><img src="/posts/SonarQube-Web-API/image-20230204173351469.png" alt="image-20230204173351469" style="zoom: 67%;"><h2 id="2-1-Authentication"><a href="#2-1-Authentication" class="headerlink" title="2.1 Authentication"></a>2.1 Authentication</h2><blockquote><p>Authenticate a user. This is the first thing to do when you want to communicate with SonarQube server.</p></blockquote><h3 id="2-1-1-login"><a href="#2-1-1-login" class="headerlink" title="2.1.1 login"></a>2.1.1 login</h3><p>To use many more features, you have to login first. This request doesn’t have a response.</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/authentication/login</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[login]*    -- username</span><br><span class="line">[password]* -- password</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>None.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="2-1-2-logout"><a href="#2-1-2-logout" class="headerlink" title="2.1.2 logout"></a>2.1.2 logout</h3><blockquote><p>To log out.</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/authentication/logout</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>None.</p></div><div class="tab-item-content"><p>None.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="2-1-3-validate"><a href="#2-1-3-validate" class="headerlink" title="2.1.3 validate"></a>2.1.3 validate</h3><blockquote><p>Check credentials. You are validated only when response is true.</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GET] api/authentication/validate</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>None.</p></div><div class="tab-item-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;valid&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="2-2-Quality-Profile"><a href="#2-2-Quality-Profile" class="headerlink" title="2.2 Quality Profile"></a>2.2 Quality Profile</h2><blockquote><p>This section deals with SonarQube quality profile. Err… duh.</p></blockquote><h3 id="2-2-1-search"><a href="#2-2-1-search" class="headerlink" title="2.2.1 search"></a>2.2.1 search</h3><blockquote><p>Search quality profiles.</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GET] api/qualityprofiles/search</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[language]       -- indicate profiles for which language is searched. e.g. java</span><br><span class="line">[project]        -- project name, indicate profiles attached to which project</span><br><span class="line">[qualityProfile] -- quality profile name</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AYYK3mIVS94aDoufyfEv&quot;</span><span class="punctuation">,</span> <span class="comment">// important! will be used later!</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Code Smell&quot;</span><span class="punctuation">,</span>          <span class="comment">// so called quality profile name</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;languageName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isInherited&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;activeRuleCount&quot;</span><span class="punctuation">:</span> <span class="number">231</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;activeDeprecatedRuleCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;projectCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// projects associated with this profile</span></span><br><span class="line">            <span class="attr">&quot;rulesUpdatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-03T02:29:01+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;userUpdatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-03T10:29:01+0800&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;isBuiltIn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">// seems to relate with permission?</span></span><br><span class="line">                <span class="attr">&quot;edit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;setAsDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;copy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;associateProjects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;create&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="2-2-2-projects"><a href="#2-2-2-projects" class="headerlink" title="2.2.2 projects"></a>2.2.2 projects</h3><blockquote><p>List projects with their association status regarding a quality profile. See <code>api/qualityprofiles/search</code> in order to get the Quality Profile Key</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GET] api/qualityprofiles/projects</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[key]*     -- quality profile key, can be obtained by search in 2.2.1.</span><br><span class="line">[q]        -- limit search to projects that contain the supplied string</span><br><span class="line">[selected] -- show projects that selected this profile or not, depending</span><br><span class="line">              on the value, default is selected</span><br><span class="line">              (selected=selected)   - show only selected items</span><br><span class="line">              (selected=deselected) - show only deselected items</span><br><span class="line">              (selected=all)        - show all items</span><br><span class="line">[ps]       -- page size, greater than 0, default is 100, maximum 500</span><br><span class="line">[p]        -- 1-based page number, default is 1</span><br></pre></td></tr></table></figure><blockquote><p>Tips: It seems that by default none project is selected, so you may want to set selected to <code>all</code> to show all projects.</p></blockquote></div><div class="tab-item-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyScs04&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyScs04&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selected&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kang-s-scs-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kang&#x27;s-scs-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selected&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-scs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-scs&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selected&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selected&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pageIndex&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;more&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="comment">// I guess it indicates if there are more pages :P</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="2-2-3-add-project"><a href="#2-2-3-add-project" class="headerlink" title="2.2.3 add_project"></a>2.2.3 add_project</h3><blockquote><p>Associate a project with a quality profile. Requires one of the following permissions:</p><ul><li>‘Administer Quality Profiles’</li><li>Edit right on the specified quality profile</li><li>Administer right on the specified project</li></ul></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/qualityprofiles/add_project</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[language]*       -- quality profile language, e.g. java</span><br><span class="line">[project]*        -- project key</span><br><span class="line">[qualityProfile]* -- quality profile name</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>None.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><blockquote><p>Tips: Its weird, you must logout first, and then use authorization to avoid 401 Unauthorized.</p></blockquote><h2 id="2-3-Quality-Gate"><a href="#2-3-Quality-Gate" class="headerlink" title="2.3 Quality Gate"></a>2.3 Quality Gate</h2><h3 id="2-3-1-select"><a href="#2-3-1-select" class="headerlink" title="2.3.1 select"></a>2.3.1 select</h3><blockquote><p>Associate a project to a quality gate. Requires one of the following permissions!</p><ul><li>‘Administer Quality Gates’</li><li>‘Administer’ right on the specified project</li></ul><p>I mean it! <strong>Administer</strong> permission required!</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/qualitygates/select</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[gateName]   -- name of the quality gate</span><br><span class="line">[projectKey] -- project key</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>None.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="2-4-Projects"><a href="#2-4-Projects" class="headerlink" title="2.4 Projects"></a>2.4 Projects</h2><blockquote><p>This section manages project existence. Requires ‘Create Projects’ permission, and remember to add <strong>authorization</strong> mentioned in 2.0 to the request!</p></blockquote><h3 id="2-4-1-create"><a href="#2-4-1-create" class="headerlink" title="2.4.1 create"></a>2.4.1 create</h3><blockquote><p>Notice </p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/projects/create</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[name]*      -- name of the project, no longer than 500 characters.</span><br><span class="line">[project]*   -- key of the project, can be, and probably is convenient to be the same as name.</span><br><span class="line">[mainBranch] -- key of the main branch of the project, default is main</span><br><span class="line">[visibility] -- whether the created project should be visible to everyone, private or public</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;project&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TRK&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><blockquote><p>Tips: Its weird, you must logout first, and then use authorization to avoid 401 Unauthorized.</p></blockquote><h3 id="2-4-2-delete"><a href="#2-4-2-delete" class="headerlink" title="2.4.2 delete"></a>2.4.2 delete</h3><blockquote><p>Delete a project. Requires ‘Administer System’ permission or ‘Administer’ permission on the project.</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/projects/delete</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[project]* -- project key</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p>None.</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><blockquote><p><code>delete</code> has a brother - <code>bulk_delete</code>, which provide <code>projects</code> parameter to take multiple project keys separated by comma, instead of a single <code>project</code>.</p></blockquote><h3 id="2-4-3-search"><a href="#2-4-3-search" class="headerlink" title="2.4.3 search"></a>2.4.3 search</h3><blockquote><p>Search for projects or views to administrate them.</p></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GET] api/projects/search</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[projects] -- comma-separated list of project keys</span><br><span class="line">[q]        -- Limit search to:</span><br><span class="line">              1. component names that contain the supplied string</span><br><span class="line">              2. component keys that contain the supplied string</span><br><span class="line">[ps]       -- page size, range between [1, 500], 100 by default</span><br><span class="line">[p]        -- 1-based page number, 1 by default</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pageIndex&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;components&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;project-key-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project Name 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TRK&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastAnalysisDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-03-01T11:39:03+0300&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;revision&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cfb82f55c6ef32e61828c4cb3db2da12795fd767&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;project-key-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Project Name 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TRK&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastAnalysisDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-03-02T15:21:47+0300&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;revision&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7be96a94ac0c95a61ee6ee0ef9c6f808d386a355&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="2-5-Issues"><a href="#2-5-Issues" class="headerlink" title="2.5 Issues"></a>2.5 Issues</h2><blockquote><p>To read and update issues. This is mainly used to get issues of projects after a successful scan.</p></blockquote><h3 id="2-5-1-search"><a href="#2-5-1-search" class="headerlink" title="2.5.1 search"></a>2.5.1 search</h3><blockquote><p>Search for issues.</p><p>Require <code>Browse</code> permission on the specified project(s). For applications, it also requires ‘Browse’ permission on its child projects.</p><p>When issue indexation is in progress returns 503 service unavailable HTTP code.</p><p>PS:</p><ul><li>Only primary parameters are listed here. (There are too many. &gt;_&lt;)</li><li>For more details on issues, you can visit online SonarQube Server: <a href="https://next.sonarqube.com/sonarqube/issues">https://next.sonarqube.com/sonarqube/issues</a>.</li></ul></blockquote><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">API</button><button type="button" class="tab">Params</button><button type="button" class="tab">Response</button></div><div class="tab-contents"><div class="tab-item-content active"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GET] api/issues/search</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[componentKeys] -- comma-separated list of component keys.</span><br><span class="line">                   Retrieve issues associated to a specific list of components</span><br><span class="line">                   and all its descendants. A component can be a portfolio, project,</span><br><span class="line">                   module, directory or file.</span><br><span class="line">[projects]#     -- comma-separated list of project keys. To retrieve issues</span><br><span class="line">                   associated to a specific list of projects.</span><br><span class="line">                   (This can replace [componentKeys] to focus only on projects)</span><br><span class="line">[languages]     -- comma-separated list of languages, e.g. java,js</span><br><span class="line">[ps]            -- page size, in range [1, 500], 100 by default</span><br><span class="line">[p]             -- 1-based page number</span><br><span class="line"></span><br><span class="line">----- category related</span><br><span class="line">[severities] -- comma-separated list of severities, possible values are:</span><br><span class="line">                INFO, MINOR, MAJOR, CRITICAL, BLOCKER</span><br><span class="line">[tags]       -- comma-separated list of tags,</span><br><span class="line">[rules]      -- comma-separated list of coding rule keys, format is &lt;repo&gt;:&lt;rule&gt;</span><br><span class="line">                e.g. java:S1144</span><br><span class="line">[types]      -- comma-separated list of types, possible values are:</span><br><span class="line">                CODE_SMELL, BUG, VULNERABILITY, SECURITY_HOTSPOT</span><br><span class="line">                </span><br><span class="line">----- additional</span><br><span class="line">[asc] -- ascending sort, possible values are &#x27;true&#x27;, &#x27;false&#x27;, &#x27;yes, &#x27;no&#x27;,</span><br><span class="line">         &#x27;yes&#x27; by default.</span><br><span class="line">[s]   -- sort field, possible values are:</span><br><span class="line">         CLOSE_DATE, HOTSPOTS, FILE_LINE, SEVERITY,</span><br><span class="line">         CREATION_DATE, ASSIGNEE, STATUS, UPDATE_DATE</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;p&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ps&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pageIndex&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;effortTotal&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;issues&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AYYbkN7mkKgvZBo1DSiT&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;rule&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java:S3038&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;severity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MINOR&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-4:src/scs/att/Content.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;project&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2c953c12d2eb6ea958b7f3045ecf8e81&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;textRange&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;startLine&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;endLine&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;startOffset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;endOffset&quot;</span><span class="punctuation">:</span> <span class="number">37</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;flows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OPEN&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;getInfo\&quot; is defined in the \&quot;IInfo\&quot; interface and can be removed from this class.&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;effort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2min&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;debt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2min&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;** e-mail address is hidden **&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;confusing&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;creationDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-11-14T19:31:16+0800&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;updateDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-02-04T16:34:44+0800&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CODE_SMELL&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MAIN&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;quickFixAvailable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;messageFormattings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;components&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myscs-4:src/scs/att/Content.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;qualifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FIL&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Content.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;longName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/scs/att/Content.java&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/scs/att/Content.java&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;facets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><h1 id="3-Application"><a href="#3-Application" class="headerlink" title="3. Application"></a>3. Application</h1><blockquote><p>Notice:</p><ul><li>In this section, server name is omitted, e.g. <code>www.server-name:9000/api/authentication/login</code> is presented as <code>api/authentication/login</code>. </li><li>Request details are omitted, please refer to the previous section. It is recommended that you open two pages in separate vertical tabs.</li></ul></blockquote><h2 id="3-0-Preparation"><a href="#3-0-Preparation" class="headerlink" title="3.0 Preparation"></a>3.0 Preparation</h2><p>Before you start, you may want to take some advice.</p><p>SonarQube Web API is sometimes weird, if you logged in use <code>api/authentication/login</code> first, some request will not succeed and receive <code>401 Unauthorized</code> even you added Authorization field. If you encountered this, please use <code>api/authentication/logout</code> to logout first. However, some other requests do not authenticate your Authorization field and relies on <code>login</code>!!! <del>Karabast!</del></p><h2 id="3-1-Create-A-Project"><a href="#3-1-Create-A-Project" class="headerlink" title="3.1 Create A Project"></a>3.1 Create A Project</h2><p>To perform a scan, we should create a project first. However, this procedure is not necessary, because a new project will be created when Sonar Scanner completes a successful scan. If we create a project first, we can configure it before the first scan.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/projects/create</span><br></pre></td></tr></table></figure><blockquote><p>Tips: This request is a good example of 3.0. See above.</p></blockquote><h2 id="3-2-Associate-Quality-Profile"><a href="#3-2-Associate-Quality-Profile" class="headerlink" title="3.2 Associate Quality Profile"></a>3.2 Associate Quality Profile</h2><p>Default quality profile will be associated to our newly created project, and we might not want it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/qualityprofiles/add_project</span><br></pre></td></tr></table></figure><h2 id="3-3-Associate-Quality-Gate"><a href="#3-3-Associate-Quality-Gate" class="headerlink" title="3.3 Associate Quality Gate"></a>3.3 Associate Quality Gate</h2><p>Default quality gate will be associated to our newly created project, too.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[POST] api/qualitygates/select</span><br></pre></td></tr></table></figure><h2 id="3-4-Scan-Project"><a href="#3-4-Scan-Project" class="headerlink" title="3.4 Scan Project"></a>3.4 Scan Project</h2><p>SonarQube can not scan your project by itself. You have to use Sonar Scanner. Just refer to my previous post.</p><blockquote><p><a href="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/">Analyze Java with SonarQube and SonarScanner</a></p></blockquote><p>Remember to set <code>sonar.projectKey</code> and <code>sonar.projectName</code> to what you assigned when create the project. :)</p><h2 id="3-5-View-Issues"><a href="#3-5-View-Issues" class="headerlink" title="3.5 View Issues"></a>3.5 View Issues</h2><p>After a successful scan is performed, you can simple view your issues by a simple request.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[GET] api/issues/search</span><br></pre></td></tr></table></figure><p>This request has a lot of parameters, but generally, you only need to specify <code>projects</code> parameter. It will then return all the issues of the selected projects. And if you want certain tags or types, just add them.</p><blockquote><p>Be aware that there might be a lot of issues, and possibly more than 500, which is the maximum page size! You may need more than one request for different pages.</p></blockquote><p>So, I guess this is it, good luck! :P</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Analysis Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PassBash</title>
      <link href="/posts/PassBash/"/>
      <url>/posts/PassBash/</url>
      
        <content type="html"><![CDATA[<h1 id="PassBash"><a href="#PassBash" class="headerlink" title="PassBash"></a>PassBash</h1><p>Copyright © Tony’s Studio 2020 - 2023</p><hr><h2 id="Try-It-out"><a href="#Try-It-out" class="headerlink" title="Try It out!"></a>Try It out!</h2><p>This is an open source project. Check it out on Gitee and Github!</p><ul><li><a href="https://gitee.com/tonys-studio/pass-bash">Gitee</a></li><li><a href="https://github.com/Lord-Turmoil/PassBash">Github</a></li></ul><h2 id="What-Is-It"><a href="#What-Is-It" class="headerlink" title="What Is It?"></a>What Is It?</h2><p>PassBash, a.k.a. Pash, is a light-weight command-line password manager, using Tiny Encryption Algorithm to protect your data. And, again, developed with <a href="http://leethomason.github.io/tinyxml2/">tinyxml2</a>.</p><p>It provides you with management ability like folders and files, and use one master password to encrypt everything. Each password item is like a “file” in your computer, and you can put related passwords into one group, representing a folder. Of course, you can create groups in groups.</p><img src="/posts/PassBash/image-20230120143812587.png" alt="image-20230120143812587" style="zoom:50%;"><h2 id="How-to-Use-It"><a href="#How-to-Use-It" class="headerlink" title="How to Use It?"></a>How to Use It?</h2><p>Just use it like Linux bash, but with fewer functions. Basically, I tried to make the meaning of commands in PassBash the same as what is Linux. You can always use help to check available commands.</p><img src="/posts/PassBash/image-20230120143941531.png" alt="image-20230120143941531" style="zoom:50%;"><img src="/posts/PassBash/image-20230120144212415.png" alt="image-20230120144212415" style="zoom: 67%;"><blockquote><p>Tips: It supports both absolute and relative path!</p></blockquote><img src="/posts/PassBash/image-20230120144426118.png" alt="image-20230120144426118" style="zoom:67%;"><h2 id="How-Does-It-Work"><a href="#How-Does-It-Work" class="headerlink" title="How Does It Work?"></a>How Does It Work?</h2><p>It use 32-round Tiny Encryption Algorithm to encrypt your data, which is quite reliable. At first launch, after you set your master password, it will generate two initial files as follows, <code>config</code> and <code>data</code> encrypted with the master password.</p><img src="/posts/PassBash/image-20230120183934898.png" alt="image-20230120183934898" style="zoom:67%;"><p><code>config</code> stores your master password, and <code>data</code> is an encrypted XML file which contains all your passwords. When you login, Pash will decode <code>config</code> with the password you enter, and compare the decoded content with it. You are verified if these two are the same.</p><blockquote><p><strong>WARNING!</strong> Although you no longer need to remember your passwords, you still need to <strong>remember your master password</strong> to reveal all the others. </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Personal Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy SonarQube on Windows Server</title>
      <link href="/posts/Deploy-SonarQube-on-Windows-Server/"/>
      <url>/posts/Deploy-SonarQube-on-Windows-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploy-SonarQube-on-Windows-Server"><a href="#Deploy-SonarQube-on-Windows-Server" class="headerlink" title="Deploy SonarQube on Windows Server"></a>Deploy SonarQube on Windows Server</h1><hr><p>All information needed can be found at my post <a href="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/">Analyze Java with SonarQube and SonarScanner</a>.</p><p>By this, you can deploy SonarQube on a remote server, and only deploy SonarScanner locally. Run SonarScanner and get your analysis remotely!</p><h2 id="Step-1-Preparations"><a href="#Step-1-Preparations" class="headerlink" title="Step.1 Preparations"></a>Step.1 Preparations</h2><p>On your Windows Server, do exactly what you do locally. For more information, just refer to my old post.</p><blockquote><p><a href="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/">Analyze Java with SonarQube and SonarScanner</a></p></blockquote><p>Here, I’ll just point out something different.</p><h3 id="PostgreSQL-Configuration"><a href="#PostgreSQL-Configuration" class="headerlink" title="PostgreSQL Configuration"></a>PostgreSQL Configuration</h3><p>Server also need restart. :(</p><p>When adding new server, password field is required. It is the password of the user, here, it is <code>postgres</code>, the super user.</p><img src="/posts/Deploy-SonarQube-on-Windows-Server/image-20230107121953414.png" alt="image-20230107121953414" style="zoom:67%;"><blockquote><p>Notice that, if you entered the wrong password, it will say cannot connect the server, rather than wrong password.</p></blockquote><h2 id="Step-2-Launch-SonarQube"><a href="#Step-2-Launch-SonarQube" class="headerlink" title="Step.2 Launch SonarQube!"></a>Step.2 Launch SonarQube!</h2><p>Just do what you did locally, and run <code>StartSonar.bat</code>. It may take quite long on remote server with low performance. It may have a lot of warning, but you can ignore them. If everything goes well, you will get SonarQube fully operational!</p><img src="/posts/Deploy-SonarQube-on-Windows-Server/image-20230107124614053.png" alt="image-20230107124614053" style="zoom:67%;"><p>And then, you can visit SonarQube remotely! Isn’t it great!</p><img src="/posts/Deploy-SonarQube-on-Windows-Server/image-20230107125407204.png" alt="image-20230107125407204" style="zoom:50%;"><blockquote><p>Remember to add firewall rule for port 9000 for your server.</p></blockquote><h2 id="Step-3-Configure-SonarQube"><a href="#Step-3-Configure-SonarQube" class="headerlink" title="Step.3 Configure SonarQube"></a>Step.3 Configure SonarQube</h2><h3 id="3-1-Configure-SonarQube"><a href="#3-1-Configure-SonarQube" class="headerlink" title="3.1 Configure SonarQube"></a>3.1 Configure SonarQube</h3><blockquote><p>This is done on the remote server.</p></blockquote><p>Well, this remains the same as local configuration. </p><p>Add following parameters to the <code>Sonar\SonarQube\conf\sonar.properties</code>.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Your database</span></span><br><span class="line"><span class="attr">sonar.jdbc.url</span>=<span class="string">jdbc:postgresql://127.0.0.1:5432/SonarQube?currentSchema=public</span></span><br><span class="line"><span class="comment"># Database user name</span></span><br><span class="line"><span class="attr">sonar.jdbc.username</span>=<span class="string">Sonar</span></span><br><span class="line"><span class="comment"># Database password</span></span><br><span class="line"><span class="attr">sonar.jdbc.password</span>=<span class="string">sonar</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Configure-SonarScanner"><a href="#3-2-Configure-SonarScanner" class="headerlink" title="3.2 Configure SonarScanner"></a>3.2 Configure SonarScanner</h3><blockquote><p>This is done on your local machine.</p></blockquote><p>Well, since SonarScanner is deployed locally, you have to change <code>sonar.host.url</code> to your remote server.</p><p>Add following parameters to the <code>Sonar\SonarScanner\conf\sonar-scanner.properties</code>.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----- Default SonarQube server</span></span><br><span class="line"><span class="attr">sonar.host.url</span>=<span class="string">http://xxx.xxx.xxx.xxx:9000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ----- Default source code encoding</span></span><br><span class="line"><span class="attr">sonar.sourceEncoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Configure-Java-Project"><a href="#3-3-Configure-Java-Project" class="headerlink" title="3.3 Configure Java Project"></a>3.3 Configure Java Project</h3><blockquote><p>This is done, of course, on your local machine.</p></blockquote><p>Find your Java project, and create <code>sonar-project.properties</code> in the root directory with the following parameters. Remember to replace parameters with your own.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># must be unique in a given SonarQube instance</span></span><br><span class="line"><span class="attr">sonar.projectKey</span>=<span class="string">myscs-4</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"># this is the name displayed in the SonarQube UI</span></span><br><span class="line"><span class="attr">sonar.projectName</span>=<span class="string">myscs-4</span></span><br><span class="line"><span class="attr">sonar.projectVersion</span>=<span class="string">0.1.0</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"># Path is relative to the sonar-project.properties file</span></span><br><span class="line"><span class="comment"># Replace &quot;\&quot; by &quot;/&quot; on Windows</span></span><br><span class="line"><span class="comment"># If not set, SonarQube starts looking for source code from the</span></span><br><span class="line"><span class="comment">#   directory containing sonar-project.properties file</span></span><br><span class="line"><span class="attr">sonar.sources</span>=<span class="string">src</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"># Path for classes</span></span><br><span class="line"><span class="attr">sonar.java.binaries</span>=<span class="string">out/production/scs-4</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">sonar.language</span>=<span class="string">java</span></span><br><span class="line"><span class="attr">sonar.sourceEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># SonarQube website username and password</span></span><br><span class="line"><span class="comment"># or remove sonar.password and replace sonar.login with your token</span></span><br><span class="line"><span class="attr">sonar.login</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">sonar.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure><h2 id="Step-4-Run-SonarScanner"><a href="#Step-4-Run-SonarScanner" class="headerlink" title="Step.4 Run SonarScanner"></a>Step.4 Run SonarScanner</h2><p>Now, you can run <code>sonar-scanner</code> under your Java project folder, and get results on the remote server!</p><img src="/posts/Deploy-SonarQube-on-Windows-Server/image-20230107131727792.png" alt="image-20230107131727792" style="zoom:50%;"><blockquote><p>You may get such a warning after a scan. It is because SonarQube failed to connect the PostgreSQL database. Check <code>Sonar\SonarQube\conf\sonar.properties</code>, and see if the parameters match database settings. Pay attention to username and password.</p></blockquote><p>This is it, and you’re all set! See you around! :)</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Analysis Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SonarQube </tag>
            
            <tag> Deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build a Blog With Hexo</title>
      <link href="/posts/Build-a-Blog-with-Hexo/"/>
      <url>/posts/Build-a-Blog-with-Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Build-a-Blog-with-Hexo"><a href="#Build-a-Blog-with-Hexo" class="headerlink" title="Build a Blog with Hexo"></a>Build a Blog with Hexo</h1><p><strong>Reference:</strong> <a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">https://blog.csdn.net/weixin_45019350/article/details/121901433</a></p><hr><p>Some times, I just want to write something and share it. I have built a website of my own from scratch, but that was too lame. So I spent a day with Hexo and found it rather easy.</p><h2 id="Step-1-Preparations"><a href="#Step-1-Preparations" class="headerlink" title="Step.1 Preparations"></a>Step.1 Preparations</h2><h3 id="1-1-Node-js"><a href="#1-1-Node-js" class="headerlink" title="1.1 Node.js"></a>1.1 Node.js</h3><p>Hexo is developed with Node.js, and is managed by <code>npm</code>. You can download Node.js at the official website, and <code>npm</code> is included.</p><blockquote><p><a href="https://nodejs.org/">https://nodejs.org/</a></p></blockquote><h3 id="1-2-Git"><a href="#1-2-Git" class="headerlink" title="1.2 Git"></a>1.2 Git</h3><p>To make your blog prettier, you may want some extra themes, which usually are in Github. So you got to have Git to download them. Just download zip manually from Github is also OK, I guess. You have two choices, but they may both be a little slow.</p><blockquote><p><a href="https://git-scm.com/">https://git-scm.com/</a></p><p><a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p></blockquote><h2 id="Step-2-Install-Hexo"><a href="#Step-2-Install-Hexo" class="headerlink" title="Step.2 Install Hexo"></a>Step.2 Install Hexo</h2><p>With all the preparations done, you are ready to get Hexo, <code>-g</code> is for global.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Then, you can check installation status by checking its version.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>If you see what you expected, it means you made it.</p><blockquote><p>Don’t get cute to change the default download directory of <code>npm</code> . If you do so, <code>hexo</code> or other package may not be added to system environment variables correctly. In theory, you can, of course, but it will cause much inconvenience.</p></blockquote><h2 id="Step-3-Build-Your-Blog"><a href="#Step-3-Build-Your-Blog" class="headerlink" title="Step.3 Build Your Blog"></a>Step.3 Build Your Blog</h2><h3 id="3-1-Initialize-Blog"><a href="#3-1-Initialize-Blog" class="headerlink" title="3.1 Initialize Blog"></a>3.1 Initialize Blog</h3><p>Now, you can build your own blog by a line of simple command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="string">&quot;RootFolderName&quot;</span></span><br></pre></td></tr></table></figure><p>Here, you have to give the root folder name of your blog, and Hexo will create such a folder in <strong>current</strong> directory, so be careful when you do this. Then, everything of your blog is restricted in this root folder.</p><p>Have a look at your root folder, <code>source/</code> is where your posts will go. <code>themes/</code> is where your themes will go.</p><h3 id="3-2-Install-npm"><a href="#3-2-Install-npm" class="headerlink" title="3.2 Install npm"></a>3.2 Install <code>npm</code></h3><p>I’m not sure about the meaning of this? But just do this? Enter the root folder first, and then install <code>npm</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../RootFolderName&gt; npm install</span><br></pre></td></tr></table></figure><h3 id="3-3-Punch-It"><a href="#3-3-Punch-It" class="headerlink" title="3.3 Punch It!"></a>3.3 Punch It!</h3><p>Your blog is ready to roll!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  <span class="comment"># static generation</span></span><br><span class="line">hexo server    <span class="comment"># start hexo server at localhost:4000 </span></span><br></pre></td></tr></table></figure><p>Now, you will get the default blog at your own computer with a default Hello World passage.</p><p>Here are some common command for Hexo. You can use abbreviations, such as <code>hexo g</code> instead of <code>hexo generate</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo generate        <span class="comment"># static generation</span></span><br><span class="line">hexo server          <span class="comment"># start hexo server at localhost:4000</span></span><br><span class="line">hexo server -p 80    <span class="comment"># change localhost port to 80 only once </span></span><br><span class="line">hexo clean           <span class="comment"># clean pre-generated files and temp files</span></span><br><span class="line">hexo deploy          <span class="comment"># deploy with given method</span></span><br><span class="line">hexo new <span class="string">&quot;post name&quot;</span>           <span class="comment"># post a new article</span></span><br><span class="line">hexo new draft <span class="string">&quot;post name&quot;</span>     <span class="comment"># draft a new article</span></span><br><span class="line">hexo publish draft <span class="string">&quot;post name&quot;</span> <span class="comment"># publish a draft</span></span><br></pre></td></tr></table></figure><h3 id="3-4-Post-New-Passage"><a href="#3-4-Post-New-Passage" class="headerlink" title="3.4 Post New Passage"></a>3.4 Post New Passage</h3><p>Its simple to post a new passage, just one command. It will create a Markdown file at <code>/source/_post/</code>, just go for it and edit with whatever the Markdown editor you like.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;post name&quot;</span></span><br></pre></td></tr></table></figure><p>However, in stead of post new posts directly, we recommend you write a draft before you formally publish it. Draft articles will be stored in <code>RootFolderName/source/_drafts/</code> directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo draft <span class="string">&quot;post name&quot;</span></span><br><span class="line"><span class="comment"># writing your post...</span></span><br><span class="line">hexo publish draft <span class="string">&quot;post name&quot;</span></span><br></pre></td></tr></table></figure><p><code>publish</code> will move draft article into <code>RootFolderName/source/_posts</code>, and do almost the same as <code>new</code> command. In this way, the publish time of the article will be the time you execute <code>publish</code>.</p><div class="note info flat"><p>Drafts will not appear in the final blog website.</p></div><h3 id="3-5-Configure-Your-Blog"><a href="#3-5-Configure-Your-Blog" class="headerlink" title="3.5 Configure Your Blog"></a>3.5 Configure Your Blog</h3><p>Hexo only provide a default configuration, so you have to make your own modification. There is a <code>_config.yml</code> in the root folder, you can configure the global info of your blog here.</p><p>For example, the site info. Hexo use <code>moment.js</code> for time matters, so visit <a href="https://momentjs.com/">https://momentjs.com/</a> for more information on time.</p><p><img src="/posts/Build-a-Blog-with-Hexo/image-20230106131029523.png" alt="Site Info"></p><p>Err… The default style is… Uhm… Not that pleasing. But don’t worry, you can get plenty of beautiful themes at Hexo’s official site.</p><blockquote><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p></blockquote><p>You can preview the theme at their example site, and find their Github repository. Usually there is a README.md to tell you how to get it. Each theme has its own <code>_config.yml</code> at <code>themes/&quot;ThemeName&quot;</code>, this is only for the theme itself. When you get a theme, configure your theme in the <strong>global</strong> <code>_config.yml</code> file.</p><p><img src="/posts/Build-a-Blog-with-Hexo/image-20230106131506842.png" alt="Theme"></p><p>Theme’s configuration file can be found at <code>/themes/&quot;ThemeName&quot;/</code>. Also, you can create <code>_config.&quot;ThemeName&quot;.yml</code> in the root folder to override the former.</p><blockquote><p>Here, I recommend <a href="https://butterfly.js.org/">Butterfly</a>. :butterfly:</p></blockquote><h2 id="Step-4-Deploy-Your-Blog"><a href="#Step-4-Deploy-Your-Blog" class="headerlink" title="Step.4 Deploy Your Blog"></a>Step.4 Deploy Your Blog</h2><p>What’s the point if the blog can only be viewed on our own computer? So you must be so eager to deploy it. Here I offer two ways, deploy on Github, or on a Windows Server.</p><h3 id="4-1-Deploy-on-Github"><a href="#4-1-Deploy-on-Github" class="headerlink" title="4.1 Deploy on Github"></a>4.1 Deploy on Github</h3><p>To deploy on Github, you need a specific repository first. It must be the format of <code>&quot;username&quot;.github.io</code>.</p><p>Then, you need a tool to do the push for you. Execute this kind of command under the root folder of your blog.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>Then, configure the deploy type in the root <code>_config.yml</code>.</p><p><img src="/posts/Build-a-Blog-with-Hexo/image-20230106132015114.png" alt="image-20230106132015114"></p><p>Then, you can use <code>hexo deploy</code> to deploy your website to Github. After successful push, it needs some time before you can visit your blog normally.</p><h3 id="4-2-Deploy-on-Windows-Server"><a href="#4-2-Deploy-on-Windows-Server" class="headerlink" title="4.2 Deploy on Windows Server"></a>4.2 Deploy on Windows Server</h3><p>Ahh… In fact, this is not quite a method. Just do the step 1 to 3 on your Windows Server. If there is any trouble of network connection to Github, just download stuffs on your own computer, and then paste them to the server. In this case, you can ignore Git, just copy the root folder to your server without any modification. Really, it works.</p><p>Below, things are done in your server.</p><p>Enter the root folder of your blog, do what you do locally.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    <span class="comment"># clear previously generated files</span></span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Then, the server will start at <code>localhost:4000</code>. And if you want to start at the default port, just use <code>-p</code> parameter.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 80</span><br></pre></td></tr></table></figure><p>Now, this localhost can be reached by your server’s public IP. This is it, easy, huh?</p><hr><h2 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h2><h3 id="Failed-to-Load"><a href="#Failed-to-Load" class="headerlink" title="Failed to Load"></a>Failed to Load</h3><p><strong>Q:</strong> Why my blog cannot load corresponding resources when deployed to Github?</p><p><strong>A:</strong> If you find this right after the push, be patient, it takes sometime for Github to initialize your page. But most commonly, the problem is in your configuration.</p><blockquote><p>In the global <code>_config.yml</code>, find <code>url</code> entry, change it to <code>https://username.github.io</code>, and this will work.</p></blockquote><h3 id="Incorrect-Link-Behavior"><a href="#Incorrect-Link-Behavior" class="headerlink" title="Incorrect Link Behavior"></a>Incorrect Link Behavior</h3><p><strong>Q:</strong> Why the link seems to be recursive? For example, click Tags in Tags page will lead to <code>tags/tags/</code> page??</p><p><strong>A:</strong> This is a tricky problem with Hexo itself.</p><blockquote><p>Go to global <code>_config.yml</code>, change <code>relative_link</code> to false.</p></blockquote><h3 id="Post-with-Images"><a href="#Post-with-Images" class="headerlink" title="Post with Images"></a>Post with Images</h3><p><strong>Q:</strong> I want to use images in my markdown file, it displays correctly when I edit my Markdown file, but won’t show up in the blog. How could it happen?</p><p><strong>A:</strong> Good question. Hexo seems to change the directory of images in Markdown files. So you need some configurations.</p><p>The following answer comes from <a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a>. Thanks very much!</p><blockquote><p><strong>Step 1:</strong> Change default configuration.</p><p>In  the global <code>_config.yml</code>, change <code>post_asset_folder</code> entry to <code>true</code>. This will make Hexo generate a folder in <code>source/_posts/</code> with the same name of your post, with ‘ ‘ replaced by ‘-‘. You should then put the corresponding image here.</p><blockquote><p>If you use Typora, it is recommended to go to <code>Preferences &gt; Image &gt; When Insert...</code>, choose <code>Copy image to custom folder</code> and set the folder name to <code>./$&#123;filename&#125;</code>.</p></blockquote><p><strong>Step 2:</strong> Download hexo-image-asset.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p><strong>Step 3:</strong> Modify package.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure><p>Then, replace all with the following code. (Code comes from the reference above. Thanks very much!)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">    <span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.<span class="title function_">shift</span>();</span><br><span class="line">              src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">              <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deployment </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Analyze Java With SonarQube and SonarScanner</title>
      <link href="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/"/>
      <url>/posts/Analyze-Java-with-SonarQube-and-SonarScanner/</url>
      
        <content type="html"><![CDATA[<h1 id="Analyze-Java-with-SonarQube-And-SonarScanner"><a href="#Analyze-Java-with-SonarQube-And-SonarScanner" class="headerlink" title="Analyze Java with SonarQube And SonarScanner"></a>Analyze Java with SonarQube And SonarScanner</h1><p><strong>Reference:</strong></p><ul><li><a href="https://blog.csdn.net/nikeylee/article/details/117367744">https://blog.csdn.net/nikeylee/article/details/117367744</a></li><li><a href="https://blog.csdn.net/nikeylee/article/details/117412832">https://blog.csdn.net/nikeylee/article/details/117412832</a></li></ul><hr><p>“<a href="http://www.sonarqube.org/">SonarQube</a> is a self-managed, automatic code review tool that systematically helps you deliver <em>clean code</em>.”</p><h2 id="Step-1-Preparation"><a href="#Step-1-Preparation" class="headerlink" title="Step.1 Preparation"></a>Step.1 Preparation</h2><p>We need SonarQube, SonarScanner for core feature, and PostgreSQL as database. Besides, it requires Java JDK 11.</p><h3 id="1-1-SonarQube-SonarScanner"><a href="#1-1-SonarQube-SonarScanner" class="headerlink" title="1.1 SonarQube &amp; SonarScanner"></a>1.1 SonarQube &amp; SonarScanner</h3><ul><li>Download <a href="https://www.sonarsource.com/products/sonarqube/downloads/">SonarQube 9.8.0.63668</a> to <code>E:\Gadgets\Sonar\SonarQube\</code></li><li>Download <a href="https://docs.sonarqube.org/latest/analyzing-source-code/scanners/sonarscanner/">SonarScanner 4.7.0.2747</a> to <code>E:\Gadgets\Sonar\SonarScanner\</code></li></ul><p>Then, you have to add SonarScanner to system environment variables.</p><p>Add <code>SONAR_SCANNER_HOME = E:/Gadgets/Sonar/SonarScanner/</code> to system environment variables. Then add <code>%SONAR_SCANNER_HOME%\bin</code> to Path.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106220213452.png" alt="image-20230106220213452" style="zoom: 80%;"><blockquote><p>Use <code>sysdm.cpl</code> to reduce clicks.</p></blockquote><h3 id="1-2-PostgreSQL"><a href="#1-2-PostgreSQL" class="headerlink" title="1.2 PostgreSQL"></a>1.2 PostgreSQL</h3><blockquote><p>For more information, check <a href="https://blog.csdn.net/nikeylee/article/details/117412832">https://blog.csdn.net/nikeylee/article/details/117412832</a>.</p><p>Saving your password somewhere is strongly recommended.</p></blockquote><h4 id="1-2-1-Download"><a href="#1-2-1-Download" class="headerlink" title="1.2.1 Download"></a>1.2.1 Download</h4><ul><li><p>Download <a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">PostgreSQL</a> to <code>E:\Database\PostgreSQL\</code></p></li><li><p>Download <a href="https://www.pgadmin.org/">pgAdmin</a> to <code>E:\Database\PostgreSQL\pgAdmin\</code></p><blockquote><p>Actually, pgAdmin is included in PostgreSQL installation, just located in <code>E:\Database\PostgreSQL\pgAdmin 4</code>. Download only if missing.</p></blockquote></li></ul><p>Install PostgreSQL, and remember the password of super user <code>postgres</code>. Other configurations could just be default. At last, you can choose not to launch Stack Builder. After this, you will see a start menu folder. (It doesn’t appear in Recommended.)</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106174655188.png" alt="image-20230106174655188" style="zoom:50%;"><blockquote><p>After installation, a <strong>restart</strong> is required, or the port won’t be available even if the service is running!</p></blockquote><h4 id="1-2-2-Start-Service"><a href="#1-2-2-Start-Service" class="headerlink" title="1.2.2 Start Service"></a>1.2.2 Start Service</h4><p>After installation and restart, the service should have started with the system. It is called <code>postgresql-x64-15</code> and you can check this in <code>services.msc</code>. Its status should be running.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106183515223.png" alt="image-20230106183515223" style="zoom: 50%;"><p>However, if PostgreSQL service does not start after restart, go to <code>E:\Database\PostgreSQL\bin</code> and use this command to start it.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_ctl start -D &quot;E:\Database\PostgreSQL\data&quot; -w</span><br></pre></td></tr></table></figure><p>If it succeeds, you will see the output below. (I wonder why it is Chinese…)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">等待服务器进程启动 ....2023-01-06 17:35:56.398 CST [21456] LOG:  redirecting log output to logging collector process</span><br><span class="line">2023-01-06 17:35:56.398 CST [21456] HINT:  Future log output will appear in directory &quot;log&quot;.</span><br><span class="line"> 完成</span><br><span class="line">服务器进程已经启动</span><br></pre></td></tr></table></figure><h4 id="1-2-3-Configure-Database"><a href="#1-2-3-Configure-Database" class="headerlink" title="1.2.3 Configure Database"></a>1.2.3 Configure Database</h4><blockquote><p>You can just select the same options as I do. It works.</p></blockquote><h5 id="1-2-3-1-Connect-Service"><a href="#1-2-3-1-Connect-Service" class="headerlink" title="1.2.3.1 Connect Service"></a>1.2.3.1 Connect Service</h5><p>Open SQLShell you got in [1.2.1](1.2.1 Download), a.k.a psql, you only need to enter the password (It is hidden like Linux). as for the other four, just press Enter and continue. After this, you are connected to the service.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106175105584.png" alt="image-20230106175105584" style="zoom: 67%;"><h5 id="1-2-3-2-Add-New-Server"><a href="#1-2-3-2-Add-New-Server" class="headerlink" title="1.2.3.2 Add New Server"></a>1.2.3.2 Add New Server</h5><p>Now, open pgAdmin 4 you got in 1.2.1. Here, you need a master password, and then, click <code>Add New Server</code> in the Dashboard to add a new one. You can just fill the first two, and neglect the others.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106180320641.png" alt="image-20230106180320641" style="zoom:50%;"><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106180410517.png" alt="image-20230106180410517" style="zoom:50%;"><blockquote><p>Kerberos is a security protocol for authentication. Just leave it alone. FYI: <a href="https://www.simplilearn.com/what-is-kerberos-article">What is Kerberos</a>.</p><p>PS: You can always get help with the question mark below.</p></blockquote><p>Then, click the data base you just added on the left. After entering your password, you are finally in the database!</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106184256242.png" alt="image-20230106184256242" style="zoom: 50%;"><blockquote><p>If there is anything wrong, please check if the [service](1.2.2 Start Service) is started or not.</p></blockquote><h5 id="1-2-3-3-Create-New-User"><a href="#1-2-3-3-Create-New-User" class="headerlink" title="1.2.3.3 Create New User"></a>1.2.3.3 Create New User</h5><p>On the left side, right click on <code>Login/Group Roles</code>, then create a new role.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106192317560.png" alt="image-20230106192317560" style="zoom: 67%;"><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106192453526.png" alt="image-20230106192453526" style="zoom:50%;"><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106192547931.png" alt="image-20230106192547931" style="zoom:50%;"><blockquote><p>Connection limit -1 means unlimited.</p></blockquote><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106192838026.png" alt="image-20230106192838026" style="zoom:50%;"><p>Now, click Save, and a new role is created.</p><h5 id="1-2-3-4-Create-New-Database"><a href="#1-2-3-4-Create-New-Database" class="headerlink" title="1.2.3.4 Create New Database"></a>1.2.3.4 Create New Database</h5><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106193922337.png" alt="image-20230106193922337" style="zoom: 67%;"><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106194029645.png" alt="image-20230106194029645" style="zoom: 50%;"><p>Now, we are all done, and your interface should look like this.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106194301749.png" alt="image-20230106194301749" style="zoom:50%;"><h3 id="1-3-JDK-11"><a href="#1-3-JDK-11" class="headerlink" title="1.3 JDK 11"></a>1.3 JDK 11</h3><blockquote><p>For more information, check <a href="https://blog.csdn.net/nikeylee/article/details/117410036">https://blog.csdn.net/nikeylee/article/details/117410036</a>.</p></blockquote><h4 id="1-3-1-Download-JDK-11"><a href="#1-3-1-Download-JDK-11" class="headerlink" title="1.3.1 Download JDK 11"></a>1.3.1 Download JDK 11</h4><ul><li>Download at <a href="https://www.oracle.com/java/technologies/downloads/#java11">https://www.oracle.com/java/technologies/downloads/#java11</a>. Oracle account required.</li></ul><p>Then, go to your installation directory, e.g. <code>Java\jdk-11</code>, run PowerShell as Administrator, and execute the command to download <code>jre</code>. You will see the folder after execution.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure><h4 id="1-3-2-Add-Environment-Variables"><a href="#1-3-2-Add-Environment-Variables" class="headerlink" title="1.3.2 Add Environment Variables"></a>1.3.2 Add Environment Variables</h4><blockquote><p>My jdk11 was installed at <code>E:\IDE\Java\jdk-11</code>. By default, it should be <code>C:\Program Files\Java\jdk-11.0.11</code>.  Replace it with your own.</p></blockquote><p>Add the following system entry.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME = E:\IDE\Java\jdk-11</span><br><span class="line">CLASSPATH = %JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106212524566.png" alt="image-20230106212524566" style="zoom:67%;"><p>Then, add these two to system Path.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><p>After these, you can check configuration by the following command.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106214241165.png" alt="image-20230106214241165" style="zoom:67%;"><hr><h2 id="Step-2-Configure-SonarQube"><a href="#Step-2-Configure-SonarQube" class="headerlink" title="Step.2 Configure SonarQube"></a>Step.2 Configure SonarQube</h2><h3 id="2-1-Add-Configuration-for-SonarQube"><a href="#2-1-Add-Configuration-for-SonarQube" class="headerlink" title="2.1 Add Configuration for SonarQube"></a>2.1 Add Configuration for SonarQube</h3><p>Open <code>Sonar\SonarQube\conf\sonar.properties</code>, add the following content. <code>SonarQube</code> should be the name of the database you created. Replace these with your own info.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Your database</span></span><br><span class="line"><span class="attr">sonar.jdbc.url</span>=<span class="string">jdbc:postgresql://127.0.0.1:5432/SonarQube?currentSchema=public</span></span><br><span class="line"><span class="comment"># Database user name</span></span><br><span class="line"><span class="attr">sonar.jdbc.username</span>=<span class="string">Sonar</span></span><br><span class="line"><span class="comment"># Database password</span></span><br><span class="line"><span class="attr">sonar.jdbc.password</span>=<span class="string">sonar</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Add-Configuration-for-SonarScanner"><a href="#2-2-Add-Configuration-for-SonarScanner" class="headerlink" title="2.2 Add Configuration for SonarScanner"></a>2.2 Add Configuration for SonarScanner</h3><p>Open <code>E:\Gadgets\Sonar\SonarScanner\conf\sonar-scanner.properties</code>, add the following content. Err… It seems that you just need to remove the comments.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----- Default SonarQube server</span></span><br><span class="line"><span class="attr">sonar.host.url</span>=<span class="string">http://localhost:9000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ----- Default source code encoding</span></span><br><span class="line"><span class="attr">sonar.sourceEncoding</span>=<span class="string">UTF-8</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Add-Configuration-for-Java-Project"><a href="#2-3-Add-Configuration-for-Java-Project" class="headerlink" title="2.3 Add Configuration for Java Project"></a>2.3 Add Configuration for Java Project</h3><p>Now, we finally get a chance to see our Java project.</p><p>In your project directory, add new file <code>sonar-project.properties</code>.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106200023186.png" alt="image-20230106200023186" style="zoom:67%;"><p>Then fill it with the following stuffs.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># must be unique in a given SonarQube instance</span></span><br><span class="line"><span class="attr">sonar.projectKey</span>=<span class="string">myscs-4</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"># this is the name displayed in the SonarQube UI</span></span><br><span class="line"><span class="attr">sonar.projectName</span>=<span class="string">myscs-4</span></span><br><span class="line"><span class="attr">sonar.projectVersion</span>=<span class="string">0.1.0</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"># Path is relative to the sonar-project.properties file</span></span><br><span class="line"><span class="comment"># Replace &quot;\&quot; by &quot;/&quot; on Windows</span></span><br><span class="line"><span class="comment"># If not set, SonarQube starts looking for source code from the</span></span><br><span class="line"><span class="comment">#   directory containing sonar-project.properties file</span></span><br><span class="line"><span class="attr">sonar.sources</span>=<span class="string">src</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"># Path for classes</span></span><br><span class="line"><span class="attr">sonar.java.binaries</span>=<span class="string">out/production/scs-4</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">sonar.language</span>=<span class="string">java</span></span><br><span class="line"><span class="attr">sonar.sourceEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Database username and password</span></span><br><span class="line"><span class="attr">sonar.login</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">sonar.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure><p>Now, you can assume that you successfully configured SonarQube.</p><h2 id="Step-3-Launch-SonarQube"><a href="#Step-3-Launch-SonarQube" class="headerlink" title="Step.3 Launch SonarQube!"></a>Step.3 Launch SonarQube!</h2><p style="text-align:center"><i>" Punch it! "</i></p><h3 id="3-1-Start-SonarQube"><a href="#3-1-Start-SonarQube" class="headerlink" title="3.1 Start SonarQube"></a>3.1 Start SonarQube</h3><p>Go to <code>SonarQube\bin\windows-x86-64\</code>, and double-click <code>StartSonar.bat</code>. Or, if you want to see the output clearly, you can run it in a command prompt. Administrator privilege is required.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106213743197.png" alt="image-20230106213743197" style="zoom:67%;"><p>If every thing goes well, you can see this.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106213605711.png" alt="image-20230106213605711" style="zoom:50%;"><p><strong>Operational!</strong> Isn’t it exciting?</p><h4 id="Troubleshoot"><a href="#Troubleshoot" class="headerlink" title="Troubleshoot"></a>Troubleshoot</h4><p>You may not start it at the first time. Check log info in <code>SonarQube\data\log\</code> for more information. Commonly found errors are as follows.</p><ul><li><p>JDK 11 configuration incorrect. <strong>Must</strong> be JDK 11. See <em>1.3 JDK 11</em>. This can be seen in log file.</p></li><li><p>SonarQube configuration file incorrect. Case sensitive!</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106214633701.png" alt="image-20230106214633701" style="zoom:50%;"></li></ul><p>For now, these are all that I encountered.</p><h3 id="3-2-Visit-SonarQube"><a href="#3-2-Visit-SonarQube" class="headerlink" title="3.2 Visit SonarQube"></a>3.2 Visit SonarQube</h3><p>Now, you can visit SonarQube local server at <a href="http://localhost:9000/">http://localhost:9000</a>. Default username and password are both <code>admin</code>. </p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106215128569.png" alt="image-20230106215128569" style="zoom:33%;"><p>Then, you are forced to change password. After that, you are in and ready for analysis.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106215038839.png" alt="image-20230106215038839" style="zoom:33%;"><h2 id="Step-4-Analysis-Java-Project"><a href="#Step-4-Analysis-Java-Project" class="headerlink" title="Step.4 Analysis Java Project"></a>Step.4 Analysis Java Project</h2><h3 id="4-1-Run-SonarScanner"><a href="#4-1-Run-SonarScanner" class="headerlink" title="4.1 Run SonarScanner"></a>4.1 Run SonarScanner</h3><p>At first, you can check your <code>sonar-scanner</code> version at any directory. If there’s any problem, you probably forget to add SonarScanner to environment. Go back and check <em>1.1 SonarQube &amp; SonarScanner</em>. </p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106215849968.png" alt="image-20230106215849968" style="zoom: 67%;"><p>Once you want do the analysis, go to your Java project directory, in other words, the directory of your <code>sonar-project.property</code> file. If you don’t have this, go back to <em>2.3 Add Configuration for Java Project</em>. Here, you should pay attention to these two properties.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106220443366.png" alt="image-20230106220443366" style="zoom:80%;"><blockquote><p><code>sonar.login</code> and <code>sonar.password</code> are the username and password of SonarQube website, which is assigned in [3.2 Visit SonarQube](3.2 Visit SonarQube). If wrong, it will show</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106220711198.png" alt="image-20230106220711198" style="zoom:80%;"></blockquote><p>However, in later version, <code>sonar.password</code> is deprecated. It is preferred to use a token as <code>sonar.login</code> instead. You can generate a token for your project in your local SonarQube server.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230107112336334.png" alt="image-20230107112336334" style="zoom:50%;"><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230107112326647.png" alt="image-20230107112326647" style="zoom:50%;"><p>After generation, you’ll get a token, and you can use it as <code>sonar.login</code> parameter. Remember it, or you may not find it any where, any more. :(</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230107111832024.png" alt="image-20230107111832024" style="zoom:67%;"><p>Now, simply enter <code>sonar-scanner</code> and Enter, then it will start scan. On success, you can see the following output, and your result will be stored at, err, I circled it.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106221135563.png" alt="image-20230106221135563" style="zoom:50%;"><h3 id="4-2-Review-Results"><a href="#4-2-Review-Results" class="headerlink" title="4.2 Review Results"></a>4.2 Review Results</h3><p>You can find your analysis in Projects page. Oh, so may bugs.</p><img src="/posts/Analyze-Java-with-SonarQube-and-SonarScanner/image-20230106221238535.png" alt="image-20230106221238535" style="zoom:50%;"><p>So, I guess, this is it, huh? See you later then! :)</p>]]></content>
      
      
      <categories>
          
          <category> Tools &amp; Utilities </category>
          
          <category> Analysis Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dungeon</title>
      <link href="/posts/Dungeon/"/>
      <url>/posts/Dungeon/</url>
      
        <content type="html"><![CDATA[<h1 id="Dungeon"><a href="#Dungeon" class="headerlink" title="Dungeon"></a>Dungeon</h1><p>Copyright © New Desire Studios 2022 - 2023</p><hr><h2 id="1-Project-Introduction"><a href="#1-Project-Introduction" class="headerlink" title="1. Project Introduction"></a>1. Project Introduction</h2><p>Years ago, I quite like mobile game Soul Knight, and hoped to make a similar one. Recently, I happened to learn some basic design patterns, so I wish this could be my first practice. Before, I did make some games, but they were all small, and poor management can do the job. So this time, I’d also want to create a simple frame for game development, that is to say, a game engine, which could provide more flexibility and expansibility.</p><p>Visit <a href="https://old.tonys-studio.top/project/dungeon.html">Dungeon</a> for more information!</p><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><ul><li><a href="https://tonys-studio-1308383348.cos.ap-beijing.myqcloud.com/blog/file/dungeon/Dungeon-Setup.exe" target="_blank">Dungeon-Setup.exe</a></li><li><a href="https://tonys-studio-1308383348.cos.ap-beijing.myqcloud.com/blog/file/dungeon/Dungeon-Portable.zip" target="_blank">Dungeon-Portable.zip</a></li></ul><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><ul><li>Star Dungeon on <a href="https://github.com/Lord-Turmoil/Dungeon">Github</a>!</li><li>Star Dungeon on <a href="https://gitee.com/tonys-studio/dungeon">Gitee</a>!</li></ul><h3 id="Screenshots"><a href="#Screenshots" class="headerlink" title="Screenshots"></a>Screenshots</h3><img src="/posts/Dungeon/capture-1.png" alt="capture-1" style="zoom: 33%;"><img src="/posts/Dungeon/capture-2.png" alt="capture-2" style="zoom: 33%;"><h2 id="2-Building-Dungeon"><a href="#2-Building-Dungeon" class="headerlink" title="2. Building Dungeon"></a>2. Building Dungeon</h2><p>There are three projects in this Visual Studio solution: Dungeon, Dungine and TinyXML2. <a href="https://github.com/leethomason/tinyxml2">TinyXML2</a> is a great XML parser so I use this to pack it into a static library. And Dungine is the so callled game engine. Just simply build the solution is OK. Dungeon is the start up project, and Release configuration will output the executable to <code>Publish\</code> directory, while Debug configuration will output to <code>Build\dist\Debug\</code>. All macros for debug are disabled.</p><blockquote><p>Since the resource files is mutable, and is mainly used for debug purpose during coding, I removed them from the source file folder.</p><p>If your want to compile and run it in IDE, please download the latest binary release file at either of these places.</p><ul><li><p><a href="http://tonys-studio.top:82/project/dungeon.html">Release Page</a></p></li><li><p><a href="/posts/Dungeon/">My Blog</a></p></li></ul><p>Then, copy the <code>res</code> folder to the root directory of the game project <code>Dungeon</code>. (Which contains <code>Dungeon.vcxproj</code>.)</p></blockquote><h3 id="Build-Environment"><a href="#Build-Environment" class="headerlink" title="Build Environment"></a>Build Environment</h3><ul><li>Windows 11 Pro</li><li>Visual Studio 2022 Community</li><li><a href="https://easyx.cn/">EasyX 20220901</a></li><li><a href="https://fmod.com/">FMOD 0.2.2.7</a></li></ul><p>Notice that in EasyX 20220901, prefix for message changed from <code>EM</code> to <code>EX</code>. If you want to keep outdated features, please include <code>&lt;graphics.h&gt;</code> in your code.</p><h2 id="3-How-Does-Dungeon-Work"><a href="#3-How-Does-Dungeon-Work" class="headerlink" title="3. How Does Dungeon Work"></a>3. How Does Dungeon Work</h2><p>The game contains the game engine Dungine (Dungeon Engine) and the game Dungeon itself. It is developed with <a href="https://easyx.cn/">EasyX</a> for graphics and <a href="https://fmod.com/">FMOD</a> for audio. Also, tinyxml2 as mentioned before.</p><h3 id="3-1-Dungine"><a href="#3-1-Dungine" class="headerlink" title="3.1 Dungine"></a>3.1 Dungine</h3><p>This is the game engine, including basic classes, encapsulations and a simple UI library. It was build with ECS pattern. </p><h4 id="3-1-1-Game-Object"><a href="#3-1-1-Game-Object" class="headerlink" title="3.1.1 Game Object"></a>3.1.1 Game Object</h4><p>The core of a game frame is to manage all objects. For common objects in game, including characters, weapons, bullets, etc., I used Factory Pattern and Prototype Pattern to create them, and Component Pattern to add properties and behaviors.</p><h4 id="3-1-2-Scene"><a href="#3-1-2-Scene" class="headerlink" title="3.1.2 Scene"></a>3.1.2 Scene</h4><p>Scene manages all game objects. It maintains a object pool, just a pool, no reuse things. One important thing is that adding or removing objects during scene update should be postponed till update finishes.</p><h4 id="3-1-3-Graphics-and-Audio"><a href="#3-1-3-Graphics-and-Audio" class="headerlink" title="3.1.3 Graphics and Audio"></a>3.1.3 Graphics and Audio</h4><p>For graphics, the one and only thing to render is a <code>Symbol</code>, it includes position, layer, rotation angle, scale and alpha info, and is rendered in order of layer and position.</p><p>For audio, I used FMOD, and there are two types of sound. Effect, e.g. click and fire. The other is background music.</p><h4 id="3-1-4-Resource-Management"><a href="#3-1-4-Resource-Management" class="headerlink" title="3.1.4 Resource Management"></a>3.1.4 Resource Management</h4><p>Well, the resource management is not advanced, I made it up without reference.</p><p>When the program starts, it reads all reference of resource in a XML file, and only load it when required. Then, like smart pointer, it will release it if reference count is zero. There are image, audio, and motion resource. Motion resource is sprite sheet for animation.</p><h4 id="3-1-5-UI"><a href="#3-1-5-UI" class="headerlink" title="3.1.5 UI"></a>3.1.5 UI</h4><p>In version 0.1.0, I was inspired by <a href="https://codebus.cn/contributor/zhurong-easyui">EasyUI</a>. Now, with more consideration, I refactored that, and added more fancy features. However, the basic thing is still, a widget contains drawer and trigger.</p><p>All UI widgets are preferred to be loaded from external XML file, including both absolute and relative positioning, and can also adapt to screen size automatically. Besides, there are some animation effects available, like translation, scaling and alpha change. In version 1.1.0, I introduced animation drawer to support animation widget.</p><p>There is one problem that widgets with animation drawer could not be assigned scaling animation, since animation drawer scales itself to adapt to screen size.</p><p>Interface is the carrier of all events, and is managed by Application, the largest class of all, and the entrance of the program.</p><h4 id="3-1-6-Trivia"><a href="#3-1-6-Trivia" class="headerlink" title="3.1.6 Trivia"></a>3.1.6 Trivia</h4><p>Apart from primary objectives, it provides some other convenient tools, such as XML parse with TinyXML2, some vector calculations, <a href="https://codebus.cn/sunxiaoyu/quadtree-collision">Quadruple Tree</a>, etc. And some base class for design pattern. Here, Factory Pattern is combined with Prototype to be a Library, so, just get what you want directly from a library.</p><h3 id="3-2-Dungeon"><a href="#3-2-Dungeon" class="headerlink" title="3.2 Dungeon"></a>3.2 Dungeon</h3><p>Well, this part is the actual game logic based on Dungine. The main stuff it does is to concrete game procedure, terrain, objects, and interfaces.</p><h4 id="3-2-1-Walkthrough"><a href="#3-2-1-Walkthrough" class="headerlink" title="3.2.1 Walkthrough"></a>3.2.1 Walkthrough</h4><p><code>Dungeon</code> is the core of the game, derived from <code>Scene</code>. It initialize resources, call terrain generation, and manage some special objects with special behaviors.</p><h4 id="3-2-2-Terrain"><a href="#3-2-2-Terrain" class="headerlink" title="3.2.2 Terrain"></a>3.2.2 Terrain</h4><p>Terrain is one of the most complicated part of the game. It use random Prim algorithm to generate a maze in a 3 * 3 graph. Then it implements the real map based on this plain graph, turning nodes into Arenas, and edges into Bridges.</p><p>Besides, it provides A* algorithm for path finding, and a blank area finding algorihtm.</p><h4 id="3-2-3-Property-and-Behavior"><a href="#3-2-3-Property-and-Behavior" class="headerlink" title="3.2.3 Property and Behavior"></a>3.2.3 Property and Behavior</h4><p>All these are added by component. For example, there are <code>RigidBodyComponent</code>, <code>ColliderBoxComponent</code> for collision, <code>MoveComponent</code> for movement, and <code>AnimComponent</code> for rendering. For interaction and ‘AI’, there is <code>BehaviorComponent</code>, which really reduced dependency of objects.</p><h4 id="3-2-4-Interface"><a href="#3-2-4-Interface" class="headerlink" title="3.2.4 Interface"></a>3.2.4 Interface</h4><p>Interface is where every event takes place, and each of them is an specific class. Interface layout is provided by XML file, but events has to be hooked by hard coding.</p><h4 id="3-2-5-Flexibility"><a href="#3-2-5-Flexibility" class="headerlink" title="3.2.5 Flexibility"></a>3.2.5 Flexibility</h4><p>Most of the game data are loaded from external XML file, so you can easily modify the game without re-compile it. For example, change character properties, add new image or audio, even new character and weapon!</p><h2 id="4-Epilogue"><a href="#4-Epilogue" class="headerlink" title="4. Epilogue"></a>4. Epilogue</h2><p>Almost all image were drawn by myself, some of them were collected from the internet, but made my own modification. In-game sound track comes from the game Undertale, the other were created by my mother.</p><p>I created every character and weapon with personal attachments, so it was never balanced, some weapons are extremely powerful, while others may be a little… weak.</p><p>Thanks for your playing!</p>]]></content>
      
      
      <categories>
          
          <category> Game &amp; Hobby </category>
          
          <category> Personal Projects </category>
          
          <category> Game Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Repo Available </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Game </tag>
            
            <tag> EasyX </tag>
            
            <tag> FMOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inter-Thread Communication</title>
      <link href="/posts/Inter-Thread-Communication/"/>
      <url>/posts/Inter-Thread-Communication/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Eight-Inter-Thread-Communication"><a href="#Chapter-Eight-Inter-Thread-Communication" class="headerlink" title="Chapter Eight - Inter Thread Communication"></a>Chapter Eight - Inter Thread Communication</h1><h2 id="8-1-Meet-Thread"><a href="#8-1-Meet-Thread" class="headerlink" title="8.1 Meet Thread"></a>8.1 Meet Thread</h2><h3 id="8-1-1-What-Is-Thread"><a href="#8-1-1-What-Is-Thread" class="headerlink" title="8.1.1 What Is Thread?"></a>8.1.1 What Is Thread?</h3><blockquote><p>线程是在共享内存空间中并发的多道执行路径，它们<strong>共享一个进程的资源</strong>。</p><p>Linux 线程属于用户级线程，即线程的调度是在用户空间执行的。Linux 线程遵循 POSIX 线程接口，称为<code>pthread</code>，在其他平台也有对应的实现.。</p><p>线程是最小的<strong>调度单位</strong>，进程是最小的<strong>资源分配单位</strong>。</p></blockquote><h3 id="8-1-2-Concurrency-and-Parallelism"><a href="#8-1-2-Concurrency-and-Parallelism" class="headerlink" title="8.1.2 Concurrency and Parallelism"></a>8.1.2 Concurrency and Parallelism</h3><blockquote><p><strong>Concurrency</strong>: 并发是指在一段时间<strong>宏观</strong>上有多个程序在同时运行，但在单处理机系统中，每一时刻却仅能只有一道程序在执行，故<strong>微观</strong>上这些程序只能是<strong>分时交替执行</strong>。</p><p><strong>Parallelism</strong>: 并行的确是多个程序<strong>同时</strong>运行。比如一个“6 核 6 线程”的芯片，那他就支持 6 个线程并行（1个核心对应1个线程）。而<strong>超线程</strong>技术可以做到线程属大于核心数，比如“4 核 8 线程”。</p></blockquote><h3 id="8-1-3-Get-Ready-for-Thread"><a href="#8-1-3-Get-Ready-for-Thread" class="headerlink" title="8.1.3 Get Ready for Thread"></a>8.1.3 Get Ready for Thread</h3><blockquote><p>To play with thread, you need <code>pthread.h</code>. And when you do the linking, you have to link <code>libpthread</code> manually.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc thread.c -lpthread -o thread</span><br></pre></td></tr></table></figure></blockquote><h2 id="8-2-Play-with-Thread"><a href="#8-2-Play-with-Thread" class="headerlink" title="8.2 Play with Thread"></a>8.2 Play with Thread</h2><h3 id="8-2-1-Create-Thread"><a href="#8-2-1-Create-Thread" class="headerlink" title="8.2.1 Create Thread"></a>8.2.1 Create Thread</h3><blockquote><p>It is easy to create a thread. And thread task has a fixed form. Once called, the thread will start directly on success.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr,</span></span><br><span class="line"><span class="params">                   <span class="type">void</span> *(*start_routine)(<span class="type">void</span> *arg),</span></span><br><span class="line"><span class="params">                   <span class="type">void</span> *arg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">task</span><span class="params">(<span class="type">void</span> *arg)</span>;<span class="comment">// thread task form</span></span><br></pre></td></tr></table></figure><p>Usually, if no arguments, we can just write like this. If we have arguments, similar to function arguments, it should better not be a local variable, which might be destroyed unintentionally. Use <code>malloc</code> or global variables instead.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_create(&amp;thread, <span class="literal">NULL</span>, task, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>A thread has thread id, too. We can get it by <code>pthread_self()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_self</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="8-2-2-Exit-Thread"><a href="#8-2-2-Exit-Thread" class="headerlink" title="8.2.2 Exit Thread"></a>8.2.2 Exit Thread</h3><blockquote><p>A thread is not a process, who can only return integer. It can return various values. So <code>void*</code> is the best choice, and we do not afraid of it at all!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pthread_exit</span><span class="params">(<span class="type">void</span> *status)</span>;</span><br></pre></td></tr></table></figure><p>Here, the same thing. Do not return a local variable’s address. Either use <code>malloc</code> or global variable.</p></blockquote><h3 id="8-2-3-Wait-for-Thread"><a href="#8-2-3-Wait-for-Thread" class="headerlink" title="8.2.3 Wait for Thread"></a>8.2.3 Wait for Thread</h3><blockquote><p>Well, A parent thread may want to wait for a child thread, and get its return value. Here, we can use <code>pthread_wait()</code>. This will stops current thread until the desired thread exits.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br></pre></td></tr></table></figure><p>The return value of a thread is <code>void*</code>, so we get it by <code>void**</code>. Now, you may wonder, if a thread has already exited before <code>pthread_join()</code> is called, where would <code>status</code> be stored? Well, when a thread exits, it won’t be cleaned up, ya know, just like what is in process. But again, return value must not be a local variable.</p></blockquote><h3 id="8-2-3-Detach-Thread"><a href="#8-2-3-Detach-Thread" class="headerlink" title="8.2.3 Detach Thread"></a>8.2.3 Detach Thread</h3><blockquote><p>If we do not want to wait and manage a thread, we can simply detach it. But once detached, it can never be retrieved, and will not be able to get its return value.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure></blockquote><h2 id="8-3-Synchronization-and-Mutual-Exclusion"><a href="#8-3-Synchronization-and-Mutual-Exclusion" class="headerlink" title="8.3 Synchronization and Mutual Exclusion"></a>8.3 Synchronization and Mutual Exclusion</h2><blockquote><p>For threads, synchronization and mutual exclusion are still big problems. Here, we got three ways to deal with them, <strong>semaphore</strong>, <strong>mutex</strong> and <strong>condition variable</strong>.</p></blockquote><h3 id="8-3-1-Semaphore"><a href="#8-3-1-Semaphore" class="headerlink" title="8.3.1 Semaphore"></a>8.3.1 Semaphore</h3><blockquote><p>We’ve met semaphore before. Here, it is basically the same, but much more convenient. it requires <code>semaphore.h</code>. These functions all have regular return behavior.</p></blockquote><h4 id="8-3-1-1-Initialize-Semaphore"><a href="#8-3-1-1-Initialize-Semaphore" class="headerlink" title="8.3.1.1 Initialize Semaphore"></a>8.3.1.1 Initialize Semaphore</h4><blockquote><p>Unlike what we’ve done in process, it is much easier to create semaphore among threads, just a global variable to make it visible to all threads using it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sem_init</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">int</span> pshared, <span class="type">unsigned</span> <span class="type">int</span> value)</span>;</span><br></pre></td></tr></table></figure><p><code>pshared</code> is usually 0. If not, it means the semaphore is shared among processes, and must be stored in shared memory. For now, leave it 0.</p><p><code>value</code> is still the value, huh. 0 for synchronization and 1 or more for mutual exclusion.</p></blockquote><h4 id="8-3-1-2-P-V-Operation"><a href="#8-3-1-2-P-V-Operation" class="headerlink" title="8.3.1.2 P&#x2F;V Operation"></a>8.3.1.2 P&#x2F;V Operation</h4><blockquote><p>Well, just what semaphore functions, huh? Here, these two are already wrapped for us.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;<span class="comment">// P operation</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;<span class="comment">// V operation</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="8-3-1-3-Destroy-Semaphore"><a href="#8-3-1-3-Destroy-Semaphore" class="headerlink" title="8.3.1.3 Destroy Semaphore"></a>8.3.1.3 Destroy Semaphore</h4><blockquote><p>It’s a good habit to recycle things.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sem_destroy</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="8-3-2-Mutex"><a href="#8-3-2-Mutex" class="headerlink" title="8.3.2 Mutex"></a>8.3.2 Mutex</h3><blockquote><p>Mutex, mutex, mutex, mut… ex…, mutual exclusion?! Seriously?</p><p>Code area locked by mutex can only be accessed by one thread at a time.</p></blockquote><h4 id="8-3-2-1-Initialize-Mutex"><a href="#8-3-2-1-Initialize-Mutex" class="headerlink" title="8.3.2.1 Initialize Mutex"></a>8.3.2.1 Initialize Mutex</h4><blockquote><p>Usually, we can leave <code>mutexattr</code> as <code>NULL</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *mutexattr)</span>;</span><br></pre></td></tr></table></figure><p>Well, there is something about <code>mutexattr</code>.</p><table><thead><tr><th align="center"><code>mutexattr</code></th><th align="left">meaning</th></tr></thead><tbody><tr><td align="center"><code>PTHREAD_MUTEX_TIMED_NP</code></td><td align="left">缺省值，即普通锁。当一个线程加锁以后，其余请求锁的线程将形成一个等待队列，并在解锁后按优先级获得锁，这种锁策略保证了资源分配的公平性。</td></tr><tr><td align="center"><code>PTHREAD_MUTEX_RECURSIVE_NP</code></td><td align="left">嵌套锁，允许同线程内对同一个锁加锁多次，记录加锁次数，并允许通过多次 <code>unlock</code> 解锁。如果是不同线程请求，则在加锁线程解锁时重新竞争。</td></tr><tr><td align="center"><code>PTHREAD_MUTEX_ERRORCHECK_NP</code></td><td align="left">检错锁，禁止同线程内对同一个锁加锁多次，如果同一个线程请求同一个锁，则返回 <code>EDEADLK</code>，否则与<code>PTHREAD_MUTEX_TIMED_NP</code> 类型动作相同。这样就保证当不允许多次加锁时不会出现最简单情况下的死锁。</td></tr><tr><td align="center"><code>PTHREAD_MUTEX_ADAPTIVE_NP</code></td><td align="left">适应锁，效率更高，等同于多次 <code>trylock()</code> + <code>PTHREAD_MUTEX_TIMED_NP</code>。</td></tr></tbody></table><p>If mutex is static, we can use a macro to initialize it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8-3-2-2-Use-Mutex"><a href="#8-3-2-2-Use-Mutex" class="headerlink" title="8.3.2.2 Use Mutex"></a>8.3.2.2 Use Mutex</h4><blockquote><p>Well, mutex is like a lock, all threads compete to lock the mutex, and only one can succeed. When unlocked, another competition starts.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8-3-2-3-Destroy-Mutex"><a href="#8-3-2-3-Destroy-Mutex" class="headerlink" title="8.3.2.3 Destroy Mutex"></a>8.3.2.3 Destroy Mutex</h4><blockquote><p>Mutex should be destroyed after use.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8-3-2-4-More-Mutex"><a href="#8-3-2-4-More-Mutex" class="headerlink" title="8.3.2.4 More Mutex"></a>8.3.2.4 More Mutex</h4><blockquote><p>There are many types of mutex, like spin lock, try lock, whatever… Just similar, but have different application and efficiency. For example, spin lock can be used to guard small region.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_init</span><span class="params">(<span class="type">pthread_spinlock_t</span> *spinlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_lock</span><span class="params">(<span class="type">pthread_spinlock_t</span> *spinlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_unlock</span><span class="params">(<span class="type">pthread_spinlock_t</span> *spinlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_spin_destroy</span><span class="params">(<span class="type">pthread_spinlock_t</span> *spinlock)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8-3-2-5-Mutex-vs-Semaphore"><a href="#8-3-2-5-Mutex-vs-Semaphore" class="headerlink" title="8.3.2.5 Mutex vs Semaphore"></a>8.3.2.5 Mutex vs Semaphore</h4><blockquote><p>It seems that semaphore can do what mutex does? So what’s the difference?</p><ol><li>Semaphore can also be used for synchronization, while mutex can only be used for mutual exclusion.</li><li>Mutex can only be 0 or 1, while semaphore can be non-negative.</li></ol></blockquote><h3 id="8-2-3-Condition-Variable"><a href="#8-2-3-Condition-Variable" class="headerlink" title="8.2.3 Condition Variable"></a>8.2.3 Condition Variable</h3><blockquote><p>Unlike mutex, condition variable is used to wait, instead of lock. It is used to block a thread automatically, and wait until certain condition is met. However, it needs the help of mutex to do this. Still, these functions have regular return behavior.</p></blockquote><h4 id="8-2-3-1-Initialize-Condition-Variable"><a href="#8-2-3-1-Initialize-Condition-Variable" class="headerlink" title="8.2.3.1 Initialize Condition Variable"></a>8.2.3.1 Initialize Condition Variable</h4><blockquote><p>Well, still not that difficult to use condition variable. Since it needs the help of mutex, there should also be a mutex be initialized, too.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">const</span> <span class="type">pthread_condattr_t</span> *attr)</span>;</span><br></pre></td></tr></table></figure><p>Similarly, if a condition variable is static, we can initialize it by a macro, too.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8-2-3-2-Wait-for-Condition"><a href="#8-2-3-2-Wait-for-Condition" class="headerlink" title="8.2.3.2 Wait for Condition"></a>8.2.3.2 Wait for Condition</h4><blockquote><p>Condition variable is tend to wait, so just wait? It can only wait when current thread holds the mutex. Then, it will hang current thread up, and unlock the mutex for other threads to run. If condition is met, and mutex is unlocked again by other threads, it still needs to compete over the mutex.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *cond, <span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="8-2-3-3-Break-Condition"><a href="#8-2-3-3-Break-Condition" class="headerlink" title="8.2.3.3 Break Condition"></a>8.2.3.3 Break Condition</h4><blockquote><p>Once a thread is put to wait for a condition, it needs other threads to wake it up by breaking the condition. Hmm… Just call them? Give them a signal? Or broadcast the big news?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;  <span class="comment">// wake up at least one</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>; <span class="comment">// wake up all</span></span><br></pre></td></tr></table></figure></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inter-Process Communication</title>
      <link href="/posts/Inter-Process-Communication/"/>
      <url>/posts/Inter-Process-Communication/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Seven-Inter-Process-Communication"><a href="#Chapter-Seven-Inter-Process-Communication" class="headerlink" title="Chapter Seven - Inter Process Communication"></a>Chapter Seven - Inter Process Communication</h1><blockquote><p>This is where the fun begins. There are several ways to communicate between two, or more processes.</p><table><thead><tr><th align="center">IPC</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">Pipe</td><td align="center">The most simple one, but not that powerful.</td></tr><tr><td align="center">Signal</td><td align="center">This is simple, too, but not enough information.</td></tr><tr><td align="center">Semaphore</td><td align="center">Sync or mutual exclusion method for inter-process, or inter-thread communication.</td></tr><tr><td align="center">Message Queue</td><td align="center">a.k.a. 消息队列, including POSIX one and System V one.</td></tr><tr><td align="center">Shared Memory</td><td align="center">Share common memory with other processes, the fastest IPC method.</td></tr><tr><td align="center">Socket</td><td align="center">More general, can be used between different computer.</td></tr></tbody></table></blockquote><h2 id="7-1-Pipe"><a href="#7-1-Pipe" class="headerlink" title="7.1 Pipe"></a>7.1 Pipe</h2><blockquote><p>Pipe is the basic method for two processes to communicate with each other. Anonymous pipe can only be used between parent and child, though.</p><p>An anonymous pipe can be created with <code>pipe()</code>, <code>pipe[0]</code> is in and <code>pipe[1]</code> is out. Parent closes <code>pipe[0]</code> and output to <code>pipe[1]</code>, while child read in from <code>pipe[0]</code> and closes <code>pipe[1]</code>. <code>pipe()</code> should be called before <code>fork()</code> and <code>fork()</code> will duplicate file description at the same time.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipe[<span class="number">2</span>])</span>;</span><br></pre></td></tr></table></figure><p>Here is a comprehensive example for pipe, all error checks were removed. Err… Eratosthenes sieve for prime numbers. For more information, check this out: <a href="https://swtch.com/~rsc/thread/">https://swtch.com/~rsc/thread/</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sieve</span><span class="params">(<span class="type">int</span> oldfd[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = atoi(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];</span><br><span class="line">pipe(fd);</span><br><span class="line"><span class="keyword">if</span> (fork() &gt; <span class="number">0</span>)               <span class="comment">// the root!</span></span><br><span class="line">&#123;</span><br><span class="line">close(fd[<span class="number">0</span>]);   <span class="comment">// close in</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">write(fd[<span class="number">1</span>], &amp;i, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">close(fd[<span class="number">1</span>]);   <span class="comment">// close out, or the child won&#x27;t stop reading</span></span><br><span class="line">waitpid(ret, <span class="literal">NULL</span>, <span class="number">0</span>);          <span class="comment">// wait for its child</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sieve(fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sieve</span><span class="params">(<span class="type">int</span> oldfd[])</span></span><br><span class="line">&#123;</span><br><span class="line">close(oldfd[<span class="number">1</span>]);        <span class="comment">// close old write</span></span><br><span class="line"><span class="type">int</span> prime;</span><br><span class="line">   <span class="comment">// Read one first, to check if it&#x27;s neccessary to</span></span><br><span class="line"><span class="comment">// create a new process.</span></span><br><span class="line"><span class="keyword">if</span> (read(oldfd[<span class="number">0</span>], &amp;prime, <span class="keyword">sizeof</span>(<span class="type">int</span>)) == <span class="number">0</span>)   <span class="comment">// nothing to read...</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> fd[<span class="number">2</span>];                      <span class="comment">// new fd</span></span><br><span class="line">pipe(fd);</span><br><span class="line"><span class="keyword">if</span> (fork() &gt; <span class="number">0</span>)               <span class="comment">// parent</span></span><br><span class="line">&#123;</span><br><span class="line">close(fd[<span class="number">0</span>]);<span class="comment">// close new in as parent</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, prime); <span class="comment">// print prime</span></span><br><span class="line"><span class="comment">// read from old</span></span><br><span class="line"><span class="keyword">while</span> (read(oldfd[<span class="number">0</span>], &amp;num, <span class="keyword">sizeof</span>(<span class="type">int</span>)) == <span class="keyword">sizeof</span>(<span class="type">int</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num % prime != <span class="number">0</span>)</span><br><span class="line">write(fd[<span class="number">1</span>], &amp;num, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line">close(fd[<span class="number">1</span>]);</span><br><span class="line">waitpid(ret, <span class="literal">NULL</span>, <span class="number">0</span>);  <span class="comment">// wait for its child</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>    <span class="comment">// child</span></span><br><span class="line">sieve(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="7-2-Signal"><a href="#7-2-Signal" class="headerlink" title="7.2 Signal"></a>7.2 Signal</h2><h3 id="7-2-1-Meet-Signal"><a href="#7-2-1-Meet-Signal" class="headerlink" title="7.2.1 Meet Signal"></a>7.2.1 Meet Signal</h3><h4 id="7-2-1-1-What-Is-Signal"><a href="#7-2-1-1-What-Is-Signal" class="headerlink" title="7.2.1.1 What Is Signal?"></a>7.2.1.1 What Is Signal?</h4><blockquote><p>Signal: 信号是 Linux 操作系统中进程之间一种通信方式，信号传递一种<strong>信息</strong>，接收方根据该信息进行相应的<strong>动作</strong>，可用于控制信息的传递，本质是一种<strong>软中断</strong>。e.g. 当发生某种情况时通知进程进行处理。</p><p>Signal can be raised by the process itself or come from outside.</p></blockquote><h4 id="7-2-1-2-Purpose-of-Signal"><a href="#7-2-1-2-Purpose-of-Signal" class="headerlink" title="7.2.1.2 Purpose of Signal"></a>7.2.1.2 Purpose of Signal</h4><blockquote><ol><li>让进程知道发生了某种事件；</li><li>据该事件执行相应的动作即执行它自己代码中的信号处理程序。</li></ol></blockquote><h4 id="7-2-1-3-Types-of-Signal"><a href="#7-2-1-3-Types-of-Signal" class="headerlink" title="7.2.1.3 Types of Signal"></a>7.2.1.3 Types of Signal</h4><blockquote><p>Signals are defined in <code>signal.h</code> and can be listed out by <code>kill -l</code> command. Usually begin with <code>SIG</code> and are all macros.</p></blockquote><h4 id="7-2-1-4-Source-of-Signal"><a href="#7-2-1-4-Source-of-Signal" class="headerlink" title="7.2.1.4 Source of Signal"></a>7.2.1.4 Source of Signal</h4><blockquote><p>Signals all come from kernel, and we just ask kernel to generate or send it for us. And such requests can come in three ways:</p><ol><li>user: <code>Ctrl-C</code>, <code>Ctrl-\</code>, etc.</li><li>kernel: when error encountered, or to notice certain process, e.g. Segmentation Fault (<code>SIGSEGV</code>), Alarm time up (<code>SIGALRM</code>).</li><li>process: call system function <code>kill</code> to send a signal.</li></ol><p>User can send signal to a process by keyboard.</p><table><thead><tr><th align="center">keyboard</th><th align="center">signal</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center"><code>Ctrl-C</code></td><td align="center"><code>SIGINT</code></td><td align="center">interrupt, to terminate the process by defualt</td></tr><tr><td align="center"><code>Ctrl-\</code></td><td align="center"><code>SIGQUIT</code></td><td align="center">quit process</td></tr><tr><td align="center"><code>Ctrl-Z</code></td><td align="center"><code>SIGTSTP</code></td><td align="center">to stop a process, then can be continued by sending <code>SIGCONT</code></td></tr></tbody></table><p>Notice that <code>SIGTSTP</code> is similar to <code>SIGSTOP</code>, but <code>SIGSTOP</code> can not be blocked or ignored, while <code>SIGTSTP</code> could.</p></blockquote><h3 id="7-2-2-Status-of-Signal"><a href="#7-2-2-Status-of-Signal" class="headerlink" title="7.2.2 Status of Signal"></a>7.2.2 Status of Signal</h3><blockquote><blockquote><p>Delivery: 递送，当进程对信号<strong>采取动作</strong>（执行信号处理函数或忽略）时称为递送。</p><p>Pending: 信号<strong>产生和递送之间</strong>的时间间隔内称信号是<strong>未决</strong>的。</p><p>Block: 信号递送阻塞，进程可指定对某个信号采用<strong>递送阻塞</strong>，若此时信号处理为默认或者捕捉的，该信号就会处于未决的状态。</p></blockquote><p>信号未决状态是指从信号产生到起作用之间的状态，信号在未决状态时已经产生，但是并没有起作用，可以在不需要该信号时阻止信号被处理。一旦信号退出未决状态，则会被立即处理。</p></blockquote><h3 id="7-2-3-Respose-to-Signal"><a href="#7-2-3-Respose-to-Signal" class="headerlink" title="7.2.3 Respose to Signal"></a>7.2.3 Respose to Signal</h3><blockquote><p>There are three types of response to a signal, as follows.</p><ol><li>缺省操作：Linux 对每种信号都规定了默认操作，如果没有特殊说明，就按照默认的方式执行。</li><li>忽略信号：对信号不做处理，假装看不见，但是有两个信号不能忽略，即 <code>SIGKILL</code> 和 <code>SIGSTOP</code>。</li><li>捕捉信号：捕捉响应的信号，进行函数处理。<code>SIGKILL</code> 和 <code>SIGSTOP</code> 也不可以捕捉。</li></ol></blockquote><h3 id="7-2-3-Classification-of-Signal"><a href="#7-2-3-Classification-of-Signal" class="headerlink" title="7.2.3 Classification of Signal"></a>7.2.3 Classification of Signal</h3><h4 id="7-2-3-1-By-Source"><a href="#7-2-3-1-By-Source" class="headerlink" title="7.2.3.1 By Source"></a>7.2.3.1 By Source</h4><blockquote><p>同步信号：由进程的某个操作产生的信号，即信号的产生和操作同时发生。e.g. 除零错误。</p><p>异步信号：由进程外的事件引起的信号，该信号产生的时间进程不可控。e.g. 用户键盘时间。</p></blockquote><h4 id="7-2-3-2-By-Handle-Behavior"><a href="#7-2-3-2-By-Handle-Behavior" class="headerlink" title="7.2.3.2 By Handle Behavior"></a>7.2.3.2 By Handle Behavior</h4><blockquote><p>不可靠信号：同时有多个信号产生，且无法及时处理时，会导致信号丢失。</p><p>可靠信号：不是不可靠信号的信号，来不及处理时会排入进程信号队列。</p><p>值小于 <code>SIGRTMIN</code> 的信号为不可靠信号，建立在 UNIX 早期机制上，<code>SIGRTMIN</code> 到 <code>SIGRTMAX</code> 的信号为可靠信号。</p></blockquote><h4 id="7-2-3-3-Real-Time-Signal"><a href="#7-2-3-3-Real-Time-Signal" class="headerlink" title="7.2.3.3 Real-Time Signal"></a>7.2.3.3 Real-Time Signal</h4><blockquote><p>Linux 目前有 64 种信号，前 32 种为非实时信号，后 32 种为实时信号。</p><p>非实时信号都不支持排队，都不可靠。实时信号都支持排队，都可靠。</p><p><em>It seems that real-time signal and reliable signal are the same?</em></p></blockquote><h3 id="7-2-4-Handling-of-Signal"><a href="#7-2-4-Handling-of-Signal" class="headerlink" title="7.2.4 Handling of Signal"></a>7.2.4 Handling of Signal</h3><h4 id="7-2-4-1-signal"><a href="#7-2-4-1-signal" class="headerlink" title="7.2.4.1 signal"></a>7.2.4.1 signal</h4><blockquote><p>There are three ways to handle a signal, by registering different handler functions using <code>signal()</code> function. It returns the previous handler on success, or -1 on error. <code>sig</code> is the signal type except <code>SIGKILL</code> and <code>SIGSTOP</code>. It is passed automatically by signal mechanism and is exactly what we passed in <code>signal()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> sig, <span class="type">void</span> (*handler)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>There are two system handlers, <code>SIG_DFL</code> is the default handler of the system, and <code>SIG_IGN</code> means ignore the signal.</p><p>After handling, the handler will be reset to default, so we need to re-hook it again.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">// Handling...</span></span><br><span class="line"> signal(sig, handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-2-4-2-sigaction"><a href="#7-2-4-2-sigaction" class="headerlink" title="7.2.4.2 sigaction"></a>7.2.4.2 sigaction</h4><blockquote><p><code>sigaction</code> provides a more powerful way to handle signal, and is compatible with old method. If you do not want to keep old handler, just leave it <code>NULL</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/siginfo.h&gt;</span> <span class="comment">// actually doesn&#x27;t need</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">sigval</span> &#123;</span></span><br><span class="line"><span class="type">int</span> sival_int;</span><br><span class="line"><span class="type">void</span> *sival_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">sigval</span> <span class="title">si_value</span>;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125; <span class="type">siginfo_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line"><span class="type">void</span> (*sa_handler)(<span class="type">int</span>);</span><br><span class="line"><span class="type">sigset_t</span> sa_mask;</span><br><span class="line"><span class="type">int</span> sa_flags;</span><br><span class="line"><span class="type">void</span> (*sa_sigaction)(<span class="type">int</span>, <span class="type">siginfo_t</span> *, <span class="type">void</span> *);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigaction</span><span class="params">(<span class="type">int</span> sig, <span class="type">const</span> <span class="keyword">struct</span> sigaction *new, <span class="keyword">struct</span> sigaction *old)</span>;</span><br></pre></td></tr></table></figure><p><code>sa_handler</code> is the old style, while <code>sa_sigaction</code> is the new style, which to use depends on the value of <code>sa_flags</code>. The new style can then access <code>siginfo_t::si_value::sival_int</code>, while <code>siginfo_t::si_value::si_prt</code> is only available when in the same process or shared memory is used.</p><table><thead><tr><th align="center"><code>sa_flags</code></th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center"><code>SA_RESETHAND</code></td><td align="center">reset handler after handling, a.k.a. 捕鼠器模式</td></tr><tr><td align="center"><code>SA_NODEFER</code></td><td align="center">close auto-block when handling, allow recursive</td></tr><tr><td align="center"><code>SA_RESTART</code></td><td align="center">restart system call if failed</td></tr><tr><td align="center"><code>SA_SIGINFO</code></td><td align="center">use new style, if not assigned, old style will be used</td></tr></tbody></table></blockquote><h3 id="7-2-5-Block-Signal"><a href="#7-2-5-Block-Signal" class="headerlink" title="7.2.5 Block Signal"></a>7.2.5 Block Signal</h3><blockquote><p>任何时候进程都有一些信号被<strong>阻塞</strong>，这个信号的集合被称为<strong>信号挡板</strong>，系统调用 <code>sigprocmask()</code> 可修改这个被阻塞的信号集。<code>sigprocmask</code> 是一个<strong>原子操作</strong>，根据所给的信号集来修改当前被阻塞的信号集。</p></blockquote><h4 id="7-2-5-1-Signal-Set"><a href="#7-2-5-1-Signal-Set" class="headerlink" title="7.2.5.1 Signal Set"></a>7.2.5.1 Signal Set</h4><blockquote><p>To block signal, we need to indicate which set of signal to block or unblock.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigemptyset</span><span class="params">(<span class="type">sigset_t</span> *setp)</span>;          <span class="comment">// remove all signals int the set</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigfillset</span><span class="params">(<span class="type">sigset_t</span> *setp)</span>;           <span class="comment">// add all signalas to the set</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigaddset</span><span class="params">(<span class="type">sigset_t</span> *setp, <span class="type">int</span> sig)</span>;   <span class="comment">// add a signal to the set</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigdelset</span><span class="params">(<span class="type">sigset_t</span> *setp, <span class="type">int</span> sig)</span>;   <span class="comment">// remove a signal from the set</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigismember</span><span class="params">(<span class="type">sigset_t</span> *setp, <span class="type">int</span> sig)</span>; <span class="comment">// check if a signal is in the set or not</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="7-2-5-2-Mask-Signals"><a href="#7-2-5-2-Mask-Signals" class="headerlink" title="7.2.5.2 Mask Signals"></a>7.2.5.2 Mask Signals</h4><blockquote><p>If we want, or do not want some signals to be handled, we can unblock or block them use <code>sigprocmask()</code>. <code>prev</code> will be set to previous signal set if roll back is needed. <code>how</code> indicates how to treat the signal set, it has three values: <code>SIG_BLOCK</code>, <code>SIG_UNBLOCK</code> and <code>SIG_SET</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigprocmask</span><span class="params">(<span class="type">int</span> how, <span class="type">const</span> <span class="type">sigset_t</span> *sigs, <span class="type">sigset_t</span> *prev)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="7-2-6-Send-Signal"><a href="#7-2-6-Send-Signal" class="headerlink" title="7.2.6 Send Signal"></a>7.2.6 Send Signal</h3><blockquote><p>Remember, signal can be sent by a process. There are generally three ways to send a signal: <code>kill</code>, <code>raise</code> and <code>sigqueue</code>. All of them requires <code>signal.h</code> and <code>sys/types.h</code> (for <code>pid_t</code>).</p></blockquote><h4 id="7-2-6-1-kill"><a href="#7-2-6-1-kill" class="headerlink" title="7.2.6.1 kill"></a>7.2.6.1 kill</h4><blockquote><p>Just like, ya know, the command, send a signal to target process.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">kill</span> <span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-2-6-2-raise"><a href="#7-2-6-2-raise" class="headerlink" title="7.2.6.2 raise"></a>7.2.6.2 raise</h4><blockquote><p>Similar to kill, but this one send signal to itself.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">raise</span><span class="params">(<span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-2-6-3-sigqueue"><a href="#7-2-6-3-sigqueue" class="headerlink" title="7.2.6.3 sigqueue"></a>7.2.6.3 sigqueue</h4><blockquote><p>This one works with [<code>sigaction</code>](#7.2.4.2 sigaction), it will send a signal with <code>siginfo_t</code>, whose <code>si_value</code> is set to <code>value</code>. And the corresponding handler should be new style, and pay attention to the value.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigqueue</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig, <span class="type">const</span> <span class="keyword">union</span> sigval value)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="7-2-7-Signal-Process-Inheritance"><a href="#7-2-7-Signal-Process-Inheritance" class="headerlink" title="7.2.7 Signal Process Inheritance"></a>7.2.7 Signal Process Inheritance</h3><blockquote><p>By default, child process will inherit all the handlers of parent process. However, if child process then calls exec function series, the signal handlers will be reset to default.</p></blockquote><h3 id="7-2-8-Reentrant"><a href="#7-2-8-Reentrant" class="headerlink" title="7.2.8 Reentrant"></a>7.2.8 Reentrant</h3><blockquote><p>Definition: 某个函数可被多个任务并发使用，而不会造成数据错误，则该函数具有可重入性（Reentrant） 。</p><p>信号处理函数中，避免使用不可重入函数，因为信号处理函数有可能被调用多次。若处理函数使用了不可重入函数而变成不可重入时，则必须阻塞信号，若阻塞信号，则信号有可能丢失。</p><p>可重入函数中不能使用静态变量，不能使用 malloc&#x2F;free函数和标准I&#x2F;O库，使用全局变量时也应小心。</p></blockquote><h3 id="7-2-9-Applications"><a href="#7-2-9-Applications" class="headerlink" title="7.2.9 Applications"></a>7.2.9 Applications</h3><h4 id="7-2-9-1-Prevent-Zombie-Process"><a href="#7-2-9-1-Prevent-Zombie-Process" class="headerlink" title="7.2.9.1 Prevent Zombie Process"></a>7.2.9.1 Prevent Zombie Process</h4><blockquote><p>When child process exits, it will send a <code>SIGCHLD</code> signal to its parent. By default, this signal is ignored. So parent can register a handler to this to do its own stuff, and take care of dead children only when needed to avoid waste of time on waiting.</p></blockquote><h2 id="7-3-Semaphore"><a href="#7-3-Semaphore" class="headerlink" title="7.3 Semaphore"></a>7.3 Semaphore</h2><h3 id="7-3-1-Synchronization-and-Mutual-Exclusion"><a href="#7-3-1-Synchronization-and-Mutual-Exclusion" class="headerlink" title="7.3.1 Synchronization and Mutual Exclusion"></a>7.3.1 Synchronization and Mutual Exclusion</h3><blockquote><p>Before we take a glance at semaphore, let review some concepts.</p><table><thead><tr><th align="center">Term</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">临界资源</td><td align="center">临界资源在某一时刻只能允许一个进程使用</td></tr><tr><td align="center">临界区</td><td align="center">访问临界资源的代码段称为临界区</td></tr><tr><td align="center">同步（Synchronization）</td><td align="center">进程之间相互依赖，一个进程必须等待另一个进程</td></tr><tr><td align="center">互斥（Mutual Exclusion）</td><td align="center">进程间相互排斥的使用临界资源的现象</td></tr></tbody></table></blockquote><h3 id="7-3-2-POSIX-vs-System-V"><a href="#7-3-2-POSIX-vs-System-V" class="headerlink" title="7.3.2 POSIX vs System V"></a>7.3.2 POSIX vs System V</h3><blockquote><p>System V 是 Unix 操作系统的标准之一；POSIX 是 IEEE 的标准，相对更新，语法更简单。</p><p>System V 在同步互斥手段方面的无竞争条件下无论何时都会陷入内核，性能稍低；POSIX 在同步互斥手段方面的无竞争条件下是不会陷入内核的，性能较高。</p><p>System V 提供了 SEM_UNDO 可以在进程意外终止时释放信号量，可靠性高；POSIX 并没有实现，可靠性稍差。</p><p>System V 更多用于进程间通信，用于线程间通信则会丧失线程的轻量优势；POSIX 进程和线程间通信同步更优。</p><p>For more information, see <a href="https://blog.csdn.net/xiaoting451292510/article/details/103819933">System V 标准 &amp; POSIX 标准</a>.</p></blockquote><h3 id="7-3-3-System-V-Semaphore"><a href="#7-3-3-System-V-Semaphore" class="headerlink" title="7.3.3 System V Semaphore"></a>7.3.3 System V Semaphore</h3><blockquote><p>For System V semaphore, it requires <code>sem.h</code>.</p></blockquote><h4 id="7-3-3-1-Create-Semaphore"><a href="#7-3-3-1-Create-Semaphore" class="headerlink" title="7.3.3.1 Create Semaphore"></a>7.3.3.1 Create Semaphore</h4><blockquote><p>To get a semaphore, use <code>semget()</code>, </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**    key - semaphore key id, must be identical</span></span><br><span class="line"><span class="comment">**  nsems - how many semaphores to create</span></span><br><span class="line"><span class="comment">** semflg - behavior: IPC_CREAT, IPC_EXCL; permission: S_IRUSR | S_IWUSR (read and write)</span></span><br><span class="line"><span class="comment">** return - EACCES: process have no access premission</span></span><br><span class="line"><span class="comment">**          ENOENT: key doesn&#x27;t exists</span></span><br><span class="line"><span class="comment">**          EINVAL: nsems less than 0, or reaches maximum</span></span><br><span class="line"><span class="comment">**          EEXIST: when both IPC_CREAT and IPC_EXCL are assigned and key exists</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">semget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> nsems, <span class="type">int</span> semflg)</span>;</span><br></pre></td></tr></table></figure><p>For the key, we often use <code>ftok()</code> to get an identical one, and System V use this <code>key_t</code> as a name for IPC object. It will generate hash value of pathname, which must exist, and combine it with id. Usually, current directory <code>./</code> is used with id equals zero.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="type">key_t</span> <span class="title function_">ftok</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-3-3-2-Control-Semaphore"><a href="#7-3-3-2-Control-Semaphore" class="headerlink" title="7.3.3.2 Control Semaphore"></a>7.3.3.2 Control Semaphore</h4><blockquote><p>Semaphore can be represented as follows. I wonder why it is commented from Linux kernel.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span>* <span class="title">buf</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>* <span class="built_in">array</span>;</span><br><span class="line">&#125; <span class="type">sem_t</span>;</span><br></pre></td></tr></table></figure><p>To control semaphore, we need <code>semctrl()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**  semid - semaphore id get from semget()</span></span><br><span class="line"><span class="comment">** semnum - only valid when using semaphore set, usually 0, the first one</span></span><br><span class="line"><span class="comment">**    cmd - operation to the semaphore</span></span><br><span class="line"><span class="comment">**    ... - a sem_t value, used when operate semaphore.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">semctl</span><span class="params">(<span class="type">int</span> semid, <span class="type">int</span> semnum, <span class="type">int</span> cmd, ...)</span>;</span><br></pre></td></tr></table></figure><p>Common value for <code>cmd</code> are <code>SETVAL</code> and <code>IPC_RMID</code>.</p><table><thead><tr><th align="center"><code>cmd</code></th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center"><code>SETVAL</code></td><td align="center">initialize semaphore, 4th parameter is required</td></tr><tr><td align="center"><code>IPC_RMID</code></td><td align="center">remove semaphore of <code>semid</code>, <code>semnum</code> and 4th parameter are omitted</td></tr></tbody></table><p>When <code>IPC_RMID</code> is applied, all blocked process by the semaphore will be awaken.</p></blockquote><h4 id="7-3-3-3-Operate-Semaphore"><a href="#7-3-3-3-Operate-Semaphore" class="headerlink" title="7.3.3.3 Operate Semaphore"></a>7.3.3.3 Operate Semaphore</h4><blockquote><p>There are two types of operation, P and V. In Dutch, P stands for <code>Passeren</code> (Pass), and V stands for <code>Verhoog</code> (Increment). P will ask for resource, if not available, the current process will be forced to wait. V will release resource, to wake up waiting processes.</p><p>To operate semaphore, we need <code>semop()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Semaphore operation unit</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> &#123;</span></span><br><span class="line"><span class="type">short</span> sem_num;<span class="comment">// indicate which semaphore to change in semaphore array</span></span><br><span class="line"><span class="type">short</span> sem_op;<span class="comment">// -1 for P, and 1 for V</span></span><br><span class="line"><span class="type">short</span> sem_flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">** semid - semaphore id get from semget()</span></span><br><span class="line"><span class="comment">**  sops - operation array</span></span><br><span class="line"><span class="comment">** nsops - how many operations in sops</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">semop</span><span class="params">(<span class="type">int</span> semid, <span class="keyword">struct</span> sembuf *sops, <span class="type">unsigned</span> nsops)</span>;</span><br></pre></td></tr></table></figure><p>For <code>sops</code>, usually,  there is only one operation, and for the operation <code>sembuf</code>, <code>sem_num</code> is the same meaning as <code>semnum</code> in <code>semctl</code>, and <code>sem_flag</code> is often set to <code>SEM_UNDO</code>, to release semaphore automatically on process exit if forget to do so.</p></blockquote><h3 id="7-3-4-Application"><a href="#7-3-4-Application" class="headerlink" title="7.3.4 Application"></a>7.3.4 Application</h3><blockquote><p>Semaphore can used to coordinate processes for synchronization or mutual exclusion. More than one semaphore may be used. One example is with shared memory.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+: working</span><br><span class="line">-: waiting</span><br><span class="line"><span class="comment">// syncronization, execute in order, semaphore initialized to 0</span></span><br><span class="line"><span class="comment">// n processes need n semaphores, so they can execute in desired order</span></span><br><span class="line">ProcessA: +++++VP----- +++++VP ...</span><br><span class="line">ProcessB: P-----+++++V P-----+ ...</span><br><span class="line"><span class="comment">// mutual exclusion, compete over one resource, semaphore initialized to 1</span></span><br><span class="line"><span class="comment">// only one semaphore, one process may get the resource more than one time in a roll</span></span><br><span class="line">ProcessA: P+++++VP-----+++++VP+++++VP----- ...</span><br><span class="line">ProcessB: P------+++++VP------------+++++V ...</span><br></pre></td></tr></table></figure></blockquote><h2 id="7-4-Message-Queue"><a href="#7-4-Message-Queue" class="headerlink" title="7.4 Message Queue"></a>7.4 Message Queue</h2><blockquote><p>Just maintain a queue from sender to receiver, easy to understand, huh?</p></blockquote><h3 id="7-4-1-Feature"><a href="#7-4-1-Feature" class="headerlink" title="7.4.1 Feature"></a>7.4.1 Feature</h3><blockquote><p>发送方不必等待接收方去接收该消息就可不断发送数 据，而接收方若未收到消息也无需等待。</p><p>这种方式实现了发送方和接收方之间的松耦合，发送方和接收方只需负责自己的发送和接收功能，无需等待另外一方，从而为应用程序提供了灵活性。</p></blockquote><h3 id="7-4-2-System-V-Message-Queue"><a href="#7-4-2-System-V-Message-Queue" class="headerlink" title="7.4.2 System V Message Queue"></a>7.4.2 System V Message Queue</h3><blockquote><p>Similar to System V semaphore, <del>Duh, both System V, come on</del>, and it requires <code>sys/msg.h</code>.</p></blockquote><h4 id="7-4-2-1-Create-Message-Queue"><a href="#7-4-2-1-Create-Message-Queue" class="headerlink" title="7.4.2.1 Create Message Queue"></a>7.4.2.1 Create Message Queue</h4><blockquote><p>Err… the same as semaphore.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">msgget</span> <span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> msgflg)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-4-2-2-Control-Message-Queue"><a href="#7-4-2-2-Control-Message-Queue" class="headerlink" title="7.4.2.2 Control Message Queue"></a>7.4.2.2 Control Message Queue</h4><blockquote><p>Err… similar to semaphore.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">msgctl</span><span class="params">(<span class="type">int</span> msgid, <span class="type">int</span> cmd, <span class="keyword">struct</span> msgqid_ds *buf)</span>;</span><br></pre></td></tr></table></figure><p>Listen, I don’t want to get complicated here, for now, it is only used to delete message queue, simple, huh?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msgctl(msgid, IPC_RMID, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-4-2-3-Send-Message"><a href="#7-4-2-3-Send-Message" class="headerlink" title="7.4.2.3 Send Message"></a>7.4.2.3 Send Message</h4><blockquote><p>We can send a message to the message queue with <code>msgsnd()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**  msgid - message queue id get from getmsg()</span></span><br><span class="line"><span class="comment">**   msgp - message to send, any type</span></span><br><span class="line"><span class="comment">**   msgz - size of message</span></span><br><span class="line"><span class="comment">** msgflg - flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">msgsnd</span><span class="params">(<span class="type">int</span> msgid, <span class="type">const</span> <span class="type">void</span> *msgp, <span class="type">size_t</span> msgz, <span class="type">int</span> msgflg)</span>;</span><br></pre></td></tr></table></figure><p><code>msgp</code> is a custom structure, it can be defined like this. And <code>msgz</code> is then <code>sizeof(message_t)</code>. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tag_message</span> &#123;</span></span><br><span class="line"><span class="type">long</span> type;               <span class="comment">// required field</span></span><br><span class="line"><span class="type">char</span> data[BUFFER_SIZE];  <span class="comment">// custom field, anything is OK</span></span><br><span class="line">&#125; <span class="type">message_t</span>;</span><br></pre></td></tr></table></figure><p>For <code>msgflg</code>, usually 0 is OK, and process will be hung up until message is sent. Others are OK, <del>of course</del>. If set to <code>IPC_NOWAIT</code>, it will return -1 immediately if message queue is full, and the message remain unsent.</p></blockquote><h4 id="7-4-2-4-Receive-Message"><a href="#7-4-2-4-Receive-Message" class="headerlink" title="7.4.2.4 Receive Message"></a>7.4.2.4 Receive Message</h4><blockquote><p>Receive message is similar to send message, and is declared as follows.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">msgrcv</span><span class="params">(<span class="type">int</span> msgid, <span class="type">void</span> *msgp, <span class="type">size_t</span> msgz, <span class="type">long</span> msgtype, <span class="type">int</span> msgflg)</span>;</span><br></pre></td></tr></table></figure><p>All parameters remain the same meaning as <code>msgsnd</code>, and <code>msgflag</code>, too, return -1 immediately if no message can be received when set to <code>IPC_NOWAIT</code>. (This doesn’t mean the message queue is empty. It depends on what message to receive, which is indicated by <code>msgtype</code>)</p><p>For <code>msgtype</code>, it indicates what message to receive. This value is corresponding the <code>message_t::type</code>.</p><table><thead><tr><th align="center"><code>msgtype</code></th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">receive the first message in queue</td></tr><tr><td align="center">&gt; 0</td><td align="center">receive the first message with the same type</td></tr><tr><td align="center">&lt; 0</td><td align="center">receive the first message, whose type is less or equal to |<code>msgtype</code>|</td></tr></tbody></table></blockquote><h2 id="7-5-Shared-Memory"><a href="#7-5-Shared-Memory" class="headerlink" title="7.5 Shared Memory"></a>7.5 Shared Memory</h2><h3 id="7-5-1-Feature"><a href="#7-5-1-Feature" class="headerlink" title="7.5.1 Feature"></a>7.5.1 Feature</h3><blockquote><p>与<strong>消息队列</strong>和<strong>管道通信</strong>机制相比，一个进程要向队列&#x2F;管道中写入数据时，引起数据从用户地址空间向内核地址空间的一次复制，进行消息读取时也要进行一次复制。</p><p><strong>共享内存</strong>的优点是完全<strong>省去</strong>了这些操作，是 GNU&#x2F;Linux 现在可用的<strong>最快速</strong>的进程间通信机制。</p></blockquote><h3 id="7-5-2-System-V-Shared-Memory"><a href="#7-5-2-System-V-Shared-Memory" class="headerlink" title="7.5.2 System V Shared Memory"></a>7.5.2 System V Shared Memory</h3><blockquote><p>Ah… System V again :P. And this one requires <code>sys/shm.h</code></p></blockquote><h4 id="7-5-2-1-Create-Shared-Memory"><a href="#7-5-2-1-Create-Shared-Memory" class="headerlink" title="7.5.2.1 Create Shared Memory"></a>7.5.2.1 Create Shared Memory</h4><blockquote><p>Err… System V style, huh? <code>size</code> is the total size of shared memory you want to have, and <code>shmflg</code> is the same as files, you can refer to semaphore.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shmget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> size, <span class="type">int</span> shmflg)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="7-5-2-2-Control-Shared-Memory"><a href="#7-5-2-2-Control-Shared-Memory" class="headerlink" title="7.5.2.2 Control Shared Memory"></a>7.5.2.2 Control Shared Memory</h4><blockquote><p>Well, all the same. Like message queue, for now, we just use it to delete shared memory. Just set <code>cmd</code> to <code>IPC_RMID</code> and leave <code>buf</code> as <code>NULL</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shmctl</span><span class="params">(<span class="type">int</span> shmid, <span class="type">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf)</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="7-5-2-3-Attach-Shared-Memory"><a href="#7-5-2-3-Attach-Shared-Memory" class="headerlink" title="7.5.2.3 Attach Shared Memory"></a>7.5.2.3 Attach Shared Memory</h4><blockquote><p>In the last step, we only created a shared memory, but didn’t know where it is. So before we use it, we have to attach it to an address. In fact, it is done by mapping memory from this address to the actual shared memory.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">**   shmid - shared memory id</span></span><br><span class="line"><span class="comment">** shmaddr - memory to attach, ususally remain NULL to allocate automatically</span></span><br><span class="line"><span class="comment">**  shmflg - 0 by default for read and write; SHM_RDONLY for read only</span></span><br><span class="line"><span class="comment">**  return - the address attached to, -1 if error.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">shmat</span><span class="params">(<span class="type">int</span> shmid, <span class="type">const</span> <span class="type">void</span> *shmaddr, <span class="type">int</span> shmflg)</span></span><br></pre></td></tr></table></figure><p>Now, you can use it as your own!</p><p>Notice that child process will inherit parent shared memory when created by <code>fork()</code>. Shared memory will detach automatically if process ends, or child process execute <code>exec</code> function set.</p></blockquote><h4 id="7-5-2-4-Detach-Shared-Memory"><a href="#7-5-2-4-Detach-Shared-Memory" class="headerlink" title="7.5.2.4 Detach Shared Memory"></a>7.5.2.4 Detach Shared Memory</h4><blockquote><p>When we don’t want a memory, we can simply detach it. It returns 0 when success and -1 on failure.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shmdt</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *shmaddr)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="7-5-3-Aplication"><a href="#7-5-3-Aplication" class="headerlink" title="7.5.3 Aplication"></a>7.5.3 Aplication</h3><blockquote><p>It’s easy to understand the use of shared memory. However, you can easily find that memory read and write are mutual exclusive, so shared memory often accompanied by semaphore. Since shared memory is used between processes, there’s nothing to do with mutex, which is used between threads.</p></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Process</title>
      <link href="/posts/Process/"/>
      <url>/posts/Process/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Six-Process"><a href="#Chapter-Six-Process" class="headerlink" title="Chapter Six - Process"></a>Chapter Six - Process</h1><h2 id="6-1-Meet-Process"><a href="#6-1-Meet-Process" class="headerlink" title="6.1 Meet Process"></a>6.1 Meet Process</h2><h3 id="6-1-1-Program-and-Process"><a href="#6-1-1-Program-and-Process" class="headerlink" title="6.1.1 Program and Process"></a>6.1.1 Program and Process</h3><blockquote><p>Program is a passive entity, and is stored in hard disk. Process is an active entity, and got a Program Counter and a whole set of resources and runs. When an executable is loaded into memory, it becomes a process.</p></blockquote><h3 id="6-1-2-Process-State"><a href="#6-1-2-Process-State" class="headerlink" title="6.1.2 Process State"></a>6.1.2 Process State</h3><blockquote><ul><li><code>new</code>: under creation</li><li><code>running</code>: literally</li><li><code>waiting</code>: waiting for some events, e.g. I&#x2F;O or signal</li><li><code>ready</code>: waiting for processer arrangement</li><li><code>terminated</code>: process finished</li></ul><img src="/posts/Process/image-20221225112439583.png" alt="image-20221225112439583" style="zoom:50%;"></blockquote><h2 id="6-2-Start-and-Exit"><a href="#6-2-Start-and-Exit" class="headerlink" title="6.2 Start and Exit"></a>6.2 Start and Exit</h2><blockquote><p><em>“Action speaks louder than words.”</em></p></blockquote><h3 id="6-2-1-Start-Process"><a href="#6-2-1-Start-Process" class="headerlink" title="6.2.1 Start Process"></a>6.2.1 Start Process</h3><h4 id="6-2-1-1-fork"><a href="#6-2-1-1-fork" class="headerlink" title="6.2.1.1 fork"></a>6.2.1.1 fork</h4><blockquote><p><code>fork()</code> is a common way to create an identical process.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">fork</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>Parent process return child process’s pid and child process return 0 if succeeded. Otherwise -1 is returned and we can use <code>perror()</code> to show error info.</p></blockquote><h4 id="6-2-1-2-exec"><a href="#6-2-1-2-exec" class="headerlink" title="6.2.1.2 exec"></a>6.2.1.2 exec</h4><blockquote><p>There are a lot of these stuffs.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *arg0, ... <span class="comment">/* (char *)0 */</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">char</span> *<span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execle</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *arg0, ...<span class="comment">/* (char *)0, char *const envp[] */</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *arg0, ... <span class="comment">/* (char *)0 */</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">execvp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">char</span> *<span class="type">const</span> argv[])</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fexecve</span><span class="params">(<span class="type">int</span> fd, <span class="type">char</span> *<span class="type">const</span> argv[], <span class="type">char</span> *<span class="type">const</span> envp[])</span>;</span><br></pre></td></tr></table></figure><p>All arguments should end with <code>NULL</code>. Only <code>execve</code> is a system call.</p><ul><li>“<code>l</code>“ for list, so <code>argv</code> is  an argument list.</li><li>“<code>v</code>“ for vector, so <code>argv</code> is an array.</li><li>“<code>e</code>“ for environment, to contain <code>envp</code> array. If no such thing, default environment variables will be passed rather than no environment.</li><li>“<code>p</code>“ for environment <code>PATH</code>, it indicates that system should go to <code>PATH</code> to find <code>filename</code>.</li></ul><p>Notice that, unlike we type in commands in terminal, executable name won’t be added by default to the argument list, and need to be added manually. So, the two ways below have different output. It depends on how the target program parse its arguments. If use <code>arg[i]</code> directly, it may cause some error, while <code>getopt()</code> may hide some errors.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execvp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>);        <span class="comment">// equal to $ ls</span></span><br><span class="line">execvp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>);  <span class="comment">// equal to $ ls -l</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="6-2-2-Exit-Process"><a href="#6-2-2-Exit-Process" class="headerlink" title="6.2.2 Exit Process"></a>6.2.2 Exit Process</h3><h4 id="6-2-2-1-Exit-Process"><a href="#6-2-2-1-Exit-Process" class="headerlink" title="6.2.2.1 Exit Process"></a>6.2.2.1 Exit Process</h4><blockquote><p>We can wait until process until return in main, or use exit functions to exit somewhere else.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span>;   <span class="comment">// Do some cleaning, and then go to kernal.</span></span><br><span class="line"><span class="type">void</span> _Exit(<span class="type">int</span> status);  <span class="comment">// Go to kernal directly.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> _exit(<span class="type">int</span> status);  <span class="comment">// GO to kernal directly.</span></span><br></pre></td></tr></table></figure><p>When <code>exit()</code> is called, program will flush buffer stream, call functions that registered by <code>atexit()</code> and <code>on_ext</code> and other functions related to <code>exit()</code>, then call <code>_exit()</code> at last.</p></blockquote><h4 id="6-2-2-2-Exit-Status"><a href="#6-2-2-2-Exit-Status" class="headerlink" title="6.2.2.2 Exit Status"></a>6.2.2.2 Exit Status</h4><blockquote><p>We can get a process’ exit status by waiting it.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *status)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *status, <span class="type">int</span> options)</span>;</span><br></pre></td></tr></table></figure><p><code>wait()</code> will jam current process until any of the child process returns, and itself return the pid of the returned child process.</p><p><code>waitpid()</code> can wait for a specific process, and is more complicated.</p><table><thead><tr><th align="center">pid</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center">&gt; 0</td><td align="center">wait for specific child process with given pid</td></tr><tr><td align="center">&#x3D; 0</td><td align="center">wait for any child process whose group id is the same as current process</td></tr><tr><td align="center">&#x3D; -1</td><td align="center">wait for any child process, same as <code>wait()</code></td></tr><tr><td align="center">&lt; -1</td><td align="center">wait for any child process whose group id is the same as |pid|</td></tr></tbody></table><table><thead><tr><th align="center"><code>options</code></th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center"><code>WNOHANG</code></td><td align="center">no block, if no child process returns, return immediately</td></tr><tr><td align="center"><code>WUNTRACED</code></td><td align="center">return immediately if child process goes into waiting status</td></tr><tr><td align="center">0</td><td align="center">same as <code>wait()</code></td></tr></tbody></table><p>However, there is one more thing. When we want to wait for a process and get its return status, we need something more. <code>WIFEXITED</code> indicates whether process is exited normally or not, and returns a boolean value, not 0 means true. Then, we use <code>WEXITSTATUS</code> to get the exit status.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (waitpid(<span class="number">-1</span>, &amp;status, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status) != <span class="number">0</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Exit status: %d\n&quot;</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similarly, <code>WIFSIGNALED</code> indicates whether process is stopped by a signal, with <code>WTERMSIG</code> to tell which signal it was.</p></blockquote><h2 id="6-3-Special-Process"><a href="#6-3-Special-Process" class="headerlink" title="6.3 Special Process"></a>6.3 Special Process</h2><h3 id="6-3-1-Some-Concepts"><a href="#6-3-1-Some-Concepts" class="headerlink" title="6.3.1 Some Concepts"></a>6.3.1 Some Concepts</h3><blockquote><ul><li>Process Group: 进程组是一组进程的集合，由进程组PID表示。 每个进程必须有一个进程组PID，即必须属于某个进程组，一个终端的控制进程是它所发起的一系列进程的进程组。</li><li>Session: 会话期是由一个或者多个进程组组成的集合，开始于用户登录，结束于用户退出，在此期间，用户所运行的所有进程属于该会话期。</li></ul></blockquote><h3 id="6-3-2-Daemon-Process"><a href="#6-3-2-Daemon-Process" class="headerlink" title="6.3.2 Daemon Process"></a>6.3.2 Daemon Process</h3><blockquote><p>Code is more convincing, huh?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Create a daemon process.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Step 1: Create a child process and terminate the parent.</span></span><br><span class="line"><span class="type">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Fork error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// Child process now becomes an orphan.</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Step 2: Detach the child process by creating a new session.</span></span><br><span class="line">setsid();</span><br><span class="line"><span class="comment">// Step 3: Change working directory, or current directory can&#x27;t be deleted.</span></span><br><span class="line">chdir(<span class="string">&quot;./&quot;</span>);</span><br><span class="line"><span class="comment">// Step 4: Change file access mask.</span></span><br><span class="line">umask(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// Step 5: Close file descriptions, no interactions.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">close(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, the real work of daemon starts, print log info to a temp file.</span></span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">for</span> (; ; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((fd = open(<span class="string">&quot;/tmp/daemon.log&quot;</span>, O_WRONLY | O_CREAT | O_APPEND, <span class="number">0600</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sprintf</span>(buffer, <span class="string">&quot;Execute Order %d\n&quot;</span>, cnt);</span><br><span class="line">write(fd, buffer, <span class="built_in">strlen</span>(buffer));</span><br><span class="line">close(fd);</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">66</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">cnt++;</span><br><span class="line">sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For the header files… hard to remember.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">perror</span> <span class="params">( <span class="type">const</span> <span class="type">char</span> * str )</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsid</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">chdir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">fork</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">umask</span><span class="params">(<span class="type">mode_t</span> mask)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buffer, <span class="type">size_t</span> nbytes)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-3-3-Zombie-Process"><a href="#6-3-3-Zombie-Process" class="headerlink" title="6.3.3 Zombie Process"></a>6.3.3 Zombie Process</h3><blockquote><p>If child process dies before parent, and parent doesn’t wait for it, which means it is not cleaned in time, then the child process will become a zombie process, and marked with [defunct] is process list.</p><p>One zombie is not that serious, but too many zombies may use up system pid, which prevent other processes to be created.</p><p>One more thing, zombie can not be killed by <code>kill -9</code>, it can only be released when parent wait for it, or parent exited, or system rebooted.</p></blockquote><h3 id="6-3-4-Orphan-Process"><a href="#6-3-4-Orphan-Process" class="headerlink" title="6.3.4 Orphan Process"></a>6.3.4 Orphan Process</h3><blockquote><p>If parent process exited before child process, then the child will become an orphan. We don’t want orphan, so it will then be taken care of by <code>init</code> process.</p></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux File System</title>
      <link href="/posts/Linux-File-System/"/>
      <url>/posts/Linux-File-System/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Five-File-System"><a href="#Chapter-Five-File-System" class="headerlink" title="Chapter Five - File System"></a>Chapter Five - File System</h1><h2 id="5-1-Meet-File-System"><a href="#5-1-Meet-File-System" class="headerlink" title="5.1 Meet File System"></a>5.1 Meet File System</h2><blockquote><p><em>“In UNIX Everything is a File.”</em></p></blockquote><h3 id="5-1-1-Types-of-Files"><a href="#5-1-1-Types-of-Files" class="headerlink" title="5.1.1 Types of Files"></a>5.1.1 Types of Files</h3><blockquote><p>Generally, there are 7 types of file. This can be seen at the first character in <code>ls -l</code> command.</p><table><thead><tr><th align="center">character</th><th align="center">type</th></tr></thead><tbody><tr><td align="center"><code>d</code></td><td align="center">directory</td></tr><tr><td align="center"><code>l</code></td><td align="center">symbol link</td></tr><tr><td align="center"><code>s</code></td><td align="center">socket</td></tr><tr><td align="center"><code>b</code></td><td align="center">bock device</td></tr><tr><td align="center"><code>c</code></td><td align="center">character device</td></tr><tr><td align="center"><code>p</code></td><td align="center">pipe</td></tr><tr><td align="center"><code>-</code></td><td align="center">else, for example text file or executable</td></tr></tbody></table></blockquote><h3 id="5-1-x-Trivia"><a href="#5-1-x-Trivia" class="headerlink" title="5.1.x Trivia"></a>5.1.x Trivia</h3><blockquote><p>Here’s a little understanding of file system of us. Like composite pattern, directory and file are quite similar in most behaviors, except that directory maintains an entry list of its content. For directory, it will always have two special files: <code>.</code> and <code>..</code> to represent itself and it parent. For root directory <code>/</code>, these two are the same.</p><p>Here is a good reference on Linux file system: <a href="https://www.eet-china.com/mp/a38145.html">https://www.eet-china.com/mp/a38145.html</a>.</p></blockquote><h2 id="5-2-File-Operation"><a href="#5-2-File-Operation" class="headerlink" title="5.2 File Operation"></a>5.2 File Operation</h2><h3 id="5-2-1-Two-Types-of-File-I-O"><a href="#5-2-1-Two-Types-of-File-I-O" class="headerlink" title="5.2.1 Two Types of File I&#x2F;O"></a>5.2.1 Two Types of File I&#x2F;O</h3><blockquote><p>Generally, there are two types of file I&#x2F;O, file I&#x2F;O and standard I&#x2F;O. Standard I&#x2F;O maintains an extra buffer while file I&#x2F;O does not have a buffer like the real system call. File I&#x2F;O follows POSIX standard and standard I&#x2F;O follows C standard.</p><table><thead><tr><th align="center"></th><th align="center">pros</th><th align="center">cons</th></tr></thead><tbody><tr><td align="center">system call</td><td align="center">have user buffer, which is read and write first, only call system call when necessary, reduced system call</td><td align="center">could not read and write in-time, and the buffer size is set and could not change</td></tr><tr><td align="center">standard call</td><td align="center">can read and write a file directly, and can apply custom buffer size</td><td align="center">too much system calls will make system busy</td></tr></tbody></table></blockquote><h3 id="5-2-2-File-Operation"><a href="#5-2-2-File-Operation" class="headerlink" title="5.2.2 File Operation"></a>5.2.2 File Operation</h3><blockquote><p>Basically, there are six file operations: <code>open</code>, <code>creat</code>, <code>lseek</code>, <code>read</code>, <code>write</code>, <code>close</code>. Since we’re familiar with these in C, here only system call is shown. And they require <code>fcntl.h</code>, and <code>sys/types.h</code> if some types are used.</p></blockquote><h4 id="5-2-2-1-open"><a href="#5-2-2-1-open" class="headerlink" title="5.2.2.1 open"></a>5.2.2.1 open</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>; <span class="comment">// The ellipse is for mode</span></span><br></pre></td></tr></table></figure><p>Three essential flags must be one and only one: <code>O_RDONLY</code>, <code>O_WRONLY</code>, <code>O_RDWR</code>.</p><p>There are some extra flags to be added.</p><table><thead><tr><th align="center"><code>flags</code></th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center"><code>O_APPEND</code></td><td align="center">append data to the end</td></tr><tr><td align="center"><code>O_TRUNC</code></td><td align="center">if file exist and is opened with <code>O_RDWR</code>, then the file is truncated to empty</td></tr><tr><td align="center"><code>O_CREAT</code></td><td align="center">if file doesn’t exist, then a new one is created, and the third parameter is required</td></tr><tr><td align="center"><code>O_EXCL</code></td><td align="center">if <code>O_CREAT</code> is assigned, and the file exists, it will cause an error, exclusive, huh</td></tr></tbody></table><p>For the return value, if succeeded, it will return file description, usually used as <code>fd</code>. Otherwise <code>-1</code> is returned.</p><p>The process holds a mapping from <code>fd</code> to file pointer to locate the actual file.</p><img src="/posts/Linux-File-System/image-20221225110549665.png" alt="image-20221225110549665" style="zoom:50%;"><p>For <code>mode_t</code>, its just the, you know <code>rwxr--r--</code> stuff, an oct number.</p></blockquote><h4 id="5-2-2-2-creat"><a href="#5-2-2-2-creat" class="headerlink" title="5.2.2.2 creat"></a>5.2.2.2 creat</h4><blockquote><p>Create a file needs mode. <code>open</code> can do this, too. For <code>creat</code>, the return file is write only, and will be emptied if exits. However, we can use open to open it in <code>O_RDWR</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">creat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, O_WRONLY | O_CREAT | O_TRUNC, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, O_RDWR | O_CREAT | O_TRUNC, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="5-2-2-3-lseek"><a href="#5-2-2-3-lseek" class="headerlink" title="5.2.2.3 lseek"></a>5.2.2.3 lseek</h4><blockquote><p>To change current file pointer offset. <code>off_t</code> is a <code>long int</code>. It will return new file offset or <code>-1</code> if failed. It won’t cause system call, just change the record in kernal.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">whence</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center"><code>SEEK_SET</code></td><td align="center">ret &#x3D; 0 + offset</td></tr><tr><td align="center"><code>SEEK_CUR</code></td><td align="center">ret &#x3D; cur + offset</td></tr><tr><td align="center"><code>SEEK_END</code></td><td align="center">ret &#x3D; end + offset</td></tr></tbody></table><p>So we can get current offset by calling <code>lseek(fd, 0, SEEK_CUR);</code></p><p><code>lseek</code> may cause void area in a file.</p><img src="/posts/Linux-File-System/image-20221225110117904.png" alt="image-20221225110117904" style="zoom: 50%;"></blockquote><h4 id="5-2-2-4-read"><a href="#5-2-2-4-read" class="headerlink" title="5.2.2.4 read"></a>5.2.2.4 read</h4><blockquote><p>This is quite easy to understand. This doesn’t care about <code>\0</code>, and return actual size read.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buff, <span class="type">size_t</span> nbytes)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="5-2-2-5-write"><a href="#5-2-2-5-write" class="headerlink" title="5.2.2.5 write"></a>5.2.2.5 write</h4><blockquote><p>This is quite easy to understand. This doesn’t care about <code>\0</code>, and return actual size written.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span>* buff, <span class="type">size_t</span> nbytes)</span>;</span><br></pre></td></tr></table></figure></blockquote><h4 id="5-2-2-6-close"><a href="#5-2-2-6-close" class="headerlink" title="5.2.2.6 close"></a>5.2.2.6 close</h4><blockquote><p>Just close a file by its description.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br></pre></td></tr></table></figure></blockquote><h3 id="5-2-3-Duplication"><a href="#5-2-3-Duplication" class="headerlink" title="5.2.3 Duplication"></a>5.2.3 Duplication</h3><blockquote><p><code>dup</code> function duplicate the file description, with the minimum file description returned. <code>dup2</code> does the same thing but the new file description is specially assigned. If the new one is occupied, the previous one will be closed automatically. These just duplicate the file description, they share the same file entity.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dup</span><span class="params">(<span class="type">int</span> oldfd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dup2</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd)</span>;</span><br></pre></td></tr></table></figure><p>Well, file description 0, 1, 2 are occupied by default for user programs, they are <code>stdin</code>, <code>stdou</code> and <code>stderr</code>.</p></blockquote><h2 id="5-3-Directory-Operation"><a href="#5-3-Directory-Operation" class="headerlink" title="5.3 Directory Operation"></a>5.3 Directory Operation</h2><blockquote><p><em>“Not that important, I guess?”</em></p><p>Here is an example, which realized a basic <code>ls</code> command.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ls.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Usage: ./ls directory\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DIR* dir = opendir(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (dir == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Oops, invalid directory!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">file</span>;</span></span><br><span class="line"><span class="keyword">while</span> ((file = readdir(dir)) != <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, file-&gt;d_name);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">closedir(dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="5-4-Link"><a href="#5-4-Link" class="headerlink" title="5.4 Link"></a>5.4 Link</h2><blockquote><p>There are two types of links in Linux, hard link and soft link (symbol link). Hard link share the same file content, which means they have the same <code>inode</code>, just increase the <code>inode</code> reference count. Symbol link stores target file directory, and is in fact an independent file. Hard link and source file are identical, or it is a replica, while symbol link is like a shortcut in Windows.</p><p>To create a link, use <code>ln</code> command, and <code>-s</code> parameter to create symbol link.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> [-s] src_name link_name</span><br></pre></td></tr></table></figure></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell Programming</title>
      <link href="/posts/Shell-Programming/"/>
      <url>/posts/Shell-Programming/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Four-Shell"><a href="#Chapter-Four-Shell" class="headerlink" title="Chapter Four - Shell"></a>Chapter Four - Shell</h1><h2 id="4-1-Get-Ready-for-Shell"><a href="#4-1-Get-Ready-for-Shell" class="headerlink" title="4.1 Get Ready for Shell"></a>4.1 Get Ready for Shell</h2><h3 id="4-1-1-Redirect"><a href="#4-1-1-Redirect" class="headerlink" title="4.1.1 Redirect"></a>4.1.1 Redirect</h3><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> stdin: &lt;</span><br><span class="line">stdout: &gt; or 1&gt;</span><br><span class="line">stderr: 2&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-1-2-Pipe"><a href="#4-1-2-Pipe" class="headerlink" title="4.1.2 Pipe"></a>4.1.2 Pipe</h3><blockquote><p>Just wire the output of a command to the input of another command.</p><p>Here is a comprehensive example. Output of the first <code>cat</code>, which is the content of <code>a.txt</code>  is wired to the input of the second <code>cat</code>, whose <code>stdout</code> is redirected to file <code>b.txt</code>, and <code>stderr</code> is redirected to <code>stdout</code>. However, there is no such thing like <code>2&gt;&gt;&amp;1</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.txt | <span class="built_in">cat</span> &gt;&gt;b.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-1-3-Environment-Variable"><a href="#4-1-3-Environment-Variable" class="headerlink" title="4.1.3 Environment Variable"></a>4.1.3 Environment Variable</h3><h4 id="4-1-3-1-Add-Environment-Variable"><a href="#4-1-3-1-Add-Environment-Variable" class="headerlink" title="4.1.3.1 Add Environment Variable"></a>4.1.3.1 Add Environment Variable</h4><blockquote><p>Well, as you’ve known before, it is easy to add environment variables to current bash process.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> environment_variable=xxx</span><br></pre></td></tr></table></figure><p>But if you want this variable added to the bash permanently, you have to put that line to <code>~/.bashrc</code> file, which is loaded every time for initialization.</p></blockquote><h4 id="4-1-3-2-Get-Environment-Variable"><a href="#4-1-3-2-Get-Environment-Variable" class="headerlink" title="4.1.3.2 Get Environment Variable"></a>4.1.3.2 Get Environment Variable</h4><blockquote><p>For C, there are several ways to get environment variable.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Method 1, use global environ.</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span>** environ;</span><br><span class="line"><span class="comment">// Method 2, use parameter of main.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* envp[])</span> &#123;...&#125;</span><br><span class="line"><span class="comment">// Method 3, use function.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* value = getenvp(<span class="string">&quot;var_name&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote><h4 id="4-1-3-3-Execute-Permission"><a href="#4-1-3-3-Execute-Permission" class="headerlink" title="4.1.3.3 Execute Permission"></a>4.1.3.3 Execute Permission</h4><blockquote><p>See [chmod](#1.4.8 chmod).</p></blockquote><h2 id="4-2-Shell-Programming"><a href="#4-2-Shell-Programming" class="headerlink" title="4.2 Shell Programming"></a>4.2 Shell Programming</h2><h3 id="4-2-1-Special-Symbols"><a href="#4-2-1-Special-Symbols" class="headerlink" title="4.2.1 Special Symbols"></a>4.2.1 Special Symbols</h3><blockquote><p><code>#!/bin/bash</code>: Must be at the first line to indicate interpreter.</p><p><code>#</code>: In-line comment. Use <code>\#</code> if you really want a <code>#</code>.</p><p><code>;</code>: Separate multiple commands. e.g. <code>echo Hello; echo there!</code></p><p><code>,</code>: Separate arithmetic expression, just like C. Here is an example.</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ a=$((b = <span class="number">9</span>, <span class="number">15</span> / <span class="number">3</span>))   <span class="comment"># check out 4.2.4</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$a</span>;</span><br><span class="line">$ 5</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line">$ 9</span><br></pre></td></tr></table></figure></blockquote><p><code>\</code>: Escape character, similar to what is in C.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \<span class="variable">$num</span></span><br><span class="line">$ <span class="variable">$num</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-2-2-Run-Bash-Script"><a href="#4-2-2-Run-Bash-Script" class="headerlink" title="4.2.2 Run Bash Script"></a>4.2.2 Run Bash Script</h3><blockquote><p>There are several ways to run a bash script. If we directly run it by .&#x2F;filename, it must have execute permission. Use <code>chmod u+x script.sh</code>. And <code>#!/bin/bash</code> is preferred, although default bash will be selected if this is missing. The other two don’t need these.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./script.sh</span><br><span class="line">$ bash script.sh</span><br><span class="line">$ <span class="built_in">source</span> script.sh</span><br></pre></td></tr></table></figure><p>One more thing, why <code>./</code> is needed? Because not like what is in Windows, in Linux, current directory is not added to the environment path for… for security reason. Not any ordinary environment variable, but PATH. Once added, we can simply run a bash script just by its name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:.<span class="comment"># &#x27;:&#x27; connects variables</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="4-2-3-Exit-Status"><a href="#4-2-3-Exit-Status" class="headerlink" title="4.2.3 Exit Status"></a>4.2.3 Exit Status</h3><blockquote><p>We can use <code>exit ret </code> to exit a bash script with a return value <code>ret</code>. 0 means success, anything else is considered not good. If <code>exit</code> is missing, then the return value depends on the last statement executed in the script. </p><p>For the return value, we are recommended to use 0 ~ 125, 126 means not executable, 127 means command not found, and 128+ means signal received. The last return value is stored in <code>$?</code>.</p><p>Like C, expression can be put together by some logic operator. <code>&amp;&amp;</code> and <code>||</code> remains the same meaning and function. But here in bash, 0 means true, others are regarded as false. For <code>&amp;&amp;</code>, if previous statement is false, bash will abandon latter statements and return false.</p></blockquote><h3 id="4-2-3-Variables"><a href="#4-2-3-Variables" class="headerlink" title="4.2.3 Variables"></a>4.2.3 Variables</h3><blockquote><p><em>“I always hate variables in script language.”</em></p></blockquote><h4 id="4-2-3-1-Declaration"><a href="#4-2-3-1-Declaration" class="headerlink" title="4.2.3.1 Declaration"></a>4.2.3.1 Declaration</h4><blockquote><p>Variable name is the same as C, but could not contain ‘$’. The value… I hate this. String value is just plain text if contains no space. Quote it with ‘’ or “” like <code>var=&quot;Hello there!&quot;</code>. These two are a little different, though.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ var=value                 <span class="comment"># no space, no $</span></span><br><span class="line">$ <span class="built_in">readonly</span> const=constant   <span class="comment"># read-only variable</span></span><br></pre></td></tr></table></figure><p>If you do not want a variable any more, you can use <code>unset</code> to… unset it. :P</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> var</span><br></pre></td></tr></table></figure></blockquote><h4 id="4-2-3-2-Quotes"><a href="#4-2-3-2-Quotes" class="headerlink" title="4.2.3.2 Quotes"></a>4.2.3.2 Quotes</h4><blockquote><p>In Bash, there are three types of quotes. A little tricky, huh?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Three types of quote have different behaviors.</span></span><br><span class="line">$ plain=<span class="string">&#x27;this is $plain &quot;text&quot; $?&#x27;</span></span><br><span class="line">$ rich=<span class="string">&quot;this is not &#x27;<span class="variable">$plain</span>&#x27; text&quot;</span></span><br><span class="line">$ super=`<span class="built_in">echo</span> this is not \&#x27;<span class="variable">$rich</span>\&#x27; text`</span><br><span class="line"><span class="comment"># Here are the results.</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$plain</span></span><br><span class="line">this is <span class="variable">$plain</span> <span class="string">&quot;text&quot;</span> $?</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$rich</span></span><br><span class="line">this is not <span class="string">&#x27;this is $plain &quot;text&quot; $?&#x27;</span> text</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$super</span></span><br><span class="line">this is not <span class="string">&#x27;this is not &#x27;</span>this is <span class="variable">$plain</span> <span class="string">&quot;text&quot;</span> $?<span class="string">&#x27; text&#x27;</span> text</span><br></pre></td></tr></table></figure></blockquote><h4 id="4-2-3-3-Internal-Variables"><a href="#4-2-3-3-Internal-Variables" class="headerlink" title="4.2.3.3 Internal Variables"></a>4.2.3.3 Internal Variables</h4><blockquote><table><thead><tr><th align="center">Interval Variable</th><th align="center">Meaning</th></tr></thead><tbody><tr><td align="center"><code>$?</code></td><td align="center">last return value</td></tr><tr><td align="center"><code>$#</code></td><td align="center">number of parameters, just like <code>argc</code></td></tr><tr><td align="center"><code>$*</code></td><td align="center">all parameters passed to the script, just like <code>argv</code> as a string</td></tr><tr><td align="center"><code>$@</code></td><td align="center">all parameters, no IFS, more like <code>argv</code>, seperated strings</td></tr><tr><td align="center"><code>$$</code></td><td align="center">pid of current bash process, commonly used as temp file name</td></tr><tr><td align="center"><code>$!</code></td><td align="center">pid of the last process in background</td></tr><tr><td align="center"><code>$0</code></td><td align="center">current process name, just like <code>argv[0]</code></td></tr><tr><td align="center"><code>$1</code> to <code>$9</code></td><td align="center">parameters, just like <code>argv[i]</code></td></tr></tbody></table><p>For <code>$#</code> and <code>$@</code>, things can be really tricky. Here is a good example.</p><p>This example comes from here: <a href="https://unix.stackexchange.com/questions/129072/whats-the-difference-between-and">What’s the difference between $@ and $*</a>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;With *:&quot;</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;&lt;<span class="variable">$arg</span>&gt;&quot;</span>; <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;With @:&quot;</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;&lt;<span class="variable">$arg</span>&gt;&quot;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Its output can be as follows.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ifs A B <span class="string">&quot;C D&quot;</span></span><br><span class="line">With *:</span><br><span class="line">&lt;A B C D&gt;</span><br><span class="line">With @:</span><br><span class="line">&lt;A&gt;</span><br><span class="line">&lt;B&gt;</span><br><span class="line">&lt;C D&gt;</span><br></pre></td></tr></table></figure><p>For <code>$1</code> to <code>$9</code>, we can use <code>shift</code> to shit them. After shift, <code>$1</code> will become <code>$2</code>, and so on. But this won’t affect <code>$0</code>.</p></blockquote><h4 id="4-2-3-4-Variable-Replacement"><a href="#4-2-3-4-Variable-Replacement" class="headerlink" title="4.2.3.4 Variable Replacement"></a>4.2.3.4 Variable Replacement</h4><blockquote><p>There are some advanced, but tricky variable assignment.</p><p><code>var=$&#123;param:-word&#125;</code>: If <code>param</code> is set, then <code>var</code> is set to <code>param</code>. Or <code>var</code> is set to <code>word</code>, like a default value.</p><p><code>var=$&#123;param:=word&#125;</code>: If <code>param</code> is set, then <code>var</code> is set to param. Or both <code>var</code> and <code>param</code> is set to <code>word</code>.</p><p><code>var=$&#123;param:?word&#125;</code>: If <code>param</code> is set, then <code>var</code> is set to param. Otherwise, script will display error info and exit with return value 1. The error info is as follows.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-bash: param: word                       <span class="comment"># word is not null</span></span><br><span class="line">-bash: param: parameter null or not <span class="built_in">set</span>  <span class="comment"># word is omitted var=$&#123;param:?&#125;</span></span><br></pre></td></tr></table></figure><p><code>var=$&#123;param:+word&#125;</code>: If <code>param</code> is set, then <code>var</code> is set to <code>word</code>. Or <code>var</code> is set to null.</p><p>Err… you know, we can simply use <code>$&#123;param:-word&#125;</code> alone… It’s just a value, and this is it.</p></blockquote><h3 id="4-2-4-Expression"><a href="#4-2-4-Expression" class="headerlink" title="4.2.4 Expression"></a>4.2.4 Expression</h3><blockquote><p><em>“I hate expressions in these script languages.”</em></p></blockquote><h4 id="4-2-4-1-Variables-in-Expression"><a href="#4-2-4-1-Variables-in-Expression" class="headerlink" title="4.2.4.1 Variables in Expression"></a>4.2.4.1 Variables in Expression</h4><blockquote><p>Just add dollar sign before a variable to use it. For command variables, both $() and &#96;&#96; are OK.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$variable</span></span><br><span class="line">$(<span class="built_in">command</span>)</span><br><span class="line">`<span class="built_in">command</span>`</span><br></pre></td></tr></table></figure><p>For arithmetic variables, use <code>$((...))</code> to wrap them, or use <code>expr</code> command. Or more directly, use <code>let</code> command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ a=$((<span class="number">3</span> + <span class="number">4</span> + <span class="variable">$b</span>))</span><br><span class="line">$ c=$(<span class="built_in">expr</span> 5 + <span class="variable">$d</span> + 7)</span><br><span class="line">$ <span class="built_in">let</span> a=a++</span><br><span class="line">$ <span class="built_in">let</span> a=a+1+5</span><br><span class="line">$ <span class="built_in">let</span> <span class="string">&quot;a = a * (3 + 4)&quot;</span></span><br></pre></td></tr></table></figure><p>For a more powerful way to use variables, you can consider <code>$&#123;&#125;</code>. In this way, I guess, number is regarded as string. However, in x64 architecture, numbers seem to be a 64 bits signed value in calculation.</p><table><thead><tr><th align="center">format</th><th align="center">return value</th></tr></thead><tbody><tr><td align="center"><code>$var</code> or <code>$&#123;var&#125;</code></td><td align="center">value of the variable</td></tr><tr><td align="center"><code>$&#123;#var&#125;</code></td><td align="center">length of the variable</td></tr><tr><td align="center"><code>$&#123;var:start&#125;</code></td><td align="center">substring of the variable from start to end</td></tr><tr><td align="center"><code>$&#123;var:start:length&#125;</code></td><td align="center">substring of the variable from start in given length, or till the end</td></tr></tbody></table></blockquote><h4 id="4-2-4-2-Condition-Expression"><a href="#4-2-4-2-Condition-Expression" class="headerlink" title="4.2.4.2 Condition Expression"></a>4.2.4.2 Condition Expression</h4><blockquote><p>In Bash, we can use <code>test condition</code> to check condition, or just <code>[condition]</code>. There are four types of condition check, string, number, logic and file.</p><p>For string comparation, there are five operations. Be aware of the space around ‘[‘, ‘]’ and ‘&#x3D;’.</p><table><thead><tr><th align="center">test</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center">[ str1 &#x3D; str2 ] or [ str1 &#x3D;&#x3D; str2 ]</td><td align="center">return true if str1 and str2 are the same</td></tr><tr><td align="center">[ str1 !&#x3D; str2]</td><td align="center">return true if str1 and str2 are different</td></tr><tr><td align="center">[ str ]</td><td align="center">return true if str is not null</td></tr><tr><td align="center">[ -n str ]</td><td align="center">return true if length of str is greater than zero</td></tr><tr><td align="center">[ -z str ]</td><td align="center">return true if length of str is zero</td></tr></tbody></table><p>For arithmetic comparation, we can also use condition expression.</p><table><thead><tr><th align="center">test</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center">[ a -eq b ]</td><td align="center">return true if a &#x3D;&#x3D; b</td></tr><tr><td align="center">[ a -ne b ]</td><td align="center">return true if a !&#x3D; b</td></tr><tr><td align="center">[ a -ge b]</td><td align="center">return true if a &gt;&#x3D; b</td></tr><tr><td align="center">[ a -le b ]</td><td align="center">return true if a &lt;&#x3D; b</td></tr><tr><td align="center">[ a -gt b ]</td><td align="center">return true if a &gt; b</td></tr><tr><td align="center">[ a -lt b ]</td><td align="center">return true if a &lt; b</td></tr></tbody></table><p>Or, we can just use ((expression)) to replace [ condition ], which is easier to understand.</p><p>For logic condition, it is quite like arithmetic.</p><table><thead><tr><th align="center">test</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center">!expr</td><td align="center">not</td></tr><tr><td align="center">expr1 -a expr2</td><td align="center">and</td></tr><tr><td align="center">expr1 -o expr2</td><td align="center">or</td></tr></tbody></table><p>For file condition, things are almost the same.</p><table><thead><tr><th align="center">test</th><th align="center">meaning</th></tr></thead><tbody><tr><td align="center">[ -d file ]</td><td align="center">return true if file is a directory</td></tr><tr><td align="center">[ -f file ]</td><td align="center">return true if file is a file</td></tr><tr><td align="center">[ -r file ]</td><td align="center">return true if file is readable</td></tr><tr><td align="center">[ -w file ]</td><td align="center">return true if file is writable</td></tr><tr><td align="center">[ -x file ]</td><td align="center">return true if file is executable</td></tr><tr><td align="center">[ -s file ]</td><td align="center">return true if file size greater than zero</td></tr></tbody></table></blockquote><h4 id="4-2-4-3-Branch-and-Loop"><a href="#4-2-4-3-Branch-and-Loop" class="headerlink" title="4.2.4.3 Branch and Loop"></a>4.2.4.3 Branch and Loop</h4><blockquote><p>It’s a little wired to have <code>If-then-elif-then-else</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">elif</span> [ condition ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>It’s even more wired with switch-case. :(</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">in</span></span><br><span class="line">pattern1)</span><br><span class="line">statements</span><br><span class="line">;;</span><br><span class="line">pattern2)</span><br><span class="line">statements</span><br><span class="line">;;</span><br><span class="line">*)<span class="comment"># default</span></span><br><span class="line">statements</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>There are three kinds of loop in Bash, <code>while</code>, <code>until</code> and <code>for</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># loop while condition is true</span></span><br><span class="line"><span class="keyword">while</span> [ condition ]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># loop until condition is true</span></span><br><span class="line"><span class="keyword">until</span> [ condition ]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># for is a little tricky</span></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> [list]; <span class="keyword">do</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># for can also be like this in a simpler format</span></span><br><span class="line"><span class="keyword">for</span> ((i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)); <span class="keyword">do</span></span><br><span class="line"><span class="comment"># statements</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Hmm… An extra example, I think, redirect can be appended to loop.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print the 10th line in a file</span></span><br><span class="line">file=<span class="string">&quot;test.txt&quot;</span></span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span> ((<span class="variable">$i</span>==<span class="number">10</span>)); <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="variable">$file</span></span><br></pre></td></tr></table></figure><p>For <code>for</code> loop, list is a string or array, for example, we can write this.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>And it will print things out.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>Actually you can refer to previous example with [$@ and $*](#4.2.3.3 Internal Variables).</p></blockquote><h3 id="4-2-5-Array"><a href="#4-2-5-Array" class="headerlink" title="4.2.5 Array"></a>4.2.5 Array</h3><blockquote><p>Ahh… tired… leave it alone. :(</p></blockquote><h3 id="4-2-x-Example"><a href="#4-2-x-Example" class="headerlink" title="4.2.x Example"></a>4.2.x Example</h3><blockquote><p><em>“Talk is cheap, show me the code.”</em></p><p>Here is a comprehensive example. The script has one parameter, and its meaning is as follows.</p><ul><li><code>mine</code>: find all files that belongs to the current user under the current directory and print their filenames. (not recursively)</li><li><code>largest</code>：print the largest file under the current directory. (not recursively)</li><li><code>expand</code>: move all files recursively to the current directory, and then delete all subfolders (they should be empty now).</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">dir</span>=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment"># A recursive function example.</span></span><br><span class="line"><span class="keyword">function</span> move &#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(ls -A $&#123;1&#125;)</span>&quot;</span> ]; <span class="keyword">then</span><span class="comment"># dir must not be empty</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;1&#125;</span>/*; <span class="keyword">do</span>    <span class="comment"># empty dir will cause file match plain text </span></span><br><span class="line">filename=`<span class="built_in">basename</span> <span class="variable">$file</span>`</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$filename</span> ]; <span class="keyword">then</span></span><br><span class="line">new=<span class="string">&quot;<span class="variable">$&#123;1&#125;</span>/<span class="variable">$filename</span>&quot;</span></span><br><span class="line">                  move <span class="variable">$new</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;1&#125;</span> != <span class="variable">$dir</span> ]; <span class="keyword">then</span></span><br><span class="line">old=<span class="string">&quot;<span class="variable">$&#123;1&#125;</span>/<span class="variable">$filename</span>&quot;</span></span><br><span class="line">                      new=<span class="string">&quot;<span class="variable">$dir</span>/<span class="variable">$filename</span>&quot;</span></span><br><span class="line">                      <span class="built_in">mv</span> <span class="variable">$old</span> <span class="variable">$new</span></span><br><span class="line">                      <span class="comment"># echo &quot;Move $old to $new&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># empty string check</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Usage: ./manage.sh OPERATION&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># string compa</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> == <span class="string">&quot;mine&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">flag=0</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;dir&#125;</span>/*; <span class="keyword">do</span></span><br><span class="line">filename=`<span class="built_in">basename</span> <span class="variable">$file</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$filename</span> == `<span class="built_in">basename</span> <span class="variable">$0</span>` ]; <span class="keyword">then</span><span class="comment"># we don&#x27;t want itself</span></span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$filename</span> ]; <span class="keyword">then</span><span class="comment"># we don&#x27;t want a directory</span></span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -O <span class="variable">$filename</span> ]; <span class="keyword">then</span><span class="comment"># if belongs to the current user</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$filename</span> &quot;</span></span><br><span class="line">flag=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> (( <span class="variable">$flag</span> == <span class="number">1</span> )); <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;largest&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">largestSize=-1</span><br><span class="line">largestFile=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(ls -A $&#123;dir&#125;)</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;dir&#125;</span>/*; <span class="keyword">do</span></span><br><span class="line">filename=`<span class="built_in">basename</span> <span class="variable">$file</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$filename</span> == `<span class="built_in">basename</span> <span class="variable">$0</span>` ]; <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$filename</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">size=$(<span class="built_in">stat</span> -c %s <span class="string">&quot;<span class="variable">$filename</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (( <span class="variable">$size</span> &gt; <span class="variable">$largestSize</span> )); <span class="keyword">then</span></span><br><span class="line">largestSize=<span class="variable">$size</span></span><br><span class="line">             largestFile=<span class="variable">$filename</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$largestFile</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Largest file: <span class="variable">$largestFile</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span><span class="comment"># if [ &quot;$(ls -A $&#123;dir&#125;)&quot; ]; then</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> == <span class="string">&quot;expand&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">move <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(ls -A $&#123;dir&#125;)</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;dir&#125;</span>/*; <span class="keyword">do</span></span><br><span class="line">filename=`<span class="built_in">basename</span> <span class="variable">$file</span>`</span><br><span class="line">         <span class="keyword">if</span> [ -d <span class="variable">$filename</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="variable">$filename</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Invalid argument! [mine, largest, expand]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Programming</title>
      <link href="/posts/Linux-Programming/"/>
      <url>/posts/Linux-Programming/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Three-Linux-Programming"><a href="#Chapter-Three-Linux-Programming" class="headerlink" title="Chapter Three - Linux Programming"></a>Chapter Three - Linux Programming</h1><h2 id="3-1-GCC"><a href="#3-1-GCC" class="headerlink" title="3.1 GCC"></a>3.1 GCC</h2><h3 id="3-1-1-What-is-GCC"><a href="#3-1-1-What-is-GCC" class="headerlink" title="3.1.1 What is GCC"></a>3.1.1 What is GCC</h3><blockquote><p>GCC is short for <code>GNU Compiler Collection</code>.</p></blockquote><h3 id="3-1-2-Compile-Procedure"><a href="#3-1-2-Compile-Procedure" class="headerlink" title="3.1.2 Compile Procedure"></a>3.1.2 Compile Procedure</h3><blockquote><ol><li>Write source code, e.g. <code>main.c</code>.</li><li><code>gcc -E main.c -o main.i</code>: Preprocess, insert header files, macro replacement and remove comments.</li><li><code>gcc -S main.i -o main.s</code>: C compiler complies C to assembly.</li><li><code>gcc -c main.s -o main.o</code>: Assembler will compile assembly to binary file.</li><li><code>gcc main.o [trivia.o ...] -o main</code>: Perform linkage to generate the final executable.</li></ol><p>PS: It seems that GCC need file extension to identify file type. :P</p></blockquote><h3 id="3-1-3-Extra-Compile-Options"><a href="#3-1-3-Extra-Compile-Options" class="headerlink" title="3.1.3 Extra Compile Options"></a>3.1.3 Extra Compile Options</h3><blockquote><table><thead><tr><th>parameter</th><th>meaning</th></tr></thead><tbody><tr><td><code>-g</code></td><td>add debug info, <code>gdb</code> needs this</td></tr><tr><td><code>-D</code></td><td>add extra macro, e.g. <code>-DDEBUG</code> or <code>-DDEBUG=0</code></td></tr><tr><td><code>-O</code> <code>-O1</code> <code>-O2</code> <code>-O3</code></td><td>optimization</td></tr><tr><td><code>-W1</code> <code>-W2</code> <code>-W3</code> <code>-Wall</code></td><td>warning level</td></tr><tr><td><code>-I</code></td><td>extra include directory, e.g. <code>-I inc</code> or <code>-Iinc</code> to add <code>./inc</code></td></tr><tr><td><code>-L</code></td><td>extra library directory, e.g. <code>-L.</code> or <code>-L .</code> to add <code>./</code></td></tr></tbody></table></blockquote><h3 id="3-1-4-Library"><a href="#3-1-4-Library" class="headerlink" title="3.1.4 Library"></a>3.1.4 Library</h3><h4 id="3-1-4-1-Static-Library"><a href="#3-1-4-1-Static-Library" class="headerlink" title="3.1.4.1 Static Library"></a>3.1.4.1 Static Library</h4><blockquote><p>Create static library. <code>ar</code> is for archive, huh?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c tinyxml.c -o tinyxml.o</span><br><span class="line">ar cr libtinyxml.a tinyxml.o</span><br></pre></td></tr></table></figure><p>Use static library.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main main.o -L. -ltinyxml</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-1-4-1-Dynamic-Library"><a href="#3-1-4-1-Dynamic-Library" class="headerlink" title="3.1.4.1 Dynamic Library"></a>3.1.4.1 Dynamic Library</h4><blockquote><p>Create dynamic library.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC -c fmod.c -o fmod.o</span><br><span class="line">gcc -shared -fPIC -o libfmod.so fmod.o</span><br></pre></td></tr></table></figure><p>Use dynamic library. We have to set library path before we run the program. Or it won’t find it. Linux doesn’t support, you know, <code>#pragma</code> things. :(</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Do the linkage.</span></span><br><span class="line">gcc main.c libfmod.so -o main</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set library path.</span></span><br><span class="line">LD_LIBRARY_PATH=.</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the executable.</span></span><br><span class="line">./main</span><br></pre></td></tr></table></figure><p>With dynamic library, if the dynamic library changes, it doesn’t need another compile, and the output will change accordingly. </p></blockquote><h2 id="3-2-GDB"><a href="#3-2-GDB" class="headerlink" title="3.2 GDB"></a>3.2 GDB</h2><blockquote><p><em>“I don’t like nude GDB at all!”</em></p></blockquote><h3 id="3-2-1-Launch-GDB"><a href="#3-2-1-Launch-GDB" class="headerlink" title="3.2.1 Launch GDB"></a>3.2.1 Launch GDB</h3><blockquote><p>GDB can be launched with executable name.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Method 1</span><br><span class="line">gdb main</span><br><span class="line"># Method 2</span><br><span class="line">gdb</span><br><span class="line">file main</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-2-2-Run-Program"><a href="#3-2-2-Run-Program" class="headerlink" title="3.2.2 Run Program"></a>3.2.2 Run Program</h3><blockquote><p>Err… after you successfully launched GDB.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run [...args]</span><br><span class="line">start [..]# will stops at main</span><br><span class="line">continue# continue running</span><br></pre></td></tr></table></figure><p>Why bother doing this like a primitive and not using VS with WSL?</p></blockquote><h3 id="3-2-3-Break-Point"><a href="#3-2-3-Break-Point" class="headerlink" title="3.2.3 Break Point"></a>3.2.3 Break Point</h3><blockquote><p>Many ways to add break point using <code>break</code>, a.k.a. <code>b</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">break [function name]</span><br><span class="line">break [line number]</span><br><span class="line">break [filename] : [line number]</span><br><span class="line">break [*adress]</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-2-4-Watch"><a href="#3-2-4-Watch" class="headerlink" title="3.2.4 Watch"></a>3.2.4 Watch</h3><blockquote><p>Ahh!!!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print variable</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-3-Make"><a href="#3-3-Make" class="headerlink" title="3.3 Make"></a>3.3 Make</h2><h3 id="3-3-1-Meet-Make"><a href="#3-3-1-Meet-Make" class="headerlink" title="3.3.1 Meet Make"></a>3.3.1 Meet Make</h3><blockquote><p><code>make</code> 是一个自动化的程序自动维护工具，它根据 <code>Makefile</code> 所描述的“依赖关系”自动决定项目的那些部分需要重新编译。</p><p><code>make</code> 根据目录下的 <code>Makefile</code> 文件确定文件的依赖关系，并确定哪些需要重新生成或不生成。</p><p><code>make</code> 将第一个目标文件作为最终目标文件，如果目标文件不存在，或目标文件递归依赖的目标有改动，则该目标文件需要重新生成。否则不需要生成。</p><p><code>.PHONY</code> 表示其后的目标是伪目标，而不将其作为文件处理。</p></blockquote><h3 id="3-3-2-Makefile"><a href="#3-3-2-Makefile" class="headerlink" title="3.3.2 Makefile"></a>3.3.2 Makefile</h3><blockquote><p>The format of <code>Makefile</code> is as follows.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target: prerequisites</span><br><span class="line">&lt;TAB&gt;command</span><br></pre></td></tr></table></figure><p>Here, I’d like to give an example.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File structure</span></span><br><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── include</span><br><span class="line">│   ├── dylib.h</span><br><span class="line">│   ├── fun1.h</span><br><span class="line">│   └── fun2.h</span><br><span class="line">├── lib</span><br><span class="line">│   └── libdy.so</span><br><span class="line">└── src</span><br><span class="line">    ├── fun1.c</span><br><span class="line">    ├── fun2.c</span><br><span class="line">    └── main.c</span><br><span class="line"><span class="comment"># Makefile</span></span><br><span class="line">main: init int/main.o int/fun1.o int/fun2.o lib/libdy.so</span><br><span class="line">   gcc int/main.o int/fun1.o int/fun2.o lib/libdy.so -o main -I include</span><br><span class="line">   int/main.o: src/main.c</span><br><span class="line">   gcc -c src/main.c -o int/main.o -I include</span><br><span class="line">   int/fun1.o: src/fun1.c include/fun1.h</span><br><span class="line">   gcc -c src/fun1.c -o int/fun1.o -I include</span><br><span class="line">   int/fun2.o: src/fun2.c include/fun2.h</span><br><span class="line">   gcc -c src/fun2.c -o int/fun2.o -I include</span><br><span class="line">   <span class="comment"># This dynamic library doesn&#x27;t have definition.</span></span><br><span class="line"><span class="comment"># lib/libdy.so:</span></span><br><span class="line">.PHONY: init clean</span><br><span class="line">init:</span><br><span class="line">   <span class="built_in">mkdir</span> -p ./int</span><br><span class="line">   clean:</span><br><span class="line">   <span class="built_in">rm</span> -r ./int/</span><br></pre></td></tr></table></figure><p>So, why not use IDE? <code>CMake</code> is also cool.</p></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="/posts/Vim/"/>
      <url>/posts/Vim/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Two-Vim"><a href="#Chapter-Two-Vim" class="headerlink" title="Chapter Two - Vim"></a>Chapter Two - Vim</h1><blockquote><p><em>“Visual Studio is the best IDE in the universe.”</em></p></blockquote><h2 id="2-1-Mode-of-Vim"><a href="#2-1-Mode-of-Vim" class="headerlink" title="2.1 Mode of Vim"></a>2.1 Mode of Vim</h2><blockquote><p>Vim 有三种模式，命令模式，编辑模式，和末行模式。</p><img src="/posts/Vim/image-20221224151737499.png" alt="image-20221224151737499" style="zoom:50%;"></blockquote><h2 id="2-2-Usage"><a href="#2-2-Usage" class="headerlink" title="2.2 Usage"></a>2.2 Usage</h2><h3 id="2-2-1-Quit-Vim"><a href="#2-2-1-Quit-Vim" class="headerlink" title="2.2.1 Quit Vim"></a>2.2.1 Quit Vim</h3><blockquote><p>Press ESC to enter command mode first.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:w  - save current file</span><br><span class="line">:q  - quit (must be saved before)</span><br><span class="line">:q! - force quit</span><br><span class="line">:wq - save and quit.</span><br><span class="line">:x  - same as :wq</span><br><span class="line">zz  - same as :wq, really?</span><br></pre></td></tr></table></figure></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Commands</title>
      <link href="/posts/Linux-Commands/"/>
      <url>/posts/Linux-Commands/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-One-Linux-Commands"><a href="#Chapter-One-Linux-Commands" class="headerlink" title="Chapter One - Linux Commands"></a>Chapter One - Linux Commands</h1><h2 id="1-1-System-Status"><a href="#1-1-System-Status" class="headerlink" title="1.1 System Status"></a>1.1 System Status</h2><h3 id="1-1-1-echo"><a href="#1-1-1-echo" class="headerlink" title="1.1.1 echo"></a>1.1.1 echo</h3><blockquote><p>echo is not Echo :P. Often used with redirect.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [string | <span class="variable">$var</span>]</span><br></pre></td></tr></table></figure><p>By default, echo will print a new line at the end, we can supress this by add <code>-n</code> parameter.</p><p>echo can also use escape character by add <code>-e</code> parameter, but only apply to parameters quoted with “ “ or ‘ ‘.</p></blockquote><h3 id="1-1-2-read"><a href="#1-1-2-read" class="headerlink" title="1.1.2 read"></a>1.1.2 read</h3><blockquote><p><code>read</code> can read user input. It will regard its parameter as variables and store the readin to them. <code>-p</code> can be used to add a promt info. Prompt it won’t add a new line, though.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">read</span> -p <span class="string">&quot;Please enter your name: &quot;</span> name [Tony]</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">$ Tony</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-3-date"><a href="#1-1-3-date" class="headerlink" title="1.1.3 date"></a>1.1.3 date</h3><blockquote><p>System date. -s parameter will set system date.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> [-s string]</span><br><span class="line">%t - Tab</span><br><span class="line">%H - Hour(00~24)</span><br><span class="line">%I - Hour(00~12)</span><br><span class="line">%M - Minute</span><br><span class="line">%S - Second</span><br><span class="line">%j - Day <span class="keyword">in</span> year</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-4-ps"><a href="#1-1-4-ps" class="headerlink" title="1.1.4 ps"></a>1.1.4 ps</h3><blockquote><p>Look for process state.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [aux | lax]</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-5-top"><a href="#1-1-5-top" class="headerlink" title="1.1.5 top"></a>1.1.5 top</h3><blockquote><p>Similar to task manager in Windows.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-6-pidof"><a href="#1-1-6-pidof" class="headerlink" title="1.1.6 pidof"></a>1.1.6 pidof</h3><blockquote><p>Look up for pid of certain process.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidof [params] [service_name]</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-7kill"><a href="#1-1-7kill" class="headerlink" title="1.1.7kill"></a>1.1.7kill</h3><blockquote><p>Send signal to given process.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> [-s signal] pid <span class="comment"># Send signal(optional) to process.</span></span><br><span class="line"><span class="built_in">kill</span> -l<span class="comment"># List all signals available.</span></span><br><span class="line"><span class="comment"># for example</span></span><br><span class="line"><span class="built_in">kill</span> -9 5023</span><br><span class="line"><span class="built_in">kill</span> -HUP 1034</span><br></pre></td></tr></table></figure><p>Common signals:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1) HUP: Reload process.</span><br><span class="line">9) SIGKILL: Kill process.</span><br><span class="line">15) SIGTERM: Terminate process in normal way</span><br></pre></td></tr></table></figure><p>However, <code>kill -9</code> can only kill process in user state, it could not kill zombie process, or process in kernel state.</p></blockquote><h3 id="1-1-8-free"><a href="#1-1-8-free" class="headerlink" title="1.1.8 free"></a>1.1.8 free</h3><blockquote><p>Show memory usage. -h for human readable format.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free [-h]</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-9-who"><a href="#1-1-9-who" class="headerlink" title="1.1.9 who"></a>1.1.9 who</h3><blockquote><p>List user info, including username, terminal device and login time.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="1-1-10-su-sudo"><a href="#1-1-10-su-sudo" class="headerlink" title="1.1.10 su&#x2F;sudo"></a>1.1.10 su&#x2F;sudo</h3><blockquote><p>Switch user.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su username</span><br><span class="line">sudo <span class="built_in">command</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="1-2-Directory-Related"><a href="#1-2-Directory-Related" class="headerlink" title="1.2 Directory Related"></a>1.2 Directory Related</h2><h3 id="1-2-1-pwd"><a href="#1-2-1-pwd" class="headerlink" title="1.2.1 pwd"></a>1.2.1 pwd</h3><blockquote><p>Current working directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="1-2-2-cd"><a href="#1-2-2-cd" class="headerlink" title="1.2.2 cd"></a>1.2.2 cd</h3><blockquote><p>Change directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="1-2-3-ls"><a href="#1-2-3-ls" class="headerlink" title="1.2.3 ls"></a>1.2.3 ls</h3><blockquote><p>List directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> [-l] [-a] [-F]</span><br><span class="line">-a : show hidden items</span><br><span class="line">-A : show hidden items without . and ..</span><br><span class="line">-l : show detailed properties</span><br><span class="line">-F : append symbol to file name</span><br><span class="line">-R : list recursively</span><br><span class="line">-h : usually -lh, human readable</span><br><span class="line">-i : show inode</span><br></pre></td></tr></table></figure><p>Output format.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 2 tonix tonix 4096 Nov 15 18:32 flip</span><br><span class="line">1.1) d/-/l/... : directory/file/link, etc.</span><br><span class="line">1.2) rwx rwx rwx : Owner Group Others</span><br><span class="line">2) 2 : How many links point to this file</span><br><span class="line">3) tonix : Owner</span><br><span class="line">4) tonix : Group</span><br><span class="line">5) 4096 : size in Byte, directory is 4096</span><br><span class="line">6) time : Last modified time</span><br><span class="line">7) flip : file name</span><br></pre></td></tr></table></figure></blockquote><h2 id="1-3-Text-Related"><a href="#1-3-Text-Related" class="headerlink" title="1.3 Text Related"></a>1.3 Text Related</h2><h3 id="1-3-1-cat"><a href="#1-3-1-cat" class="headerlink" title="1.3.1 cat"></a>1.3.1 cat</h3><blockquote><p>Show small text file. -n for line number.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [-n] file</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-2-more"><a href="#1-3-2-more" class="headerlink" title="1.3.2 more"></a>1.3.2 more</h3><blockquote><p>Show large text file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more file</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-3-head-tail"><a href="#1-3-3-head-tail" class="headerlink" title="1.3.3 head&#x2F;tail"></a>1.3.3 head&#x2F;tail</h3><blockquote><p>Show first or last n lines of a text file. 10 lines by default. -n to set how many lines. For head, negative means all but last n lines.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> [-n number] file</span><br><span class="line"><span class="built_in">tail</span> [-n number] [-f] file</span><br></pre></td></tr></table></figure><p>For tail, <code>-f</code> means flush file if the file changes during time, e.g. log file.</p></blockquote><h3 id="1-3-4-stat"><a href="#1-3-4-stat" class="headerlink" title="1.3.4 stat"></a>1.3.4 stat</h3><blockquote><p>List file status.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">stat</span> semaphore.h</span><br><span class="line">File: semaphore.h</span><br><span class="line">Size: 1306            Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 820h/2080d      Inode: 7919        Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: ( 1000/   tonix)   Gid: ( 1000/   tonix)</span><br><span class="line">Access: 2022-12-24 14:39:40.595546548 +0800</span><br><span class="line">Modify: 2022-11-15 21:10:10.903008259 +0800</span><br><span class="line">Change: 2022-11-15 21:10:10.903008259 +0800</span><br><span class="line">Birth: -</span><br></pre></td></tr></table></figure><p>We can use <code>-c</code> parameter to indicate which property to show. e.g. <code>-c %s</code> show only size as a number.</p></blockquote><h2 id="1-4-File-Management"><a href="#1-4-File-Management" class="headerlink" title="1.4 File Management"></a>1.4 File Management</h2><h3 id="1-4-1-touch"><a href="#1-4-1-touch" class="headerlink" title="1.4.1 touch"></a>1.4.1 touch</h3><blockquote><p>Create an empty file or set file time.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> [-a] [-m] [-d] file</span><br><span class="line">-a : atime - <span class="built_in">read</span> time</span><br><span class="line">-m : mtime - modified time</span><br><span class="line">-d : both atime and mtime</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-2-mkdir"><a href="#1-4-2-mkdir" class="headerlink" title="1.4.2 mkdir"></a>1.4.2 mkdir</h3><blockquote><p>Make directory, huh.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [-p] directory</span><br><span class="line">-p : create recursively</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-3-cp"><a href="#1-4-3-cp" class="headerlink" title="1.4.3 cp"></a>1.4.3 cp</h3><blockquote><p>Copy file or directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [-p] [-d] [-r] [-i] [-a] src dest</span><br><span class="line">-p : Keep properties</span><br><span class="line">-d : Keep <span class="built_in">link</span> property</span><br><span class="line">-r : Recursively</span><br><span class="line">-i : Interactively</span><br><span class="line">-a : Equal to -pdr</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-4-mv"><a href="#1-4-4-mv" class="headerlink" title="1.4.4 mv"></a>1.4.4 mv</h3><blockquote><p>Move file or directory. It is… dangerous, huh. :(</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> src dest</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-5-rm-rmdir"><a href="#1-4-5-rm-rmdir" class="headerlink" title="1.4.5 rm&#x2F;rmdir"></a>1.4.5 rm&#x2F;rmdir</h3><blockquote><p>Remove file or directory. <code>rmdir</code> only delete empty directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [-r] [-f] file</span><br><span class="line">-r : Recursively</span><br><span class="line"><span class="built_in">rmdir</span> [-p] empty_directory</span><br><span class="line">$ <span class="built_in">rmdir</span> -p a/b/c <span class="comment"># c is delete is empty. If b, a is empty, they will be deleted, too.</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-6-grep"><a href="#1-4-6-grep" class="headerlink" title="1.4.6 grep"></a>1.4.6 grep</h3><blockquote><p>Text pattern match.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep [-c] [-i] [-n] [-v] pattern file</span><br><span class="line">-c : show only line number</span><br><span class="line">-i : ignore <span class="keyword">case</span></span><br><span class="line">-n : show line number</span><br><span class="line">-v : inverse match</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-7-find"><a href="#1-4-7-find" class="headerlink" title="1.4.7 find"></a>1.4.7 find</h3><blockquote><p>Find file or directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find [directory] condition operation</span><br><span class="line">-name : file name</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-4-8-chmod"><a href="#1-4-8-chmod" class="headerlink" title="1.4.8 chmod"></a>1.4.8 chmod</h3><blockquote><p>Change mode. Well, you know, the <code>rwxrwxrwx</code> stuff, each is represented with an octonary.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [option] file</span><br><span class="line"><span class="built_in">chmod</span> u+x file<span class="comment"># add execute permission for user</span></span><br><span class="line"><span class="built_in">chmod</span> g-r file<span class="comment"># remove read permission for group</span></span><br><span class="line"><span class="built_in">chmod</span> o+w file<span class="comment"># add write permission for others</span></span><br><span class="line"><span class="built_in">chmod</span> 777 file<span class="comment"># enable all permission for all</span></span><br></pre></td></tr></table></figure><p>Go back to [4.1.3.3 Execute Permission](#4.1.3.3 Execute Permission)</p></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meet Linux</title>
      <link href="/posts/Meet-Linux/"/>
      <url>/posts/Meet-Linux/</url>
      
        <content type="html"><![CDATA[<h1 style="text-align: center; font-size: 4em"><b>System Programming</b></h1><p style="text-align: center; font-size: 2em"><i>" One vision, one purpose. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><hr><h1 id="Chapter-Zero-Meet-Linux"><a href="#Chapter-Zero-Meet-Linux" class="headerlink" title="Chapter Zero - Meet Linux"></a>Chapter Zero - Meet Linux</h1><h2 id="0-1-What-is-Linux"><a href="#0-1-What-is-Linux" class="headerlink" title="0.1 What is Linux?"></a>0.1 What is Linux?</h2><h3 id="0-1-1-Linux-OS"><a href="#0-1-1-Linux-OS" class="headerlink" title="0.1.1 Linux OS"></a>0.1.1 Linux OS</h3><blockquote><ol><li>Kernal：系统核心。</li><li>Shell：用户与计算机交流的接口。</li><li>文件结构：a.k.a. 根文件系统。</li><li>实用工具</li></ol><img src="/posts/Meet-Linux/image-20221224130902822.png" alt="image-20221224130902822" style="zoom:50%;"></blockquote><h3 id="0-1-2-Standards"><a href="#0-1-2-Standards" class="headerlink" title="0.1.2 Standards"></a>0.1.2 Standards</h3><blockquote><p><b>POSIX</b></p><blockquote><p>POSIX 是 <code>Portable Operating System Interface</code> 的缩写，POSIX 标准是为了应用程序跨 UNIX 平台的移植性而定义的源代码级的标准，后扩充为单一 UNIX 标准。其作用是通过规定应用程序接口等的规范，确保程序的兼容性与可以执行。</p></blockquote><p><b>LSB</b></p><blockquote><p>LSB 是 <code>Linux Standard Base</code> 的缩写，LSB 标准是 Linux 操作系统在应用及平台之间提高互操作性的核心标准。</p></blockquote><p><b>POSIX vs LSB</b></p><blockquote><p>Difference：</p><ul><li>LSB 标准为二进制级标准，应用程序移植时无需重新编译，而 POSIX 标准为源代码级的标准，移植时需使用对应编译器重新编译。</li><li>均规定了相关工具与命令。</li></ul><p>Similarity：</p><ul><li>均规定了程序移植的规范。</li><li>LSB 标准包括许多 POSIX 接口。</li></ul></blockquote></blockquote><h2 id="0-2-Root-directories"><a href="#0-2-Root-directories" class="headerlink" title="0.2 Root directories"></a>0.2 Root directories</h2><blockquote><p><img src="/posts/Meet-Linux/image-20221224130337040.png" alt="image-20221224130337040"></p><p>(1) 启动相关</p><ul><li>&#x2F;boot：Linux 内核和启动文件，在启动时最先被加载。</li><li>&#x2F;proc：虚拟目录，进程文件系统的根目录，对应正在运行的进程，访问进程对应的内存空间。</li><li>&#x2F;run：临时文件系统，储存系统进程的变量数据等。</li><li>&#x2F;sys：虚拟目录，包含连接到计算机的设备、驱动以及某些内核功能。</li></ul><p>(2) 动态程序</p><ul><li>bin：大部分 Gnu&#x2F;Coreutils 和 linux-utils 程序的目录，存放必要的命令。</li><li>sbin：超级管理员权限的程序目录，系统管理目录。</li><li>lib，lib32，lib64，libx32：bin，sbin 中程序所需库的目录，必要的运行库。</li><li>&#x2F;opt：用于安装附加软件。</li><li>&#x2F;usr：包含了一般不需要修改的应用程序，如命令程序文件、程序库、手册和其他文档。</li></ul><p>(3) 环境与数据</p><ul><li>&#x2F;etc：系统配置文件目录，包括密码文件、网卡信息、环境变量设置等。</li><li>&#x2F;var：存放不断变化的文件，如日志文件等。</li></ul><p>(4) 静态文件</p><ul><li>&#x2F;root：超级用户的主目录。</li><li>&#x2F;home：用户的主目录，为用户创建的文件加及数据。</li><li>&#x2F;tmp：临时文件，关机时删除。</li><li>&#x2F;srv：存放作为服务器时，启动时需要提取的数据。</li></ul><p>(5) 设备相关</p><ul><li><p>&#x2F;lost+found：存放和其他目录没有关联的文件，系统出错时产生的部分文件会存放至此。</p></li><li><p>&#x2F;media：系统自动识别的挂载设备，如外接硬盘等。</p></li><li><p>&#x2F;mnt：存放临时的映射文件系统。</p></li><li><p>&#x2F;dev：包含外部设备信息，但不包括驱动。</p></li></ul><p>(6) 其他目录</p><ul><li>&#x2F;snap：Ubuntu 的包管理目录。</li></ul></blockquote><hr><p style="text-align: center; font-size: 2em"><i>" Do or do not. There is no try. "</i></p><p style="text-align: center">Copyright &copy; Tony's Studio 2020 - 2022</p><h1 style="text-align: center; font-size: 4em"><b>- EOF -</b></h1>]]></content>
      
      
      <categories>
          
          <category> BUAA </category>
          
          <category> System Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BUAA </tag>
            
            <tag> System Programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
